#!/usr/bin/env bash
#
#                       88
#                       888
#                       888
#       .d8888b .d88b.  888  .d88b.  888d888 .d8888b
#      d88P"   d88""88b 888 d88""88b 888P"   88K
#      888     888  888 888 888  888 888     "Y8888b.
#  d8b Y88b.   Y88..88P 888 Y88..88P 888          X88
#  Y8P  "Y8888P "Y88P"  888  "Y88P"  888      88888P'
#
# -------------------------------------------------------------------------
# Version: 0.1
# File: .colors
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Color configuration
# -------------------------------------------------------------------------
#
#   - Benchmark - https://imgur.com/xIyuaYt
#   - https://github.com/termstandard/colors
#   - https://stackoverflow.com/questions/4842424
#   - https://stackoverflow.com/questions/27159322
#   - https://tldp.org/HOWTO/Bash-Prompt-HOWTO/c583.html
#   - https://misc.flogisoft.com/bash/tip_colors_and_formatting
#   - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
#   - https://wikipedia.org/wiki/List_of_monochrome_and_RGB_color_formats
#   - escapes vs. tput - https://unix.stackexchange.com/questions/274453
#   - ANSI Escape Codes - https://en.m.wikipedia.org/wiki/ANSI_escape_code
#   - TERM COLOR DISCUSSION - https://news.ycombinator.com/item?id=30483899
#   - https://tuxthink.blogspot.com/2012/02/changing-font-and-background-of.html?m=1
#   - https://unix.stackexchange.com/questions/755954/how-does-a-terminal-produce-accurate-colors
#
# Note: Some control escape sequences, like \e for ESC, are not guaranteed
# to work in all languages and compilers. It is recommended to use
# the decimal 27, octal \033, or hex \x1B representation as escape code.
#
#==========================================================================
# {{{ Environment Color Codes
#
# =========================================================================

export CLICOLOR=1 # Defaults - https://stackoverflow.com/questions/41849875

# https://the.exa.website/docs/colour-themes
export EXA_COLORS="\
  :hd=1;4;38;5;13;48;5;8:sb=1;4;38;5;13
  :sn=1;4;38;5;13:da=3;38;5;13:uu=2;38;5;13:gd=1;4;38;5;2:
"

# LS_COLORS
export DIRCOLORS="$HOME/.dircolors"
# https://gnu.org/software/coreutils/manual/html_node/dircolors-invocation.html
# TODO: Fix 
[ -e "$DIRCOLORS" ] && eval $( dircolors -b "$DIRCOLORS" )
[ -e "$DIRCOLORS" ] && source "$DIRCOLORS"

# https://askubuntu.com/questions/1042234
# https://gnu.org/software/grep/manual/grep.html#index-GREP_005fCOLORS-environment-variable
export GREP_COLORS="\
  :fn=1;4:se=1:ln=1;2;3:sl=2:cx=2;3;9:ms=0;1;4;7:mc=0;1;4;7:mt=0;1;4;7:bn=31:
"

# }}}

#==========================================================================
# {{{ ANSI Monochrome
#
# Delimited by opening square bracket ([), known as a
# Control Sequence Introducer (CSI), optionally followed by
# semi-colon (;) delimeted arguments and the command itself.
#
# All common sequences just use the parameters as
# a series of semicolon-separated numbers such as 1;2;3.
# Missing numbers are treated as 0 (1;;3 acts like the middle number is 0,
# and no parameters at all in ESC[m acts like a 0 reset code).
#
#┏━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┓
#┃  ## ┃ GNOME Terminal         ┃ xterm                  ┃ non-GUI TTY    ┃
#┡━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━┩
# │  0 │ «Reset style»          │ «Reset style»          │ «Reset style»

# │  1 │ +Bold, +brighter color │ +Bold, +Brighter color │ +Brighter color
# │  2 │ +Fainter color         │ +Fainter color         │ +Forced grey
# │  3 │ +Italic                │ +Italic                │ +Forced green
# │  4 │ +Underline             │ +Underline             │ +Forced cyan
# │  5 │ «no effect»            │ +Blink                 │ «No effect»
# │  6 │ «no effect»            │ +Blink (fast)          │ «No effect»
# │  7 │ +Reverse video         │ +Invert colors         │ +Reverse video
# │  8 │ +Invisible             │ +Invisible             │ «No effect»
# │  9 │ +Strikethrough         │ +Strikethrough         │ «No effect»

#-------------------------- Unset Style -----------------------------------

# │ 21 │ -Bold, -Brighter color │ -Double underline      │ -Brighter color
# │ 22 │ -Fainter color         │ -Fainter color         │ -Forced grey
# │ 23 │ -Italic                │ -Italic                │ -Forced green
# │ 24 │ -Underline             │ -Underline,            │ -Forced cyan
# │ 25 │ «No effect»            │ -Blink                 │ «No effect»
# │ 26 │ «No effect»            │ -Blink (fast)          │ «No effect»
# │ 27 │ -Reverse video         │ -Invert colors         │ -Reverse video
# │ 28 │ -Invisible             │ -Invisible             │ «No effect»
# │ 29 │ -Strikethrough         │ -Strikethrough         │ «No effect»
#──────────────────────────────────────────────────────────────────────────
#
#==========================================================================


# CSI (Control Sequence Introducer) Escape Sequences
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences
# -------------------------------------------------------------------------
#
# Ctrl Escape: 
# Standard Escape: \e[
# Octal Escape: \033[
# Decimal Escape: \27[
# Unicode Escape: \u001b[
# Hexadecimal Escape: \x1B[

# SGR (Select Graphic Rendition) Styles
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters
# -------------------------------------------------------------------------
# Styles Reset - 0, On 0-9, and Off 21-29
# -------------------------------------------------------------------------
# If no codes are given, CSI m ( [m ) is treated as CSI 0m ( [0m ) (reset / normal).
# - [0m Reset [m

# - \e[1m Bold \e[21m
# - \e[2m Faint \e[22m
# - \e[3m Italic \e[23m
# - \e[4m Underline \e[24m
# - \e[5m Blink \e[25m
# - \e[6m Blink (Fast) \e[26m
# - \e[7m Reverse \e[27m
# - \e[8m Invisible \e[28m
# - \e[9m Strikethrough \e[29m
#
# -------------------------------------------------------------------------
DEFAULT='\e[0m'

# Monochrome Term(inal) Styles --------------------------------------------
BOLD='\e[1m' # tput bold
DIM='\e[2m' # tput dim
ITALIC='\e[3m' # tput sitm
UNDERLINE='\e[4m' # tput smul
BLINK='\e[5m' # tput blink
REVERSE='\e[7m' # tput rev
INVISIBLE='\e[8m' # tput invis
STRIKE='\e[9m' # tput smso

function Monochrome () {
  echo && echo ANSI Monochrome && echo

  local styles=(
    DEFAULT BOLD DIM ITALIC UNDERLINE
    BLINK STROBE REVERSE INVISIBLE STRIKE
  )

  local CSI='\\e'
  for style in "${!styles[@]}"; do
    echo " ${style} - ${styles[ $style ]} ➖ \e[2m${CSI}\e[m\e[1m[${style}m\e[m" \
      "\e[${style}mThe quick brown fox jumped over the lazy dog!\e[m"
  done && echo

  for style in "${!styles[@]}"; do
    echo "\e[1m${styles[ $style ]}\e[m ➖ \e[2m${CSI}\e[m\e[1m[${style}m\e[m" \
      "\e[${style}mThe quick brown fox jumped over the lazy dog!\e[m"
  done && echo
} # Monochrome

# }}}

#==========================================================================
# {{{ 3-bit 16-Color
#
#   - https://en.m.wikipedia.org/wiki/Color_Graphics_Adapter
#   - https://retrocomputing.stackexchange.com/questions/20043

#┏━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
#┃  ### ┃ GNOME Terminal          ┃ xterm                   ┃ non-GUI TTY ┃
#┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
# │  30 │ Very dark grey          │ Black                   │ Black
# │  31 │ Dull red                │ Red                     │ Red
# │  32 │ Dull green              │ Green             │     │ Green
# │  33 │ Dull yellow             │ Yellow                  │ Yellow
# │  34 │ Greyish blue            │ Dark blue               │ Blue
# │  35 │ Dull purple             │ Purple                  │ Magenta
# │  36 │ Teal                    │ Cyan                    │ Cyan
# │  37 │ Light grey              │ White                   │ White

# │  39 │ «Reset color»           │ «Reset color»           │ «Reset color»

# │1;30 │ Dark grey               │ Bold Black              │ Bold Black
# │1;31 │ Red                     │ Bold Red                │ Bold Red
# │1;32 │ Lime green              │ Bold Green              │ Bold Green
# │1;33 │ Yellow                  │ Bold Yellow             │ Bold Yellow
# │1;34 │ Light greyish blue      │ Bold Blue               │ Bold Blue
# │1;35 │ Light purple            │ Bold Magenta            │ Bold Magenta
# │1;36 │ Cyan                    │ Bold Cyan               │ Bold Cyan
# │1;37 │ Off white               │ Bold White              │ Bold White
#──────────────────────────────────────────────────────────────────────────
#
#==========================================================================

# XTerm X11 ColorSpace Foreground 30-37, 39
# -------------------------------------------------------------------------
BLACK='\e[30m' #000000 RGB( 0,0,0 )
RED='\e[31m' #800000 RGB( 128,0,0 )
GREEN='\e[32m' #008000 RGB( 0,128,0 )
YELLOW='\e[33m' #808000 RGB( 128,128,0 )
BLUE='\e[34m' #000080 RGB( 0,0,128 )
MAGENTA='\e[35m' #800080 RGB( 128,0,128 )
CYAN='\e[36m' #008080 RGB( 0,128,128 )
WHITE='\e[37m' #808080 RGB( 192,192,192 )

# -------------------------------------------------------------------------
NORMAL='\e[39m'
# -------------------------------------------------------------------------


# XTerm X11 ColorSpace Bold Foreground 1;30-1;37
# -------------------------------------------------------------------------
# [1;30m - Bold Black
# [1;31m - Bold Red
# [1;32m - Bold Green
# [1;33m - Bold Yellow
# [1;34m - Bold Blue
# [1;35m - Bold Magenta
# [1;36m - Bold Cyan
# [1;37m - Bold White

# XTerm X11 ColorSpace Background 40-47
# -------------------------------------------------------------------------
BLACK_BG=$( tput setab 0 ) #000000 RGB( 0,0,0 ) [40m
RED_BG=$( tput setab 1 ) #000000 RGB( 128,0,0 ) [41m
GREEN_BG=$( tput setab 2 ) #000000 RGB( 0,128,0 ) [42m
YELLOW_BG=$( tput setab 3 ) #000000 RGB( 128,128,0 ) [43m
BLUE_BG=$( tput setab 4 ) #000000 RGB( 0,0,128 ) [44m
MAGENTA_BG=$( tput setab 5 ) #000000 RGB( 128,0,128 ) [45m
CYAN_BG=$( tput setab 6 ) #000000 RGB( 0,128,128 ) [46m
WHITE_BG=$( tput setab 7 ) #000000 RGB( 192,192,192 ) [47m
#
# -------------------------------------------------------------------------
NORMAL_BG=[49m
# -------------------------------------------------------------------------

# Bright Background onto 1;40-1;47
# -------------------------------------------------------------------------
# [1;40m - Dark Grey Background
# [1;41m - Light Red Background
# [1;42m - Light Green Background
# [1;43m - Yellow Background
# [1;44m - Light Blue Background
# [1;45m - Light Purple Background
# [1;46m - Turquoise Background
# [1;47m - Light White Background

#┏━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
#┃  ### ┃ GNOME Terminal          ┃ xterm                   ┃ non-GUI TTY ┃
#┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
# │  40 │ Very dark grey          │ Black                   │ Black
# │  41 │ Dull red                │ Red                     │ Light red
# │  42 │ Dull green              │ Light green             │ Light green
# │  43 │ Dull yellow             │ Yellow                  │ Yellow
# │  44 │ Greyish blue            │ Dark blue               │ Sky blue
# │  45 │ Dull purple             │ Purple                  │ Purple
# │  46 │ Teal                    │ Cyan                    │ Cyan

# │  49 │ «Reset color»           │ «Reset color»           │ «Reset color»

# │1;40 │ Dark grey               │ Dull grey               │ Black
# │1;41 │ Red                     │ Bright red              │ Light red
# │1;42 │ Lime green              │ Bright green            │ Light green
# │1;43 │ Yellow                  │ Bright yellow           │ Yellow
# │1;44 │ Light greyish blue      │ Dull blue               │ Sky blue
# │1;45 │ Light purple            │ Magenta                 │ Purple
# │1;46 │ Cyan                    │ Bright cyan             │ Cyan
# │1;47 │ Off white               │ White                   │ Light grey
#──────────────────────────────────────────────────────────────────────────

# ANSI 3-bit & 4-bit Colorspace(s)
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
function 3bit () {
  echo && echo " ANSI 3-bit" && echo

  printf " %9s " ' 🎨'
  for BG in $( seq 40 47 ); do
    printf "[${BG}m %-8s[m" "\\e[${BG}m"
  done && echo

  for FG in $( seq 30 37 ); do
    printf "[${FG}m%-9s[m" " \\e[${FG}m ➤"

    for BG in $( seq 40 47 ); do
      printf "[${FG};${BG}m%-9s[m" " ${FG};${BG}m"
    done && echo
  done && echo
  echo && echo " ANSI 3-bit [1;39mBright[m" && echo

  printf " %12s " ' 🎨  '
  for BG in $( seq 40 47 ); do
    printf "[${BG}m %-8s [m" "\\e[${BG}m"
  done && echo

  for FG in $( seq 30 37 ); do
    printf "[1;${FG}m %-11s [m" "\\e[1;${FG}m ➤"

    for BG in $( seq 40 47 ); do
      printf "[1;${FG};${BG}m %-8s [m" "1;${FG};${BG}m"
    done && echo
  done && echo

  echo && echo " ANSI 3-bit [7m Video Reversal [m" && echo

  printf " %12s " '  🎨 '
  for FG in $( seq 30 37 ); do
    printf "[7;${FG};49m %-8s [m" "7;${FG}m"
  done && echo

  printf " %12s " '[1;39mBright 🎨 '
  for FG in $( seq 30 37 ); do
    printf "[1;7;${FG}m %-8s [m" "1;7;${FG}m"
  done && echo

  echo

} # 3bit

# }}}

#==========================================================================
# {{{ 4-bit IBM AIXterm,16-Color
#
#   The 16-color feature is borrowed from IBM aixterm,
#   which maps 16 codes each for foreground and background onto two ranges;
#   - https://wikipedia.org/wiki/List_of_monochrome_and_RGB_color_formats#4-bit_RGBI
#==========================================================================

# Bright Foreground Colors ------------------------------------------------
BLACK_LIGHT=$( tput setaf 8 )
RED_LIGHT=$( tput setaf 9 )
GREEN_LIGHT=$( tput setaf 10 )
YELLOW_LIGHT=$( tput setaf 11 )
BLUE_LIGHT=$( tput setaf 12 )
PURPLE_LIGHT=$( tput setaf 13 )
CYAN_LIGHT=$( tput setaf 14 )
WHITE_LIGHT=$( tput setaf 15 )
MAGENTA=$PURPLE_LIGHT

# Bright Foreground onto 90-97
# -------------------------------------------------------------------------
# [90m - Grey
# [91m - Light Red
# [92m - Light Green
# [93m - Light Yellow
# [94m - Light Blue
# [95m - Light Purple
# [96m - Turquoise
# [97m - White

#┏━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
#┃  ### ┃ GNOME Terminal          ┃ xterm                   ┃ non-GUI TTY ┃
#┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
# │  90 │ Dark grey               │ Dull grey               │ Dull grey
# │  91 │ Red                     │ Bright red              │ Bright red
# │  92 │ Lime green              │ Bright green            │ Bright green
# │  93 │ Yellow                  │ Bright yellow           │ Pure yellow
# │  94 │ Light greyish blue      │ Dull blue               │ Deep blue
# │  95 │ Light purple            │ Magenta                 │ Magenta
# │  96 │ Cyan                    │ Bright cyan             │ Bright cyan
# │  97 │ Off white               │ White                   │ White
#──────────────────────────────────────────────────────────────────────────

# Bright Background Colors ------------------------------------------------
BLACK_LIGHT_BG=$( tput setab 8 )
RED_LIGHT_BG=$( tput setab 9 )
GREEN_LIGHT_BG=$( tput setab 10 )
YELLOW_LIGHT_BG=$( tput setab 11 )
BLUE_LIGHT_BG=$( tput setab 12 )
MAGENTA_LIGHT_BG=$( tput setab 13 )
CYAN_LIGHT_BG=$( tput setab 14 )
WHITE_LIGHT_BG=$( tput setab 15 )

GRAY_BG=$( tput setab 16 )
# Bright Background onto 100-107
# -------------------------------------------------------------------------
# [100m - Dark Grey Background
# [101m - Light Red Background
# [102m - Light Green Background
# [103m - Yellow Background
# [104m - Light Blue Background
# [105m - Light Purple Background
# [106m - Turquoise Background
# [107m - Light White Background

#┏━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
#┃  ### ┃ GNOME Terminal          ┃ xterm                   ┃ non-GUI TTY ┃
#┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
# │ 100 │ Dark grey               │ Dull grey               │ Black
# │ 101 │ Red                     │ Bright red              │ Light red
# │ 102 │ Lime green              │ Bright green            │ Light green
# │ 103 │ Yellow                  │ Bright yellow           │ Yellow
# │ 104 │ Light greyish blue      │ Dull blue               │ Sky blue
# │ 105 │ Light purple            │ Magenta                 │ Purple
# │ 106 │ Cyan                    │ Bright cyan             │ Cyan
# │ 107 │ Off white               │ White                   │ Light grey
#──────────────────────────────────────────────────────────────────────────

# ANSI 4-bit Colorspace(s)
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
function 4bit () {
  echo && echo " ANSI 4-bit [1mBright [2;3m(AIXTerm Non-Standard)[m" && echo

  printf " %9s " ' 🎨'
  for BG in $( seq 100 107 ); do
    printf "[${BG}m %-8s[m" "\\e[${BG}m"
  done && echo

  for FG in $( seq 90 97 ); do
    printf "[${FG}m%-9s[m" " \\e[${FG}m ➤"

    for BG in $( seq 100 107 ); do
      printf "[${FG};${BG}m%-9s[m" " ${FG};${BG}m"
    done && echo
  done && echo

} # 4bit

# }}}

#==========================================================================
# {{{ 8-bit 256 Color
#
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#8-bit
#   - https://www.ditig.com/publications/256-colors-cheat-sheet#xterm-system-colors
#   - https://www.ditig.com/publications/256-colors-cheat-sheet#xterm-non-system-colors
#
# 256 ansi colors # Where N is a color code {0-256}
# 38;5;n  │Foreground - Replace ɴ with value from 256-color chart below
#         │for closest supported color (non-GUI TTY has only 16 colors!)
#--------------------------------------------------------------------------
# 48;5;n  │Background - Replace ɴ with value from 256-color chart below
#         │for closest supported color (non-GUI TTY has only 16 colors!)
# =========================================================================

function 8bit () {
  # https://unix.stackexchange.com/questions/9957/how-to-check-if-bash-can-print-colors
  local columns=6
  local fg='\e[38;5;'
  local bg='\e[48;5;'

  echo && echo " ANSI 8-bit 256 [2;3m(0-7) [m[1mStandard Colors[m" && echo
  printf "  # [1m %-12s  [7m %-12s[m\n\n" Foreground Background

  for n in {0..7} ; do
    printf " %2s ${fg}%dm \\${fg}%-3s \e[m  ${bg}%dm \\${bg}%-3s \e[m\n" \
      $n $n "${n}m" $n "${n}m"
  done

  echo && echo " ANSI 8-bit 256 [2;3m(8-15) [m[1mHigh-Intensity Colors[m" && echo
  printf "  # [1m %-12s  [7m %-12s[m\n\n" Foreground Background

  for n in {8..15} ; do
    printf " %2s ${fg}%dm \\${fg}%-3s \e[m  ${bg}%dm \\${bg}%-3s \e[m\n" \
      $n $n "${n}m" $n "${n}m"
  done

  echo && echo " ANSI 8-bit 256 [2;3m(16-231) [m[3m(Extended)[m [1m216 Colors[m" && echo
  printf "  # [1m %-12s  [7m %-12s[m\n\n" Foreground Background

  for n in {16..231} ; do
    printf "${fg}%dm %3s \e[m${bg}%dm %3s \e[m" $n "${n}" $n "${n}"

    if (( ( n > 15 ) && (n-15) % $columns == 0 ))
        then printf "\n";
    fi
  done

  echo && echo " ANSI 8-bit 256 [2;3m(232-255) [m[1mGrayScale Colors[m" && echo
  printf "  # [1m %-12s  [7m %-12s[m\n\n" Foreground Background

  for n in {232..255} ; do
    printf "${fg}%dm %3s \e[m${bg}%dm %3s \e[m" $n "${n}" $n "${n}"

    if (( ( n > 15 ) && (n-15) % $columns == 0 ))
        then printf "\n";
    fi
  done
} # 8bit

# }}}

#==========================================================================
# {{{ 24-Bit True Color
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#24-bit
#
# 38;2;ʀ;ɢ;ʙ │Foreground - Replace ʀ, ɢ, and ʙ with RGB values from 0 to 255
#             for closest supported color (non-GUI TTY has only 16 colors!)
#--------------------------------------------------------------------------
# 48;2;ʀ;ɢ;ʙ │Background - Replace ʀ, ɢ, and ʙ with RGB values from 0 to 255
#             for closest supported color (non-GUI TTY has only 16 colors!)
# =========================================================================

# https://github.com/microsoft/terminal/issues/11057
export COLORTERM='24bit' # [24bit|truecolor|xterm-truecolor]

function 24bit () { # https://github.com/JohnMorales/dotfiles/blob/master/colors/24-bit-color.sh
  # https://unix.stackexchange.com/questions/404414/print-true-color-24-bit-test-pattern/404415#404415
  # Truecolor test
  printf "\n\e[38;2;255;100;0mTRUECOLOR ${COLORTERM}\e[0m\n"

  awk \
    -v term_cols="${width:-$( tput cols || echo 80 )}" \
    -v term_lines="${height:-$( tput lines || echo 1 )}" \
    'BEGIN {
      s="/\\";
      total_cols=term_cols * term_lines;
      for ( colnum = 0; colnum < total_cols; colnum++ ) {
        r = 255 - ( colnum * 255 / total_cols );
        g = ( colnum * 510 / total_cols );
        b = ( colnum * 255 / total_cols );

        if ( g > 255 ) g = 510-g;

        printf "\033[48;2;%d;%d;%dm", r, g, b;
        printf "\033[38;2;%d;%d;%dm", 255 - r, 255 - g, 255 - b;
        printf "%s\033[0m", substr( s, colnum % 2 + 1, 1 );
        if ( colnum % term_cols==term_cols ) printf "\n";
      }
      printf "\n";
    }' # BEGIN
} # 24bit

# }}}

# {{{ Functions
# =========================================================================
function Colors () {
  echo && echo "Colors: $( tput colors )"
  printf "\n\$GREP_COLORS\n$GREP_COLORS\n"
  printf "\n\$LS_COLORS\n$LS_COLORS\n"
  printf "\ndircolors -b\n$( dircolors -b )\n"
  printf "\ndircolors .dircolors\n$( dircolors "${DIRCOLORS}" )\n"
  printf "\ndircolors -b .dircolors\n$( dircolors -b "${DIRCOLORS}" )\n"
  printf "\ndircolors --print-ls-colors\n$( dircolors --print-ls-colors )\n"
  echo && Monochrome
  echo && 3bit
  echo && 4bit
  echo && 8bit
  echo && 24bit
  echo
} # Colors

# }}}

echo && echo "👤 ${BOLD}$( whoami )${RESET} \
💜s devPunks ${REVERSE}${BOLD}${MAGENTA} .colors ${RESET}"
echo

# vim: foldmethod=marker
