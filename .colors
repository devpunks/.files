#!/usr/bin/env bash
#
#                       88
#                       888
#                       888
#       .d8888b .d88b.  888  .d88b.  888d888 .d8888b
#      d88P"   d88""88b 888 d88""88b 888P"   88K
#      888     888  888 888 888  888 888     "Y8888b.
#  d8b Y88b.   Y88..88P 888 Y88..88P 888          X88
#  Y8P  "Y8888P "Y88P"  888  "Y88P"  888      88888P'
#
# -------------------------------------------------------------------------
# Version: 0.1
# File: .colors
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Color configuration
# -------------------------------------------------------------------------
#
#   - Benchmark - https://imgur.com/xIyuaYt
#   - https://github.com/termstandard/colors
#   - https://ditig.com/256-colors-cheat-sheet
#   - https://stackoverflow.com/questions/4842424
#   - https://stackoverflow.com/questions/27159322
#   - https://tldp.org/HOWTO/Bash-Prompt-HOWTO/c583.html
#   - https://misc.flogisoft.com/bash/tip_colors_and_formatting
#   - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
#   - https://wikipedia.org/wiki/List_of_monochrome_and_RGB_color_formats
#   - escapes vs. tput - https://unix.stackexchange.com/questions/274453
#   - ANSI Escape Codes - https://en.m.wikipedia.org/wiki/ANSI_escape_code
#   - TERM COLOR DISCUSSION - https://news.ycombinator.com/item?id=30483899
#   - https://tuxthink.blogspot.com/2012/02/changing-font-and-background-of.html?m=1
#   - https://unix.stackexchange.com/questions/755954/how-does-a-terminal-produce-accurate-colors
#
# Note: Some control escape sequences, like \e for ESC, are not guaranteed
# to work in all languages and compilers. It is recommended to use
# the decimal 27, octal \033, or hex \x1B representation as escape code.
#
#==========================================================================
# {{{ Environment Color Codes
#
# =========================================================================

export CLICOLOR=1 # Defaults - https://stackoverflow.com/questions/41849875

# https://the.exa.website/docs/colour-themes
export EXA_COLORS="\
  :hd=1;4;38;5;13;48;5;8:sb=1;4;38;5;13
  :sn=1;4;38;5;13:da=3;38;5;13:uu=2;38;5;13:gd=1;4;38;5;2:
"

# LS_COLORS
export DIRCOLORS="$HOME/.dircolors"
# https://gnu.org/software/coreutils/manual/html_node/dircolors-invocation.html
# TODO: Fix 
[ -e "$DIRCOLORS" ] && eval $( dircolors -b "$DIRCOLORS" )
[ -e "$DIRCOLORS" ] && source "$DIRCOLORS"

# https://askubuntu.com/questions/1042234
# https://gnu.org/software/grep/manual/grep.html#index-GREP_005fCOLORS-environment-variable
export GREP_COLORS="\
  :fn=1;4:se=1:ln=1;2;3:sl=2:cx=2;3;9:ms=0;1;4;7:mc=0;1;4;7:mt=0;1;4;7:bn=31:
"

# }}}

#==========================================================================
# {{{ tput 16-Color
# =========================================================================
# Reset -------------------------------------------------------------------
NC=$( tput sgr0 ) # No Color

# Monochrome Styles -------------------------------------------------------
DIM=$( tput dim )
BOLD=$( tput bold )
REVERSE=$( tput rev )
UNDERLINE=$( tput smul )

# Colors ------------------------------------------------------------------
BLACK=$( tput setaf 0 )
RED=$( tput setaf 1 )
GREEN=$( tput setaf 2 )
YELLOW=$( tput setaf 3 )
BLUE=$( tput setaf 4 )
PURPLE=$( tput setaf 5 )
CYAN=$( tput setaf 6 )
WHITE=$( tput setaf 7 )

# (Light) Colors ----------------------------------------------------------
BLACK_LIGHT=$( tput setaf 8 )
RED_LIGHT=$( tput setaf 9 )
GREEN_LIGHT=$( tput setaf 10 )
YELLOW_LIGHT=$( tput setaf 11 )
BLUE_LIGHT=$( tput setaf 12 )
PURPLE_LIGHT=$( tput setaf 13 ) # MAGENTA
CYAN_LIGHT=$( tput setaf 14 )
WHITE_LIGHT=$( tput setaf 15 )
MAGENTA=$PURPLE_LIGHT

# Background Colors -------------------------------------------------------
BG_BLACK=$( tput setab 0 )
BG_RED=$( tput setab 1 )
BG_GREEN=$( tput setab 2 )
BG_YELLOW=$( tput setab 3 )
BG_BLUE=$( tput setab 4 )
BG_MAGENTA=$( tput setab 5 )
BG_CYAN=$( tput setab 6 )
BG_WHITE=$( tput setab 7 )

# (Light) Background Colors -----------------------------------------------
BG_BLACK_LIGHT=$( tput setab 8 )
BG_RED_LIGHT=$( tput setab 9 )
BG_GREEN_LIGHT=$( tput setab 10 )
BG_YELLOW_LIGHT=$( tput setab 11 )
BG_BLUE_LIGHT=$( tput setab 12 )
BG_MAGENTA_LIGHT=$( tput setab 13 )
BG_CYAN_LIGHT=$( tput setab 14 )
BG_WHITE_LIGHT=$( tput setab 15 )

# }}}

#==========================================================================
# {{{ ANSI Monochrome
#
# Delimited by opening square bracket ([), known as a
# Control Sequence Introducer (CSI), optionally followed by
# semi-colon (;) delimeted arguments and the command itself.
#
# All common sequences just use the parameters as
# a series of semicolon-separated numbers such as 1;2;3.
# Missing numbers are treated as 0 (1;;3 acts like the middle number is 0,
# and no parameters at all in ESC[m acts like a 0 reset code).
#
#==========================================================================

# CSI (Control Sequence Introducer) Escape Sequences
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences
# -------------------------------------------------------------------------
#
# Ctrl Escape: 
# Standard Escape: \e[
# Octal Escape: \033[
# Decimal Escape: \27[
# Unicode Escape: \u001b[
# Hexadecimal Escape: \x1B[

# SGR (Select Graphic Rendition) Styles
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters
# -------------------------------------------------------------------------
# Styles Reset - 0, On 0-9, and Off 21-29
# -------------------------------------------------------------------------
# If no codes are given, CSI m ( [m ) is treated as CSI 0m ( [0m ) (reset / normal).
# - [0m Reset [m

# - [1m Bold [21m
# - [2m Faint [22m
# - [3m Italic [23m
# - [4m Underline [24m
# - [5m Blink [25m
# - [6m Blink (Fast) [26m
# - [7m Reverse [27m
# - [8m Invisible [28m
# - [9m Strikethrough [29m

#┏━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┓
#┃  ## ┃ GNOME Terminal         ┃ xterm                  ┃ non-GUI TTY    ┃
#┡━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━┩
# │  0 │ «Reset style»          │ «Reset style»          │ «Reset style»

# │  1 │ +Bold, +brighter color │ +Bold, +Brighter color │ +Brighter color
# │  2 │ +Fainter color         │ +Fainter color         │ +Forced grey
# │  3 │ +Italic                │ +Italic                │ +Forced green
# │  4 │ +Underline             │ +Underline             │ +Forced cyan
# │  5 │ «no effect»            │ +Blink                 │ «No effect»
# │  6 │ «no effect»            │ +Blink (fast)          │ «No effect»
# │  7 │ +Reverse video         │ +Invert colors         │ +Reverse video
# │  8 │ +Invisible             │ +Invisible             │ «No effect»
# │  9 │ +Strikethrough         │ +Strikethrough         │ «No effect»

function Monochrome () {
  echo && echo ANSI Monochrome && echo

  local styles=(
    Reset Bold Dim Italic Underline
    Blink Strobe Reverse Invisible Strikethrough
  )

  local CSI='\\e'
  for style in "${!styles[@]}"; do
    echo " ${style} - ${styles[ $style ]} ➖ \e[2m${CSI}\e[m\e[1m[${style}m\e[m" \
      "\e[${style}mThe quick brown fox jumped over the lazy dog!\e[m"
  done && echo
} # Monochrome

#-------------------------- Unset Style -----------------------------------

# │ 21 │ -Bold, -Brighter color │ -Double underline      │ -Brighter color
# │ 22 │ -Fainter color         │ -Fainter color         │ -Forced grey
# │ 23 │ -Italic                │ -Italic                │ -Forced green
# │ 24 │ -Underline             │ -Underline,            │ -Forced cyan
# │ 25 │ «No effect»            │ -Blink                 │ «No effect»
# │ 26 │ «No effect»            │ -Blink (fast)          │ «No effect»
# │ 27 │ -Reverse video         │ -Invert colors         │ -Reverse video
# │ 28 │ -Invisible             │ -Invisible             │ «No effect»
# │ 29 │ -Strikethrough         │ -Strikethrough         │ «No effect»
#──────────────────────────────────────────────────────────────────────────

# }}}

#==========================================================================
# {{{ 3-bit & 4-bit IBM aixterm,16-Color
#
#   The 16-color feature is borrowed from IBM aixterm,
#   which maps 16 codes each for foreground and background onto two ranges;
#   - https://en.m.wikipedia.org/wiki/Color_Graphics_Adapter
#   - https://retrocomputing.stackexchange.com/questions/20043
#   - https://wikipedia.org/wiki/List_of_monochrome_and_RGB_color_formats#4-bit_RGBI
# =========================================================================

# Foreground onto 30-37, and 90-97
# -------------------------------------------------------------------------
# [30m - Black
# [31m - Red
# [32m - Green
# [33m - Yellow
# [34m - Blue
# [35m - Purple
# [36m - Cyan
# [37m - Off White
#
# [39m - Reset

# [90m - Dark Grey
# [91m - Light Red
# [92m - Light Green
# [93m - Light Yellow
# [94m - Light Blue
# [95m - Light Purple
# [96m - Turquoise
# [97m - Light White

#┏━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
#┃  ### ┃ GNOME Terminal          ┃ xterm                   ┃ non-GUI TTY ┃
#┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
# │  30 │ Very dark grey          │ Black                   │ Black
# │  31 │ Dull red                │ Red                     │ Light red
# │  32 │ Dull green              │ Light green             │ Light green
# │  33 │ Dull yellow             │ Yellow                  │ Yellow
# │  34 │ Greyish blue            │ Dark blue               │ Sky blue
# │  35 │ Dull purple             │ Purple                  │ Purple
# │  36 │ Teal                    │ Cyan                    │ Cyan
# │  37 │ Light grey              │ Light grey              │ Light grey

# │  39 │ «Reset color»           │ «Reset color»           │ «Reset color»

# │  90 │ Dark grey               │ Dull grey               │ Dull grey
# │  91 │ Red                     │ Bright red              │ Bright red
# │  92 │ Lime green              │ Bright green            │ Bright green
# │  93 │ Yellow                  │ Bright yellow           │ Pure yellow
# │  94 │ Light greyish blue      │ Dull blue               │ Deep blue
# │  95 │ Light purple            │ Magenta                 │ Magenta
# │  96 │ Cyan                    │ Bright cyan             │ Bright cyan
# │  97 │ Off white               │ White                   │ White
#──────────────────────────────────────────────────────────────────────────

# Background onto 40-47, and 100-107
# -------------------------------------------------------------------------
# [40m - Black Background
# [41m - Red Background
# [42m - Green Background
# [43m - Yellow Background
# [44m - Blue Background
# [45m - Purple Background
# [46m - Cyan Background
# [47m - Off White Background
#
# [49m - Reset

# [100m - Dark Grey Background
# [101m - Light Red Background
# [102m - Light Green Background
# [103m - Yellow Background
# [104m - Light Blue Background
# [105m - Light Purple Background
# [106m - Turquoise Background
# [107m - Light White Background

#┏━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
#┃  ### ┃ GNOME Terminal          ┃ xterm                   ┃ non-GUI TTY ┃
#┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
# │  40 │ Very dark grey          │ Black                   │ Black
# │  41 │ Dull red                │ Red                     │ Light red
# │  42 │ Dull green              │ Light green             │ Light green
# │  43 │ Dull yellow             │ Yellow                  │ Yellow
# │  44 │ Greyish blue            │ Dark blue               │ Sky blue
# │  45 │ Dull purple             │ Purple                  │ Purple
# │  46 │ Teal                    │ Cyan                    │ Cyan

# │  49 │ «Reset color»           │ «Reset color»           │ «Reset color»

# │ 100 │ Dark grey               │ Dull grey               │ Black
# │ 101 │ Red                     │ Bright red              │ Light red
# │ 102 │ Lime green              │ Bright green            │ Light green
# │ 103 │ Yellow                  │ Bright yellow           │ Yellow
# │ 104 │ Light greyish blue      │ Dull blue               │ Sky blue
# │ 105 │ Light purple            │ Magenta                 │ Purple
# │ 106 │ Cyan                    │ Bright cyan             │ Cyan
# │ 107 │ Off white               │ White                   │ Light grey
#──────────────────────────────────────────────────────────────────────────

# ANSI 3-bit & 4-bit Colorspace(s)
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
function 3bit () {
  echo && echo " ANSI 3-bit" && echo

  printf " %9s " ' 🎨'
  for BG in $( seq 40 47 ); do
    printf "[${BG}m %-8s[m" "\\e[${BG}m"
  done && echo

  for FG in $( seq 30 37 ); do
    printf "[${FG}m%-9s[m" " \\e[${FG}m ➤"

    for BG in $( seq 40 47 ); do
      printf "[${FG};${BG}m%-9s[m" " ${FG};${BG}m"
    done && echo
  done && echo

  echo && echo " ANSI 3-bit [1;39mBright[m" && echo

  printf " %12s " ' 🎨  '
  for BG in $( seq 40 47 ); do
    printf "[${BG}m %-8s [m" "\\e[${BG}m"
  done && echo

  for FG in $( seq 30 37 ); do
    printf "[1;${FG}m %-11s [m" "\\e[1;${FG}m ➤"

    for BG in $( seq 40 47 ); do
      printf "[1;${FG};${BG}m %-8s [m" "1;${FG};${BG}m"
    done && echo
  done && echo

} # 3bit

function 4bit () {
  echo && echo " ANSI 4-bit (AIXTerm Non-Standard)" && echo

  printf " %9s " ' 🎨'
  for BG in $( seq 100 107 ); do
    printf "[${BG}m %-8s[m" "\\e[${BG}m"
  done && echo

  for FG in $( seq 90 97 ); do
    printf "[${FG}m%-9s[m" " \\e[${FG}m ➤"

    for BG in $( seq 100 107 ); do
      printf "[${FG};${BG}m%-9s[m" " ${FG};${BG}m"
    done && echo
  done && echo

} # 4bit

# }}}

#==========================================================================
# {{{ 8-bit 256 Color
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#8-bit
#
# 256 ansi colors # Where N is a color code {0-256}
# 38;5;n  │Foreground - Replace ɴ with value from 256-color chart below
#         │for closest supported color (non-GUI TTY has only 16 colors!)
#--------------------------------------------------------------------------
# 48;5;n  │Background - Replace ɴ with value from 256-color chart below
#         │for closest supported color (non-GUI TTY has only 16 colors!)
# =========================================================================

function 8bit () {
  # https://unix.stackexchange.com/questions/9957/how-to-check-if-bash-can-print-colors
  local bg="\e[48;5;"
  local fg="\e[38;5;"
  local columns=6

  echo && echo ' Standard Colors'
  printf "  #  %-12s  %-12s\n" Foreground Background
  for n in {0..7} ; do
    printf " ${fg}%sm%2d  %-12s\e[0m  ${bg}%sm %-12s\e[0m\n" \
      "$n" "$n" "${fg}${n}m" "$n" "${bg}${n}m"
  done

  echo && echo ' High-Intensity Colors'
  printf "  #  %-12s  %-12s\n" Foreground Background
  for n in {8..15} ; do
    printf " ${fg}%sm%2d  %-12s\e[0m  ${bg}%sm %-12s\e[0m\n" \
      "$n" "$n" "${fg}${n}m" "$n" "${bg}${n}m"
  done

  echo && echo ' (extended) 216 Colors'
  for n in {16..231} ; do
    printf " ${bg}%sm %3d \e[0m" "$n" "$n"
    if (( ( n > 15 ) && (n-15) % $columns == 0 ))
        then printf "\n";
    fi
  done

  echo && echo ' GrayScale Colors'
  for n in {232..255} ; do
    printf " ${bg}%sm %3d \e[0m" "$n" "$n"
    if (( ( n > 15 ) && (n-15) % $columns == 0 ))
        then printf "\n";
    fi
  done
} # 8bit

# }}}

#==========================================================================
# {{{ 24-Bit True Color
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#24-bit
#
# 38;2;ʀ;ɢ;ʙ │Foreground - Replace ʀ, ɢ, and ʙ with RGB values from 0 to 255
#             for closest supported color (non-GUI TTY has only 16 colors!)
#--------------------------------------------------------------------------
# 48;2;ʀ;ɢ;ʙ │Background - Replace ʀ, ɢ, and ʙ with RGB values from 0 to 255
#             for closest supported color (non-GUI TTY has only 16 colors!)
# =========================================================================

# https://github.com/microsoft/terminal/issues/11057
export COLORTERM='24bit' # [24bit|truecolor|xterm-truecolor]

# Truecolor test
printf "\n\e[38;2;255;100;0mTRUECOLOR ${COLORTERM}\e[0m\n"

function 24bit () { # https://github.com/JohnMorales/dotfiles/blob/master/colors/24-bit-color.sh
  # https://unix.stackexchange.com/questions/404414/print-true-color-24-bit-test-pattern/404415#404415
  # Truecolor test
  printf "\n\e[38;2;255;100;0mTRUECOLOR ${COLORTERM}\e[0m\n"

  awk \
    -v term_cols="${width:-$( tput cols || echo 80 )}" \
    -v term_lines="${height:-$( tput lines || echo 1 )}" \
    'BEGIN{
      s="/\\";
      total_cols=term_cols*term_lines;
      for (colnum = 0; colnum<total_cols; colnum++) {
          r = 255-(colnum*255/total_cols);
          g = (colnum*510/total_cols);
          b = (colnum*255/total_cols);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum%2+1,1);
          if (colnum%term_cols==term_cols) printf "\n";
      }
      printf "\n";
    }' # BEGIN
} # 24bit

#  }}}

# {{{ Functions
# =========================================================================
function Colors () {
  echo && echo "Colors: $( tput colors )"
  printf "\n\$GREP_COLORS\n$GREP_COLORS\n"
  printf "\n\$LS_COLORS\n$LS_COLORS\n"
  printf "\ndircolors .dircolors\n$( dircolors "${DIRCOLORS}" )\n"
  printf "\ndircolors -b .dircolors\n$( dircolors -b "${DIRCOLORS}" )\n"
  echo && dircolors --print-ls-colors
  echo && Monochrome
  echo && 3bit
  echo && 4bit
  echo && 8bit
  echo && 24bit
  echo
} # Colors

# }}}

echo && echo " 👤 ${BOLD}$( whoami )${NC} 💜s devPunks ${REVERSE}${BOLD}${MAGENTA} .colors ${NC}"
echo

# vim: foldmethod=marker
