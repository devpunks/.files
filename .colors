#
#                       88
#                       888
#                       888
#       .d8888b .d88b.  888  .d88b.  888d888 .d8888b
#      d88P"   d88""88b 888 d88""88b 888P"   88K
#      888     888  888 888 888  888 888     "Y8888b.
#  d8b Y88b.   Y88..88P 888 Y88..88P 888          X88
#  Y8P  "Y8888P "Y88P"  888  "Y88P"  888      88888P'
#
#
# -------------------------------------------------------------------------
# Version: 0.1
# File: .colors
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Color configuration
# -------------------------------------------------------------------------
#
#   - Benchmark - https://imgur.com/xIyuaYt
#   - https://github.com/termstandard/colors
#   - https://ditig.com/256-colors-cheat-sheet
#   - https://stackoverflow.com/questions/4842424
#   - https://stackoverflow.com/questions/27159322
#   - https://unix.stackexchange.com/questions/274453
#   - https://tldp.org/HOWTO/Bash-Prompt-HOWTO/c583.html
#   - https://misc.flogisoft.com/bash/tip_colors_and_formatting
#   - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
#   - https://wikipedia.org/wiki/List_of_monochrome_and_RGB_color_formats
#   - escapes vs. tput - https://unix.stackexchange.com/questions/274453
#   - ANSI Escape Codes - https://en.m.wikipedia.org/wiki/ANSI_escape_code
#   - TERM COLOR DISCUSSION - https://news.ycombinator.com/item?id=30483899
#   - https://tuxthink.blogspot.com/2012/02/changing-font-and-background-of.html?m=1
#
# Note: Some control escape sequences, like \e for ESC, are not guaranteed
# to work in all languages and compilers. It is recommended to use
# the decimal 27, octal \033, or hex \x1B representation as escape code.
#
# =========================================================================
export CLICOLOR=1 # Defaults - https://stackoverflow.com/questions/41849875

# https://askubuntu.com/questions/1042234
# https://gnu.org/software/grep/manual/grep.html#index-GREP_005fCOLORS-environment-variable
export GREP_COLORS="
  :fn=1;4:se=1:ln=1;2;3:sl=2;3;9:cx=2;3;9:ms=0;1;4;7:mc=0;1;4;7:mt=0;1;4;7:bn=31:
"

# https://the.exa.website/docs/colour-themes
export EXA_COLORS="
  hd=1;4;38;5;13;48;5;8:sb=1;4;38;5;13:
  sn=1;4;38;5;13:da=3;38;5;13:uu=2;38;5;13:gd=1;4;38;5;2:
"

# https://gnu.org/software/coreutils/manual/html_node/dircolors-invocation.html
# [ -e "$HOME/.dircolors" ] && eval $( dircolors -b "$HOME/.dircolors" )
# LS_COLORS
[ -e $HOME/.dircolors ] && source $HOME/.dircolors

# =========================================================================
# {{{{ ANSI Escape Sequences
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#8-bit
# =========================================================================
# iCtrl-Key: 
# Octal: \033
# Unicode: \u001b
# Hexadecimal: \x1B
# Decimal: 27

# }}}

# =========================================================================
# {{{ IBM aixterm,16-Color Codes
#   The 16-color feature is borrowed from IBM aixterm,
#   which maps 16 codes each for foreground and background onto two ranges;
#   - https://en.m.wikipedia.org/wiki/Color_Graphics_Adapter
#   - https://en.m.wikipedia.org/wiki/ANSI_escape_code#8-bit
#   - https://retrocomputing.stackexchange.com/questions/20043
#   - https://wikipedia.org/wiki/List_of_monochrome_and_RGB_color_formats#4-bit_RGBI
# =========================================================================
# foreground onto 30-37, and 90-97 ----------------------------------------
# 30  = Black #000000
# 31  = Red
# 32  = Green
# 33  = Yellow
# 34  = Blue
# 35  = Purple
# 36  = Cyan
# 37  = Grey
#
# 90  = Dark Grey
# 91  = Light Red
# 92  = Light Green
# 93  = Light Yellow
# 94  = Light Blue
# 95  = Light Purple
# 96  = Turquoise
# 97  = Off White
#
# background onto 40-47, and 100-107
# 40  = Black Background
# 41  = Red Background
# 42  = Green Background
# 43  = Yellow Background
# 44  = Blue Background
# 45  = Purple Background
# 46  = Cyan Background
# 47  = Grey Background
#
# 100 = Dark Grey Background
# 101 = Light Red Background
# 102 = Light Green Background
# 103 = Yellow Background
# 104 = Light Blue Background
# 105 = Light Purple Background
# 106 = Turquoise Background
# 107 = Off White Background

function 16Colors () {
  T='gYw'   # The test text

  printf "\n "
  printf "%-7s%-7s%-7s%-7s%-7s%-7s%-7s%-7s" \
    '  40m' '  41m' '  42m' '  43m' '  44m' '  45m' '  46m' '  47m'
  printf "%-7s%-7s%-7s%-7s%-7s%-7s%-7s%-7s" \
    ' 100m' ' 101m' ' 102m' ' 103m' ' 104m' ' 105m' ' 106m' ' 107m'
  echo

  for FGs in '    m' '   1m' \
    '  30m' '1;30m' '  31m' '1;31m' '  32m' '1;32m' '  33m' '1;33m' \
    '  34m' '1;34m' '  35m' '1;35m' '  36m' '1;36m' '  37m' '1;37m' \
    '  90m' '1;90m' '  91m' '1;91m' '  92m' '1;92m' '  93m' '1;93m' \
    '  94m' '1;94m' '  95m' '1;95m' '  96m' '1;96m' '  97m' '1;97m';
      do FG=${FGs// /}
        for BG in \
          40m 41m 42m 43m 44m 45m 46m 47m \
          100m 101m 102m 103m 104m 105m 106m 107m;
            do printf "\033[$BG\033[$FG %5s \033[0m" $FG;
        done
      echo;
  done
} # 16Colors

# }}}
#
# =========================================================================
# {{{ tput 16-Color Codes
# =========================================================================
# resets ------------------------------------------------------------------
NC=$(tput sgr0) # No Color

# Format ------------------------------------------------------------------
DIM=$(tput dim)
BOLD=$(tput bold)
REVERSE=$(tput rev)
UNDERLINE=$(tput smul)

# Colors ------------------------------------------------------------------
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)

# (Light) Colors ----------------------------------------------------------
# https://retrocomputing.stackexchange.com/questions/20043
BLACK_LIGHT=$(tput setaf 8)
RED_LIGHT=$(tput setaf 9)
GREEN_LIGHT=$(tput setaf 10)
YELLOW_LIGHT=$(tput setaf 11)
BLUE_LIGHT=$(tput setaf 12)
PURPLE_LIGHT=$(tput setaf 13) # MAGENTA
CYAN_LIGHT=$(tput setaf 14)
WHITE_LIGHT=$(tput setaf 15)
MAGENTA=$PURPLE_LIGHT

# Backgrounds -------------------------------------------------------------
BG_BLACK=$(tput setab 0)
BG_RED=$(tput setab 1)
BG_GREEN=$(tput setab 2)
BG_YELLOW=$(tput setab 3)
BG_BLUE=$(tput setab 4)
BG_MAGENTA=$(tput setab 5)
BG_CYAN=$(tput setab 6)
BG_WHITE=$(tput setab 7)

# (Light) Backgrounds -----------------------------------------------------
BG_BLACK_LIGHT=$(tput setab 8)
BG_RED_LIGHT=$(tput setab 9)
BG_GREEN_LIGHT=$(tput setab 10)
BG_YELLOW_LIGHT=$(tput setab 11)
BG_BLUE_LIGHT=$(tput setab 12)
BG_MAGENTA_LIGHT=$(tput setab 13)
BG_CYAN_LIGHT=$(tput setab 14)
BG_WHITE_LIGHT=$(tput setab 15)

# }}}

# =========================================================================
# {{{ 256-Color Codes
#
# 256 ansi colors # Where N is a color code {0-256}
# 38;5;n  â”‚Foreground - Replace É´ with value from 256-color chart below
#         â”‚for closest supported color (non-GUI TTY has only 16 colors!)
# 48;5;n  â”‚Background - Replace É´ with value from 256-color chart below
#         â”‚for closest supported color (non-GUI TTY has only 16 colors!)
# =========================================================================
function 256Colors () {
  # https://unix.stackexchange.com/questions/9957/how-to-check-if-bash-can-print-colors
  local bg="\e[48;5;"
  local fg="\e[38;5;"
  local columns=6

  echo && echo ' Standard Colors'
  printf "  #  %-12s  %-12s\n" Foreground Background
  for n in {0..7} ; do
    printf " ${fg}%sm%2d  %-12s\e[0m  ${bg}%sm %-12s\e[0m\n" \
      "$n" "$n" "${fg}${n}m" "$n" "${bg}${n}m"
  done

  echo && echo ' High-Intensity Colors'
  printf "  #  %-12s  %-12s\n" Foreground Background
  for n in {8..15} ; do
    printf " ${fg}%sm%2d  %-12s\e[0m  ${bg}%sm %-12s\e[0m\n" \
      "$n" "$n" "${fg}${n}m" "$n" "${bg}${n}m"
  done

  echo && echo ' (extended) 216 Colors'
  for n in {16..231} ; do
    printf " ${bg}%sm %3d \e[0m" "$n" "$n"
    if (( ( n > 15 ) && (n-15) % $columns == 0 ))
        then printf "\n";
    fi
  done

  echo && echo ' GrayScale Colors'
  for n in {232..255} ; do
    printf " ${bg}%sm %3d \e[0m" "$n" "$n"
    if (( ( n > 15 ) && (n-15) % $columns == 0 ))
        then printf "\n";
    fi
  done
} # 256Colors

# }}}

# =========================================================================
# {{{ 24-Bit True Color
# 38;2;Ê€;É¢;Ê™ â”‚Foreground - Replace Ê€, É¢, and Ê™ with RGB values from 0 to 255
#             for closest supported color (non-GUI TTY has only 16 colors!)
# 48;2;Ê€;É¢;Ê™ â”‚Background - Replace Ê€, É¢, and Ê™ with RGB values from 0 to 255
#             for closest supported color (non-GUI TTY has only 16 colors!)
# =========================================================================
# https://github.com/microsoft/terminal/issues/11057
export COLORTERM='24bit' # [24bit|truecolor|xterm-truecolor]

# Truecolor test
printf "\n\x1b[38;2;255;100;0mTRUECOLOR ${COLORTERM}\x1b[0m\n"

function spectrum () { # https://github.com/JohnMorales/dotfiles/blob/master/colors/24-bit-color.sh
  # https://unix.stackexchange.com/questions/404414/print-true-color-24-bit-test-pattern/404415#404415
  # Truecolor test
  printf "\n\x1b[38;2;255;100;0mTRUECOLOR ${COLORTERM}\x1b[0m\n"

  awk \
    -v term_cols="${width:-$( tput cols || echo 80 )}" \
    -v term_lines="${height:-$( tput lines || echo 1 )}" \
    'BEGIN{
      s="/\\";
      total_cols=term_cols*term_lines;
      for (colnum = 0; colnum<total_cols; colnum++) {
          r = 255-(colnum*255/total_cols);
          g = (colnum*510/total_cols);
          b = (colnum*255/total_cols);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum%2+1,1);
          if (colnum%term_cols==term_cols) printf "\n";
      }
      printf "\n";
    }' # BEGIN
} # spectrum()

#  }}}

# {{{ Functions
# =========================================================================
function colors () {
  echo && echo "Colors: $(tput colors)"
  printf "\n\$LS_COLORS:\n$LS_COLORS\n"
  echo && dircolors --print-ls-colors
  echo && 16Colors
  echo && 256Colors
  echo && spectrum
  echo
} # colors()

# }}}

echo && echo "I ${REVERSE}${MAGENTA}love${NC} devPunks .colors"
echo

# vim: foldmethod=marker
