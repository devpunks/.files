#
#      d8b                            888
#      Y8P                            888
#                                     888
#      888 88888b.  88888b.  888  888 888888 888d888 .d8888b
#      888 888 "88b 888 "88b 888  888 888    888P"  d88P"
#      888 888  888 888  888 888  888 888    888    888
#  d8b 888 888  888 888 d88P Y88b 888 Y88b.  888    Y88b.
#  Y8P 888 888  888 88888P"   "Y88888  "Y888 888     "Y8888P
#                   888
#                   888
#                   888
#
# -------------------------------------------------------------------------
# Version: 0.1
# File: .inputrc
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Readline Run Commands on $SHELL prompt.
# -------------------------------------------------------------------------
#
# This file controls the behaviour of line input editing for
# programs that use the GNU Readline library.  Existing
# programs include FTP, Bash, and GDB.
#
# See to avoid potential conflicts:
#   - $HOME/.vimrc
#   - $HOME/.tmux.conf
#   - $HOME/.termux/termux.properties
# -------------------------------------------------------------------------
#   - https://ioflood.com/blog/bind-linux-command
#   - https://man7.org/linux/man-pages/man3/readline.3.html
#   - https://topbug.net/blog/2017/07/31/inputrc-for-humans
#   - https://geeksforgeeks.org/bind-command-in-linux-with-examples
#   - https://tldp.org/LDP/lfs/LFS-BOOK-6.1.1-HTML/chapter07/inputrc.html
#   - https://www.gnu.org/software/bash/manual/html_node/Sample-Init-File.html
#   - https://unix.stackexchange.com/questions/529385/i-key-is-not-functional-in-bash
#   - https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File-Syntax.html
#   - https://unix.stackexchange.com/questions/153357/inputrc-file-not-sourcing-correctly
#
# -------------------------------------------------------------------------
#
# The following are other escape sequences that can be configured in Iterm2 preferences.
#  ESC ^H   Delete previous word (backspace key) [n]
#  ESC DEL  Delete previous word (delete key) [n]
#  ESC SP   Set the mark (space key); see ^X^X and ^Y above
#  ESC .    Get the last (or [n]'th) word from previous line
#  ESC ?    Show possible completions; see below
#  ESC <    Move to start of history
#  ESC >    Move to end of history
#  ESC b    Move backward a word [n]
#  ESC d    Delete word under cursor [n]
#  ESC f    Move forward a word [n]
#  ESC l    Make word lowercase [n]
#  ESC u    Make word uppercase [n]
#  ESC y    Yank back last killed text
#  ESC v    Show library version
#  ESC w    Make area up to mark yankable
#  ESC nn   Set repeat count to the number nn
#  ESC C    Read from environment variable ``_C_'', where C is
#           an uppercase letter
#
# =========================================================================
# {{{ Bindings
# =========================================================================
# default readline configuration
$include /data/data/com.termux/files/usr/etc/inputrc

TAB:complete # default
"\C-x\C-r": re-read-init-file
"\C-l":clear-display # of all lines or `clear-screen` (scrolls below fold)

# some defaults / modifications for the emacs mode
# $if mode=emacs
  'RETURN': '\e\n'
  # "TAB":menu-complete

  "\C-a": beginning-of-line # Beginning of line
  "\C-e": end-of-line # End of line

  # Use Alt/Meta + Delete to delete the preceding word
  # "\e[3;3~": kill-word

  # allow Home/End keys
  "\e[1~": beginning-of-line
  "\e[2~": quoted-insert

  # allow Delete/Insert keys
  "\e[3~": delete-char
  "\e[4~": end-of-line

  "\e[8~": end-of-line

  # CTRL+left, CTRL+right fpr moving on the readline by character
  "\e[C": forward-char
  "\e[D": backward-char

  # ALT+left, ALT+right fpr moving on the readline by word
  '\e[5C': forward-word
  '\e[5D': backward-word
  '\e[1;5C': forward-word
  '\e[1;5D': backward-word

  # Use the text that has already been typed as the prefix for searching through
  # commands (i.e. more intelligent Up/Down behavior)
  "\e[A": history-search-backward
  "\e[B": history-search-forward

  # <CTRL>+<N> and <CTRL>+<P> search
  "\C-p": history-search-backward
  "\C-n": history-search-forward

# $endif

# }}}

# =========================================================================
# {{{ Options
# =========================================================================
# milliseconds to wait for key sequence
set keyseq-timeout 1000

# Allow UTF-8 input and output, instead of $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Use `LS_COLORS` & readline-colored-completion-prefix
set colored-completion-prefix on
set colored-stats on

# arrow keys
set enable-keypad on
# Show extra file information when completing, `ls -F` (e.g. *,/,@)
set visible-stats on
set history-size 1000
# audible (default), visible, none
set bell-style none
set bell-style visible
set blink-matching-paren on

# Immediately add a trailing slash when autocompleting symlinks & directories
set mark-directories on
set mark-symlinked-directories on

# }}}

# =========================================================================
# {{{ Completion
#   - http://superuser.com/questions/90196/case-insensitive-tab-completion-in-bash
# =========================================================================
# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.x
set skip-completed-text on
# Show control characters
set echo-control-characters on
# Disable <Tab>-Autocompletion paging.
set page-completions off
# <Tab>-Autocompletion for (.)dot files.
set match-hidden-files on
# All <Tab>-Autocompletion ambiguous matches.
set show-all-if-ambiguous on
# All <Tab>-Autocompletion list matches.
set show-all-if-unmodified on
# Case insensitive <Tab>-Autocomplete matches.
set completion-ignore-case on
# Maximum <Tab>-Autocompletion display results.
set completion-query-items 200
# <Tab>-Autocompletion results in single column.
set completion-display-width 3
# Common prefix of completion list.
set menu-complete-display-prefix on
# Alphabetical horizontal search of completions.
set print-completions-horizontally on
# Display ellipsis for long <Tab>-Autocompletion results.
set completion-prefix-display-length 5

# }}}

# =========================================================================
# {{{ Editing Mode
# - https://linuxgazette.net/137/anonymous.html
# - https://stackoverflow.com/questions/7888387
# - https://unix.stackexchange.com/questions/112406
# - https://baeldung.com/linux/console-cursor-features
# - https://catonmat.net/bash-vi-editing-mode-cheat-sheet
# - https://catonmat.net/ftp/bash-vi-editing-mode-cheat-sheet.txt
# =========================================================================
# set keymap vi
set keymap emacs
set editing-mode vi
#set editing-mode emacs

# PS1 prompt prefix
set show-mode-in-prompt on

# 0 Default
# 1 Block (blinking)
# 2 Block (steady)
# 3 Underline (blinking)
# 4 Underline (steady)
# 5 Bar (blinking) (xterm)
# 6 Bar (steady) (xterm)
set emacs-mode-string (emacs) \1\e[0m\e[5 q\2
set vi-ins-mode-string ‚Äâ‚û•„Äêvi  „Äë\1\e]12;red\x7\e[3 q\2
set vi-cmd-mode-string ‚Äâ‚û•„Äêviüîè„Äë\1\e]12;blue\x7\e[2 q\2

# }}}

# vim: foldmethod=marker
