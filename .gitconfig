#
#               d8b 888                              .d888 d8b
#               Y8P 888                             d88P"  Y8P
#                   888                             888
#       .d88b.  888 888888 .d8888b .d88b.  88888b.  888888 888  .d88b
#      d88P"88b 888 888   d88P"   d88""88b 888 "88b 888    888 d88P"88b
#      888  888 888 888   888     888  888 888  888 888    888 888  888
#  d8b Y88b 888 888 Y88b. Y88b.   Y88..88P 888  888 888    888 Y88b 888
#  Y8P  "Y88888 888  "Y888 "Y8888P "Y88P"  888  888 888    888  "Y88888
#           888                                                     888
#      Y8b d88P                                                Y8b d88P
#       "Y88P"                                                  "Y88P"
#
# -------------------------------------------------------------------------
# File: .gitconfig
# Help: man git-config
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Git configuration file
# -------------------------------------------------------------------------

# ------------------------------------------------------------------------
# {{{ Configuration
# ------------------------------------------------------------------------

[github]
  user = snuggs

[user]
  name = snuggs
  email = rashaunstovall@gmail.com

[author]
  name = snuggs
  email = rashaunstovall@gmail.com

[committer]
  name = snuggs
  email = rashaunstovall@gmail.com

[credential]
  helper = cache

[init]
  defaultBranch = main

[rerere]
  enabled = 1

[log]
  # [human|relative|local|default|iso|iso-strict|rfc|short|raw]
  # [human-local|relative-local|default-local|iso-local|iso-strict-local|rfc-local|short-local|raw-local]
  # https://stackoverflow.com/questions/7853332
  date = default-local

[push]
  default = simple

[apply]
  whitespace = warn

[branch]
  autosetuprebase = always

# prefab = cherry -v origin/fabrication
[format] # https://git-scm.com/docs/pretty-formats
  # https://stackoverflow.com/questions/21830810/how-to-make-git-log-cut-long-comments
  pretty = %C(reverse) üóì %<(18,trunc)%cd %C(reverse italic) %>(11,mtrunc)%cr %C(reset)‚ñ∫ %C(bold)üë§ %aN üåµ%C(italic)%d %C(reset)üÜî %h %C(bold)üìù %<(50,trunc)%s

[diff]
  submodule = log

[merge]
  tool = vimdiff

[mergetool]
  tool = vimdiff

[core]
  autocrlf = input
  editor=/usr/bin/vim
  excludesfile = ~/.gitignore
  whitespace = trailing-space,space-before-tab,tab-in-indent,fix,-indent-with-non-tab,-cr-at-eol

[alias]
  st = status -sb
  ci = commit
  co = checkout
  graph = log --graph --oneline --decorate=short --branches='*'
  br = branch
  df = diff --color-words='[^[:space:]]'
  sh = show --color-words='[^[:space:]]'
  lg = log -p
  serve = !git daemon --reuseaddr --verbose --base-path=. --export-all ./.git
  pend = cherry -v origin/master

# }}}

# ------------------------------------------------------------------------
# {{{ ANSI 256 COLOURS
#
#  The value for these configuration variables is a list of colors
#  (at most two) and attributes separated by spaces. The colors accepted are:
#  normal, black, red, green, yellow, blue, magenta, cyan, white, and default;
#
#  All the basic colors except `normal` and `default` have a `bright` variant
#  that can be specified by prefixing the color with `bright` (i.e. brightred)
#
#  The attributes are:
#    bold, dim, ul, blink and reverse.
#
# ------------------------------------------------------------------------

[color]

  #  control the use of color per command family. Its scope will expand as more commands learn
  #  configuration to set a default for the --color option. Set it to always if you want all output
  #  not intended for machine consumption to use color, to true or auto if you want such output to use
  #  color when written to the terminal, or to false or never if you prefer git commands not to use
  #  color unless enabled explicitly with some other configuration or the --color option.

  # color.pager
  #  A boolean to enable/disable colored output when the pager is in use (default is true).
  pager = true

  # color.ui
  #  This variable determines the default value for variables such as color.diff and color.grep that
  ui = auto

  # color.diff
  #  Whether to use ANSI escape sequences to add color to patches. If this is set to always, git-
  #  diff(1), git-log(1), and git-show(1) will use color for all patches. If it is set to true or
  #  auto, those commands will only use color when output is to the terminal. Defaults to false.
  #  This does not affect git-format-patch(1) nor the git-diff-* plumbing commands. Can be overridden
  #  on the command line with the --color[=<when>] option.
  diff = always
  grep = always

  # color.status
  #  A boolean to enable/disable color in the output of git-status(1). May be set to always, false (or
  #  never) or auto (or true), in which case colors are used only when the output is to a terminal.
  #  Defaults to false.
  status = always

  # color.branch
  #  A boolean to enable/disable color in the output of git-branch(1).
  #  May be set to always, false (or never) or auto (or true),
  #  in which case colors are used only when the output is to a terminal.
  #
  # Defaults to false.
  branch = always
  decorate = always

  # color.showbranch
  #  A boolean to enable/disable color in the output of git-show-branch(1). May be set to always,
  #  false (or never) or auto (or true), in which case colors are used only when the output is to a
  #  terminal. Defaults to false.
  showbranch = always

  # color.interactive
  #   When set to always, always use colors for interactive prompts and displays
  #   (such as those used by "git-add --interactive"). When false (or never), never.
  #   When set to true or auto, use colors only when the output is to the terminal.
  #
  #   Defaults to false.
  interactive = always

#  The first color given is the foreground; the second is the background.
#  The position of the attribute, if any, doesn't matter.

# color.branch.<slot>
#  Use customized color for branch coloration.
#  <slot> is one of current (the current branch), local (a local branch),
#  remote (a remote-tracking branch in refs/remotes/), plain (other refs).
[color "branch"]
  plain = bold
  local = default
  remote = dim italic
  current = ul bold reverse

[color "showbranch"]

# color.diff.<slot>
#  Use customized color for diff colorization.  <slot> specifies which part of the patch to use the
#  specified color, and is one of plain (context text), meta (metainformation), frag (hunk header),
#  func (function in hunk header), old (removed lines), new (added lines), commit (commit headers),
#  or whitespace (highlighting whitespace errors). The values of these variables may be specified as
#  in color.branch.<slot>.
[color "diff"]
  old = bold red # deletions
  new = bold green # additions
  plain = italic # unaltered
  meta = default # headers
  frag = bold reverse # i.e. @@ -148,10 +148,10 @@
  whitespace = reverse red
  commit = reverse bold default

# color.status.<slot>
#     Use customized color for status colorization.  <slot> is one of header (the header text of the
#     status message), added or updated (files which are added but not committed), changed (files which
#     are changed but not added in the index), untracked (files which are not tracked by git), branch
#     (the current branch), or nobranch (the color the no branch warning is shown in, defaulting to
#     red). The values of these variables may be specified as in color.branch.<slot>.
[color "status"]
  added = bold green
  deleted = red
  changed = bold yellow
  untracked = dim italic
  nobranch = reverse red
  header = default
  branch = bold reverse

# color.interactive.<slot>
#  Use customized color for git add --interactive output.  <slot> may be prompt, header, help or
#  error, for four distinct types of normal output from interactive commands. The values of these
#  variables may be specified as in color.branch.<slot>.
[color "interactive"]
  error = reverse bold red
  header = reverse red
  help = bold italic normal
  prompt = reverse bold normal

# color.decorate.<slot>
#  Use customized color for git log --decorate output.  <slot> is one of branch, remoteBranch, tag,
#  stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively.
[color "decorate"]
  branch = bold 132
  remoteBranch = dim italic 145
  tag = reverse 13

[color "remote"]
  hint = italic cyan
  error = reverse blue
  warning = reverse yellow
  success = reverse magenta

# }}}

# vim: foldmethod=marker
