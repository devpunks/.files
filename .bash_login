#!/usr/bin/env bash
#
#     888                        888               888                   d8b
#     888                        888               888                   Y8P
#     888                        888               888
#     88888b.   8888b.  .d8888b  88888b.           888  .d88b.   .d88b.  888 88888b.
#     888 "88b     "88b 88K      888 "88b          888 d88""88b d88P"88b 888 888 "88b
#     888  888 .d888888 "Y8888b. 888  888          888 888  888 888  888 888 888  888
# d8b 888 d88P 888  888      X88 888  888          888 Y88..88P Y88b 888 888 888  888
# Y8P 88888P"  "Y888888  88888P' 888  888 88888888 888  "Y88P"   "Y88888 888 888  888
#                                                                   888
#                                                               Y8b d88P
#                                                               "Y88P"
#
# -------------------------------------------------------------------------
# Version: 0.1
# File: .bash_login
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Bourne Again SHell Run Commands for login $SHELL.
# -------------------------------------------------------------------------
#
# INVOCATION
#   - https://unix.stackexchange.com/q/43953
#   - https://gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html

# [ -r $HOME/.bashrc ] && source $HOME/.bashrc

# ALIAS WITH PARAMETER - https://stackoverflow.com/a/7131683
# Paste - https://geeksforgeeks.org/paste-command-in-linux-with-examples
# Hyperlinks - https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda

# =========================================================================
# {{{ Bindings # see ~/.inputrc
# =========================================================================

# https://computerhope.com/unix/bash/bind.htm
alias shortcuts='{ clear
  printf "\n Bindings:\n"
    command bind -p
  printf "\n\n Macros:\n"
    command bind -s
  printf "\n\n Variables:\n"
    command bind -v
}' # shortcuts

# }}}

# =========================================================================
# {{{ Aliases
# =========================================================================
alias tldr='open https://tldr.inbrowser.app'

# https://man7.org/linux/man-pages/man1/lscpu.1.html
alias cpu='clear ;
  echo ; command lscpu
  echo ; lscpu --caches --output-all
  echo "\n\nCPU count: ` nproc `\n\n"
  echo ; command lscpu --extended --all
' # cpu

alias etc='tree "$PREFIX/etc"'
alias share='tree "$PREFIX/share"'

alias bell='echo "\a"'
alias shell='chsh' # https://wiki.termux.com/wiki/Shells
alias view='command view -n -M -R'

# https://linux.die.net/man/1/pv
# https://reddit.com/r/programming/comments/7u8f2/a_unix_utility_you_should_know_about_pipe_viewer/
alias progress='pv --progress --eta --timer'

# https://github.com/powerline/fonts
alias fonts='$HOME/.local/fonts/fonttable ; echo "\nSee ~/.local/fonts"'

# https://stackoverflow.com/q/42004870
# https://en.m.wikipedia.org/wiki/Random_number_generation
alias rand='echo $RANDOM' # 16-bit ( deterministic 0-32767 )
# https://stackoverflow.com/q/65523749
alias random='echo $SRANDOM' # 32-bit ( non-deterministic )
# - https://baeldung.com/linux/bash-generate-uuid
# - https://man7.org/linux/man-pages/man1/uuidgen.1.html
# - https://stackoverflow.com/q/20342058/which-uuid-version-to-use
alias uuid='uuidgen --random' # cat /proc/sys/kernel/random/uuid

# for escape characters - https://tldp.org/HOWTO/Bash-Prompt-HOWTO/c583.html
alias echo='command echo -e'

# https://linux.die.net/man/1/expect
# https://stackoverflow.com/q/33304242
# https://digitalocean.com/community/tutorials/expect-script-ssh-example-tutorial
alias expect='pkg list-all expect'

alias ..='command cd ..'
alias pop='command popd'
alias push='command pushd'
alias dirs='command dirs -p'
alias most='command most +u -s -t2'
alias mount='command mount | column -t'
alias path='echo "\\nPATHS: \\n ${PATH//:/\\n} \\n"'
alias libpath='echo "\\nLIBPATHS: \\n ${LD_LIBRARY_PATH//:/\\n} \\n"'
alias mkdir='command mkdir --verbose --parents --mode u=rwx,g=rx,o=' # 750
alias diff='command diff --color=auto' # - https://geeksforgeeks.org/diff-command-linux-examples

# https://stackoverflow.com/q/4113986
alias pipe='command mkfifo' # https://en.m.wikipedia.org/wiki/Named_pipe
alias ln='command ln --verbose --interactive --symbolic'
alias cp='command cp --verbose --interactive --no-clobber --recursive'
alias mv='command mv --verbose --interactive --no-clobber --strip-trailing-slashes'
alias cut='command cut --only-delimited --delimiter="," --fields'
alias copy='echo TODO: implement copy command for multiple destination types'
alias zipper='man paste ; command paste' # https://geeksforgeeks.org/paste-command-in-linux-with-examples

alias fc="command fc -e $EDITOR -s" # https://geeksforgeeks.org/fc-command-linux-examples
alias rm='echo 🛑 rm is disabled, use delete, or destroy' # - https://en.m.wikipedia.org/wiki/Rm_(Unix)
alias delete='command rm --verbose --preserve-root --recursive --dir --interactive=once'

# https://unix.stackexchange.com/q/90653
alias sed='sed --regexp-extended'
# https://tecmint.com/35-practical-examples-of-linux-find-command
alias find='command find . -type f -iname'
# - https://stackoverflow.com/q/1987926
alias grep="LC_ALL=C command grep $GREP_OPTIONS"

# https://unix.stackexchange.com/q/344213
# https://askubuntu.com/q/103913/difference-between-dir-and-ls-terminal-commands
# https://unix.stackexchange.com/q/50377/whats-the-difference-between-dir-and-ls
alias ls="command ls $LS_OPTIONS -l"
alias vdir="command vdir $LS_OPTIONS -l"
alias branch='clear ; tree -d -L 4'
# https://github.com/eza-community/eza
alias list="command eza --level=2 --color=auto --classify=auto \
  --all --links --grid --icons --long --header --no-user --octal-permissions\
  --group-directories-first --total-size --git --git-repos --git-ignore --ignore-glob '.git'"
alias tree='command tree -ahACDF --du -L 2 --dirsfirst --gitignore -I ".git"'

alias header='curl --head'
alias curl='command curl --verbose'

alias ping='command ping -c 5'
alias cookies='header --cookie-jar ./.cookies'
alias wait='command wait' # https://baeldung.com/linux/wait-command
# https://tecmint.com/fswatch-monitors-files-and-directory-changes-modifications-in-linux/
alias watch='command watch --no-wrap --interval 30 --differences=permanent --exec'
alias wget='command wget --continue --no-hsts' # resume downloads & prevent writing HSTs

alias which='command type -a'
alias when='echo TODO: \`when\` implementation'
alias why='echo TODO: \`why\` implementation'
alias what='command man whatis ; command whatis'
alias who='command id \
  ; command id | tr "[\w|\,] " "\n" | tr "groups=" "\n\nGroups:" '

# - https://man7.org/linux/man-pages/man1/apropos.1.html
# - https://man7.org/linux/man-pages/man1/whereis.1.html
function where () {
  local -r term="${1}"

  command man whereis
  command whereis "$term"
  command apropos "$term"
} # where

# https://en.m.wikipedia.org/wiki/ISO_8601
# https://gnu.org/software/coreutils/manual/html_node/Time-conversion-specifiers.html
# https://gnu.org/software/coreutils/manual/html_node/Date-conversion-specifiers.html
# https://unix.stackexchange.com/q/625474/what-does-the-plus-symbol-in-date-command-refer-to
alias now='command date +"%FT%TZ"'
alias date='command date --utc --iso-8601="ns"'
alias calendar='command cal -1 --iso --color=auto'
alias day='echo ; command date +"%A 🗓 %Y-%m-%d" ; echo ; calendar'
# https://chrony-project.org
function clock () {
  local -r LOG="${HOME}/chrony.log"
  local -r CONFIG="${HOME}/chrony.conf"

  man chronyd
  man chronyc

  chronyd -d -f "$CONFIG" -l "$LOG"

  chronyc
  now # time
} # clock

monitor () {
  htop && ps
  printf "\n %s \n" "$( uptime )"
} # monitor

# - https://en.m.wikipedia.org/wiki/Device_file
function devices () { clear
  local -r location="$1"

  ( exist "$location" && df -a -h "$location" && df -a -i "$location" ) \
    || ( df -a -h && df -a -i )
} # devices

# https://gnu.org/software/coreutils/manual/html_node/nohup-invocation.html
# https://digitalocean.com/community/tutorials/nohup-command-in-linux
function hold () {
  command nohup --version # https://en.m.wikipedia.org/wiki/Nohup
  command nohup "$1"

  # Redirect to stderror AND file
  # tee - https://en.m.wikipedia.org/wiki/Tee_(command)
  # nohup ./foo.sh > out.txt >2&1
} # hold

function recycle () { clear
  echo ♻ ♲ ♳ ♴ ♵ ♶ ♷ ♸ ♹ ♺ ♼ ♽

  delete "${TMPDIR}/**/*"

  trash "$@"
} # recycle

# - https://en.m.wikipedia.org/wiki/Shred_(Unix)
# - https://computerhope.com/unix/shred.htm
# - https://geeksforgeeks.org/shred-command-in-linux-with-examples
function destroy () {
  for file in "$@"; do
    exist "$file" \
      && shred --force --zero --iterations=5 --remove "$file" \
      && echo 💣 destroyed 💥 "$file"
  done # for $file
} # destroy

# - https://manpages.ubuntu.com/manpages/xenial/man1/trash.1.html
# - (M) trash - https://github.com/termux/termux-packages/issues/5488
# - https://askubuntu.com/q/468721/how-can-i-empty-the-trash-using-terminal
function trash () {
  for file in "$@"; do
    exist "$file" \
      && mv "$file" "$TMPDIR" \
      && echo 🚮 Sent to trash 🗑 "$file"
  done # for $file

  tree -L 1 "$TMPDIR"
} # trash

# https://bash.cyberciti.biz/guide/Reset_command
# https://bash.cyberciti.biz/guide/Console_management
# https://invisible-island.net/ncurses/man/tput.1.html#h2-HISTORY
# https://invisible-island.net/ncurses/man/tset.1.html#h2-HISTORY
# https://unix.stackexchange.com/q/335648/why-does-the-reset-command-include-a-delay
# https://unix.stackexchange.com/q/546918/any-reason-to-not-alias-reset-tput-reset-in-bashrc
# https://stackoverflow.com/q/2518127/how-to-reload-bashrc-settings-without-logging-out-and-back-in-again
function reload () { clear
  termux-reload-settings
  [ "$TMUX" ] && tmux source "${HOME}/.tmux.conf"

  source "${HOME}/.bashrc" \
    && source "${HOME}/.bash_login"

  # reset  slowwwwwwwwwwwwwwww
  tput reset
  tput sgro # reset attributes
  stty sane
  setterm --initialize
  setterm --resize
  tput cup 0 0

  environment
} # reload

function environment () {
  echo ; echo '👇Kernel👇'
  command sysctl --all

  # https://gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html
  echo ; echo '👇Commands👇'
  compgen -c | sort | column --fillrows
  echo ; echo '👇Shell Variables👇'
  compgen -v | sort | column --fillrows
  echo ; echo '👇Exports👇'
  compgen -e | sort | column --fillrows
  echo ; echo '👇Built-ins👇'
  # https://gnu.org/software/bash/manual/html_node/Bash-Builtins.html#index-enable
  enable -p | column --fillrows
  echo ; echo 👇Functions👇
  compgen -A function | sort | column --fillrows
  echo ; echo '👇Aliases👇'
  compgen -a | sort | column --fillrows # alias -p
  echo ; echo '👇Reserved Words👇'
  compgen -k | sort | column --fillrows
  echo ; echo '👇Env Vars👇'
  # https://unix.stackexchange.com/q/123473
  env | sort | column --fillrows # printenv | export -p

  echo ; echo '👇Shell Vars👇'
  # TODO: refactor set (fix POSIX bug)
  #  - https://gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
    # ( set +o posix; set; set +o posix ) | sort | column --fillrows
  set
  echo ; echo '👇Declarations👇'
  declare -p | command cut --delimiter=' ' --fields 3 | sort | column --fillrows

  printf "\n\$BASH: %s\n Options: %s\n" "$BASH" "$BASHOPTS"
  printf "\n\$SHELL: %s\n Options: %s\n" "$SHELL" "$SHELLOPTS"
  printf "\nPATH: %s\n" "$PATH"
  printf "\nTTY: %s\n Lines: %s x Columns: %s\n" \
    "$( tty )" "$LINES" "$COLUMNS"

  echo ; termux-info
  [ "$TMUX" ] && echo && tmux -V
} # environment

# SIGWINCH - https://rkoucha.fr/tech_corner/sigwinch.html
# TIC - https://ibm.com/docs/ro/aix/7.1?topic=t-tic-command
# TOE - https://invisible-island.net/ncurses/man/toe.1m.html
# TERMINFO - https://bbs.archlinux.org/viewtopic.php?id=163103
# TERMINAL GREETER - https://yalneb.blogspot.com/2019/04/bash-terminal-greeter.html
function term () { clear
  echo "\e[7m" # REVERSE
  echo ; echo "TTY: $(tty)"
  printf "\n\nSize \e[3mROWS\e[23mX\e[3mCOLUMNS\e[23m: %s\n" \
    "$(stty size | tr ' ' 'x')"
  echo ; [ -n "$TMUX" ] && echo "TMUX INFO:" && tmux info
  echo ; echo "TERM=$TERM $( tput -V )" && toe
  echo ; echo "stty: $(stty -g)" && stty -a

  # https://manpages.ubuntu.com/manpages/bionic/man1/infocmp.1.html
  echo ; echo TERMINFO PATH: ; infocmp -1 -D # terminfo location
  echo ; echo TERMINFO CAP NAMES: ; infocmp -1 -IT # terminfo description
  echo ; echo TERMINFO CAPABILITIES: ; infocmp -1 -CrT # terminfo capabilities
  echo ; echo TERMINFO LONG NAMES: ; infocmp -1 -LT # terminfo long names

  echo "\e[m" # DEFAULT

  [ -e "${HOME}/.inputrc" ] \
    && { shortcuts ; echo "\e[3m( see ~/.inputrc )\e[23m" ; }

  [[ function == $( type -t Colors ) ]] \
    && echo && Colors
} # term

# ----------------------
# Ruby
# ----------------------
alias be='bundle exec'

# ----------------------
# Eliza (LLM) - https://web.njit.edu/~ronkowit/eliza.html
# ----------------------
alias eliza='why ; echo TODO: ELIZA implementation' # https://en.m.wikipedia.org/wiki/ELIZA

# }}}

# =========================================================================
# {{{ Git Aliases
# =========================================================================
alias ga='git add -p'
alias gb='git -P branch -a'
alias gc='git commit --message '
alias gd='git diff'
alias gg='git grep --break --heading'
alias gl='git log --reverse --since=1.week --all'
alias gll='git log -L'
alias gp='git push ; git push --tags'
alias gr='git rebase -i'
alias gs='clear ; echo ; git status --column --verbose ; echo'
alias gt='git tag -a'
alias g#='
  # https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
  # https://stackoverflow.com/q/2183900/how-do-i-prevent-git-diff-from-using-a-pager
  # gl --since="1 day ago"
  #   printf "\n Total:%d" $( gl --since=1.day | wc -l )
  GIT_PAGER=cat \
    gl --since="Today 04:00"; echo
    printf "\n Total:%d\n\n" $( gl --since="Today 04:00" | wc -l )
' # g#

# Linus - https://gcc.gnu.org/legacy-ml/gcc/2007-12/msg00165.html
function git_clean () { clear
  # https://stackoverflow.com/q/5613345/how-to-shrink-the-git-folder
  # https://stackoverflow.com/q/3119850/is-there-a-way-to-reduce-the-size-of-the-git-folder
  # https://web.archive.org/web/20190207210108
  # http://stevelorek.com/how-to-shrink-a-git-repository.html
  # TODO: Check if ran with git gc
  git repack -a -d --depth=250 --window=250
  git reflog expire --expire=now --all
  time git gc --aggressive --prune=now

  git remote prune origin
} # git_clean

# }}}

# =========================================================================
# {{{ Jobs
# =========================================================================

alias ps='command ps auxf' # https://tecmint.com/ps-command-examples-for-linux-process-monitoring/
# https://stackoverflow.com/q/35026395/bash-what-is-a-jobspec
alias jobs='command jobs -l' # termux-job-scheduler - https://github.com/termux/termux-api/issues/282

function work () {
  echo working
} # jobs

# }}}

# =========================================================================
# {{{ iNodes
#   - https://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/ExtendedAttributes.html
# =========================================================================

# https://man7.org/linux/man-pages/man1/file.1.html
alias file='command file --mime --mime-type --extension'
function exist () {
  local -r location="$1"

  test -e "$location" \
    || ( echo "No such file, or directory: $location" && return 2 )
} # exist

# https://howtogeek.com/451022/how-to-use-the-stat-command-on-linux
function about () {
  local location="${1}"

  exist "$location" || return $?

  echo ; df -a -h "$@"
  echo ; df -a -i "$@"
  echo ; stat "$@"
} # about

function inspect () { clear
  local -r file=$( realpath "$1" )

  exist "$file" || return $?

  printf "\n\nInspecing: %s" "$file"
  printf '\nTODO: implement  inspect ()'
} # inspect

function probe () { clear
  local -r location=$( realpath "${1:-.}" )

  printf "\n location 👉 %s \n" "$location"

  # - https://dev.yorhel.nl/ncdu/man
  [ -d "$location" ] && \
    ncdu -2 -r -e --color=dark-bg \
      --exclude={.gnupg,.ssh} \
    -- "$location"

  weigh "$location"
} # probe

# https://man7.org/linux/man-pages/man1/free.1.html
alias free='command free --mega --human --wide'
function weigh () {
  local -r location=$( realpath "${1:-.}" )

  exist "$location" || return $?

  # https://geeksforgeeks.org/du-command-linux
  # https://redhat.com/sysadmin/du-command-options
  du --summarize --total --time --human-readable \
      --exclude={.gnupg,.ssh} \
    -- "$location"

  # https://redhat.com/sysadmin/linux-df-command
  # https://geeksforgeeks.org/df-command-in-linux-with-examples
  echo ; df -a -h "$location"
  echo ; df -a -i "$location"
} # weigh

function search () { clear
  local -r term="$1"
  local -r location=$( realpath "${2:-.}" )

  echo ; echo Search Term 🔎 "$term"
  echo Location 👉 "$location"

  echo ; echo Greping...
  grep --devices=skip "$term" "$location"

  echo ; echo Finding...
  command find "$location" -type f -iname "*$term*"

  echo ; echo DONE!
} # search

# Syntax checkers
#   - https://github.com/vim-syntastic/syntastic/tree/master/syntax_checkers
function check () {
  echo Checking "$*"

  for script in "$@"; do
    echo ; echo " 🎯 $( realpath "$script" )"
    exist "$( realpath "$script" )" || continue

    case "$script" in
      *.html )
        command tidy "$script" ;;
      *nginx.conf )
        command nginx -T -c "$( realpath "$script" )" ;;
      *lighttpd.conf )
        command lighttpd -t -f "$( realpath "$script" )" ;;
      *httpd.conf )
        command apachectl configtest -f "$( realpath "$script" )" ;;
      .bash* | *.sh )
        command shellcheck --format=tty "$( realpath "$script" )" ;;
      * )
        echo "  🛑 Cannot check ${script}"
    esac # $script
  done # for $script
} # check

# }}}

# =========================================================================
# {{{ Security
#   eXtended Attr(ibutes)
#     - https://linuxexam.net/2019/11/linux-tools-getfattrsetfattr.html
#   ACLs (Access Control List)
#     - https://unix.stackexchange.com/q/364517/difference-between-chmod-vs-acl
#     - https://doc.opensuse.org/documentation/leap/security/html/book-security/cha-security-acls.html
#     - https://reddit.com/r/linux/comments/170crnt/acl_101_a_visual_guide_to_accesscontrol_lists
#     - https://usenix.org/legacy/publications/library/proceedings/usenix03/tech/freenix03/full_papers/gruenbacher/gruenbacher_html/main.html
# =========================================================================
#https://man7.org/linux/man-pages/man1/passwd.1.html
alias password='clear ; man -k passwd ; echo ; command passwd'

# https://pypi.org/project/tsu
# http://androidcentral.com/root
alias su='command su ; tsu '

# - https://en.m.wikipedia.org/wiki/Chown
# - https://man7.org/linux/man-pages/man1/chown.1p.html
alias chown='command chown --verbose --preserve-root --recursive'

# - https://en.m.wikipedia.org/wiki/Chgrp
# - https://man7.org/linux/man-pages/man1/chgrp.1p.html
alias chgrp='command chgrp --verbose --preserve-root --recursive'

# - https://askubuntu.com/q/918379
# - https://en.m.wikipedia.org/wiki/Chmod
# - https://gnu.org/software/coreutils/chmod
# - https://man7.org/linux/man-pages/man1/chmod.1p.html
# - https://marksei.com/linux-permissions-chown-chgrp-and-chmod
alias chmod='command chmod --verbose --preserve-root --recursive'

# https://gnupg.org
# https://bashupload.com/how_to_encrypt_files
function encrypt () {
  man gpg
} # encrypt

function decrypt () {
  man gpg
} # decrypt

function lock () {
  : lock
} # lock

function unlock () {
  : unlock
} # unlock

# - https://wiki.archlinux.org/title/Limits.conf
# - https://namehero.com/blog/managing-linux-system-resources-with-the-ulimit-command
function unlimit () { clear
  ulimit --help

  echo ; ulimit -a
  echo TODO: 'unlimit' Implementation
} # unlimit

function limit () { clear
  ulimit --help

  echo ; echo Hard Limits:
  ulimit -Ha

  echo ; echo Soft Limits:
  ulimit -Sa

  echo TODO: 'limit' Implementation
} # limit

# https://askubuntu.com/q/29589/chmod-ux-versus-chmod-x#1075089
# https://superuser.com/q/168578/why-must-a-folder-be-executable
# https://askubuntu.com/q/44542/what-is-umask-and-how-does-it-work
# https://stackoverflow.com/q/12445527/set-different-umask-for-files-and-folders
# https://askubuntu.com/q/932713/what-is-the-difference-between-chmod-x-and-chmod-755
# https://theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/how-permissions-chmod-with-numbers-command-explained-777-rwx-unix
function permit () { clear
  printf "\numask : %s %s\n\n" "$( umask )" "$( umask -S )"

  local -r location="$1"

  exist "$location" || return $?

  # chmod u+x g+x o+x a+x
  # r(4) - Read (R - disabled)
  # w(2) - Write (W - disabled)
  # x(1) - Execute (X - disabled)
  # u=user,g=group,o=others,a=all
  # [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+.
  chmod u=rwx,g=rx,o=rx "$( realpath "$location" )" # 755

  ls "$location"
  about "$location"
} # permit

function restrict () { clear
  printf "\numask : %s %s\n\n" "$( umask )" "$( umask -S )"

  local -r location="$1"

  exist "$location" || return $?

  # chmod u+x g+x o+x a+x
  # r(4) - Read (R - disabled)
  # w(2) - Write (W - disabled)
  # x(1) - Execute (X - disabled)
  # u=user,g=group,o=others,a=all
  # [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+.
  chmod u=r,g=,o= "$( realpath "$location" )" # 600

  ls "$location"
  about "$location"
} # restrict

function authenticate () { clear
  # https://stackoverflow.com/q/25969196
  local -r certificate='--cert' # (key|cert)
  local -r credentials="${1:-:}" # default to `:`
  local -r auth='--basic' # (anyauth|digest|basic)
  local -r user="--user ${credentials}" # login credentials
  local -r domain="localhost" # localhost default domain
  local -r port="${PORT:-80}" # PORT env variable default
  local -r uri="${domain}:${port}" # URI default to domain and port

  echo uri: "$uri"
  echo auth: $auth
  echo user: "$user"
  echo cert: "$certificate"

  curl --head "$auth" "$cert" "$user" "$uri"
} # authenticate

# }}}

# =========================================================================
# {{{ Services
#   - https://wiki.termux.com/wiki/Termux-services
# =========================================================================
function boot () { clear
  local -r profile="${PREFIX}/etc/profile.d"

  echo Booting Kernel...
  man sysctl
  man sysctl.conf

  command sysctl --version
  command sysctl --system
  command sysctl --all

  echo Loading Profile...
  tree "$profile"
  echo "${profile}/start-services.sh"
  cat "${profile}/start-services.sh"
} # boot

function services () {
  local -r service="${1}"
  local -r filter="runsv $service"
  local -r init="${PREFIX}/etc/init.d/"
  local -r running="${PREFIX}/var/run/"
  local -r services="${PREFIX}/var/service/"

  [ "$service" ] || htop --tree --filter="$filter"

  ps | command grep "$filter"

  echo ; tree -L 4 "${init}${service}"
  echo ; tree -L 4 "${running}${service}"
  echo ; tree -L 4 "${services}${service}"
} # services

function run () {
  local -r -i seconds=5
  local -r services="${*}"
  local -r path="${SVDIR:-$PREFIX/var/service}"

# man sv         # Signals
# man runsv      # Run service
# man runsvdir   # Run service dir
# man runsvchdir # (Change to) service dir

  # [ -d ${PREFIX}/etc/init.d ] \
  #   || mkdir -p ${PREFIX}/etc/init.d
  # https://unix.stackexchange.com/q/20357
  echo ; tree "$PREFIX/etc/init.d"
  echo "$path" ; echo

  [ -z "$services" ] \
    && { service-daemon start ; return ; }


  for service in $services ; do
    echo "Wait time: $seconds"
    echo "checking $service"
    sv -v check "$service" # check

    echo "Process routine for $service"
    ( [[ "$service" == ./* ]] && runsv "$service" >/dev/null & ) \
      || ( runsv "${path}/${service}" >/dev/null & )

#     && { runsv "$( realpath "$service" )" 2>&1 & ; sv -v -w $seconds status $( realpath "$service" ) ; } \
#     || { runsv "${path}/${service}" 2>&1 & ; sv -v -w $seconds status "${path}/${service}" ; }

    sv -v -w $seconds status "$service"
    sv -v -w $seconds status "${service}/log"
  done # for $service

  services "$@"
} # run

# See bin/service-daemon
function start () { clear
  local -r nice='-10'
  local -r mask='077' # u=rwx,g=r,o=
  local -r service="$( realpath "$1" )"
  local -r name="${service##*/}" # minus path

  local -r pidfile="${service}/${name}.pid"
  local -r daemon="${PREFIX}/bin/runsv" # runsvdir for directories

  man start-stop-daemon
  mkdir -p "$service" # ensure service directory exists

  echo NAME: "$name"
  echo DAEMON: "$daemon"
  echo SERVICE: "$service"
  echo PIDFILE: "$pidfile"

  # >/dev/null 2>&1 & # --background - https://stackoverflow.com/q/63274948
  command start-stop-daemon --start --name "$name" \
    --chdir "$service" --nicelevel "$nice" --umask "$mask" \
    --make-pidfile --pidfile "$pidfile" \
  --exec "$daemon" -- "$service"
} # start

function stop () {
  local -r retry='TERM/10/KILL/5'
  local -r service="$( realpath "$1" )"
  local -r pidfile="${service}/${name}.pid"
# local -r piddir="${PREFIX}/var/run"
# local -r piddir="${HOME}"

  man start-stop-daemon

  command start-stop-daemon --stop --oknodo --remove-pidfile --pidfile "$pidfile" --signal 1 --retry "$retry"

  return

  #tail --pid=$( cat "$PIDFILE" ) /dev/null

  #for supervisor in "$SVDIR/*/supervise" "$SVDIR/*/log/supervise"; do
  #  kill -9 $(cat "$supervisor/pid") 2>/dev/null || :
  #  rm -rf $supervisor
  #done
} # stop

# Runit
# https://en.m.wikipedia.org/wiki/Runit
# See $HOME/.termux/boot/README on Android
# https://antixforum.com/forums/topic/what-are-the-advantages-of-runit
function trip () {
  local -r service="${1}"
  local -r services="${*:-nginx}"
  local -r path="${PREFIX}/var/service"

  [ -z "$service" ] && service-daemon stop && return

  # man sv
  echo Check
  sv -v check "$service"
  echo Statuus
  sv -v status "$service"
# sv -v force-stop "$service"
  sv -v force-shutdown "$service"
  echo Check
  sv -v check "$service"
  echo Statuus
  sv -v status "$service"

  services
} # trip

# }}}

# =========================================================================
# {{{ Network
#   NMAP
#     - https://upguard.com/blog/how-to-use-nmap
#     - https://redhat.com/sysadmin/use-cases-nmap
#     - https://freecodecamp.org/news/what-is-nmap-and-how-to-use-it-a-tutorial-for-the-greatest-scanning-tool-of-all-time
# =========================================================================

alias whois='command whois -H'

# https://computernetworkingnotes.com/linux-tutorials/how-to-configure-telnet-sever-and-client-in-linux.html
alias telnet='telnet --login'

# https://man7.org/linux/man-pages/man8/ss.8.html
# https://man7.org/linux/man-pages/man2/socket.2.html
alias socket='man ss ; man socat'

# https://man7.org/linux/man-pages/man2/connect.2.html
alias connect='TODO: implementation'

# https://en.m.wikipedia.org/wiki/Tc_(Linux)
# https://man7.org/linux/man-pages/man8/tc.8.html
alias traffic='man tc'

# https://redhat.com/sysadmin/ifconfig-vs-ip
alias ip='command ip --color address |
  command grep --color --perl-regexp "(inet)\s[^/]+" ;
  echo ; command ip --color route ;
  echo ; command route -v -ee -A inet ;
' # alias

# TODO: Find netstat alternative
#   - https://man7.org/linux/man-pages/man8/netstat.8.html
# This program is mostly obsolete.  Replacement for netstat is ss.
# Replacement for netstat --route is ip route.
# Replacement for netstat --groups is ip maddr.
# Replacement for netstat --interfaces is ip -s link.
#   -https://reddit.com/r/termux/comments/mdp0dq/comment/gsb0w5c
#alias ports="netstat --verbose --all --numeric --timers --tcp --udp --listening --programs --wide"
alias ports='netstat --verbose --all --numeric --listening --programs --wide'

# Test Servers
# - https://smartftp.com/en-us/support/kb/2779
# - https://dlptest.com/ftp-test
# FTP (File Transfer Protocol)
# cURL
function download () { clear
  local -r uri="$1"
  # https://github.com/yt-dlp/yt-dlp?tab=readme-ov-file
  local -r process='../.local/yt-dlp'

  echo uri: "$uri"
  echo process: "$process"
  echo

# $process --help
# $process --download-sections '*00:00:00.0-00:00:05.0' $uri
# $process "$uri"
  header "$uri"
# keep local file name similar to remote-name
  wget "$uri"
  # TODO: Progress bar - https://bashupload.com/how_to_upload_progress_curl
  curl --remote-name "$uri"
} # download

# cURL
# - https://everything.curl.dev/usingcurl/uploads.html
# - https://everything.curl.dev/ftp/upload.html#uploading-with-ftp
alias ftp='command ftp --version; ftp --verbose'
function upload () {
  local -r resource="${1}"
  local -r uri="${2}"

  echo resource: "$resource"
  echo uri: "$uri"

  exist "$resource" || return $?

  list "$resource"
  about "$resource"
  weigh "$resource"
  curl --upload-file "$resource" "$uri"

  # TODO: upload to remote domain ( e.g. AWS / CDN )
  # TODO: Progress bar - https://bashupload.com/how_to_upload_progress_curl
} # upload

# https://man.archlinux.org/man/host.1.en
# https://man7.org/linux/man-pages/man5/hosts.5.html
# https://man7.org/linux/man-pages/man1/hostname.1.html
# https://cloudns.net/blog/linux-host-command-troubleshot-dns
function host () { clear
  local -r domain=${1:-localhost}
  local -r hosts=${PREFIX}/etc/hosts

  [ "$domain" != localhost ] \
    && whois "$domain"

  echo ; echo ALL:
  command host -v -R 3 -a "$domain"
  # SOA (Start of Authority) Record(s) - https://en.m.wikipedia.org/wiki/SOA_record
  # rfc1035 Domain Names - https://datatracker.ietf.org/doc/html/rfc1035#autoid-31
  echo ; echo SOA:
  command host -v -t SOA "$domain"
  echo ; echo ; command host -v -R 3 -C "$domain"
  echo ; echo ; command host -v -R 3 "$domain"
  echo ; echo ; command host -R 3 "$domain"

  echo ; echo ; traceroute -N 1 -z 0.1 "$domain"
  echo ; ping "$domain"
  echo ; echo

  echo Current Host: "$( hostname ) ⇋ $( hostname --ip-addresses )"
  printf "\n /etc/hosts: \n %s \n\n" "$( cat "$hosts" )"

  [ "$HOSTFILE" ] \
    && printf "\n \$HOSTFILE: $HOSTFILE \n %s \n\n" "$( cat "$HOSTFILE" )"
} # host

# Benchmarking
#   - https://lobste.rs/s/mqxwuc/what_s_your_preferred_tool_for_load
#   - https://codedamn.com/news/backend/performance-tuning-benchmarking-optimization
#   - https://engineering.appfolio.com/appfolio-engineering/2019/1/18/benchmarking-ruby-app-servers-badly
#   - https://engineering.appfolio.com/appfolio-engineering/2019/4/21/wrk-it-my-experiences-load-testing-with-an-interesting-new-tool
function load () { clear
  local -r url="${1}"
  local -r connections=10
  local -r requests=100 # 100000

  [ "$url" ] \
    || echo missing url && return 1

  header "$url"

  ab -n $requests -c $connections "$url"
  echo ; echo "${requests}:${connections} @ ${url}"
} # load

# https://nginx.org/en/docs
function balance () { clear
  nginx -V
  nginx -help

  local -r configuration="${HOME}/nginx.conf"

  exist "$configuration" && cat "$configuration"
  # /usr/local/nginx/conf/*, /etc/nginx/*, or /usr/local/etc/nginx/*
  exist "${PREFIX}/etc/nginx/nginx.conf" && cat "${PREFIX}/etc/nginx/nginx.conf"

  check "$configuration"

  nginx -c "$configuration" \
    && echo Started nginx load balancer on PORT 8080
} # balance

# Proxies -----------------------------------------------------------------
# SOCKS (4|5) SOCK(et) S(ecure)
# SOCKS4 - SOCKS | TCP protocols,
# SOCKS5 - DNS | UDP | SSH | IPv6 | Auth
# - https://en.m.wikipedia.org/wiki/SOCKS
# - https://datatracker.ietf.org/doc/html/rfc1928
# cURL --proxy --socks4 --socks4a --socks5 --socks5-hostname
# - https://oxylabs.io/blog/curl-with-proxy
# - https://everything.curl.dev/usingcurl/proxies/socks.html
alias proxyon='
  export http_proxy="http://user:pwd@127.0.0.1:8888" ;
  export https_proxy=" http://user:pwd@127.0.0.1:8888" ;
  echo "PROXY ON! http: ${http_proxy} https: ${http_proxy}" ;
' # proxyon
alias proxyoff='echo "PROXY OFF!" ; unset http_proxy ; unset https_proxy'

# SOCKS vs. HTTP - https://incogniton.com/socks-vs-http-proxy
function proxy () { clear
  # https://tinyproxy.github.io
  tinyproxy -v
  tinyproxy -h
  tinyproxy -d -c "$HOME/tinyproxy.conf"
} # proxy

# NetCat ------------------------------------------------------------------
# - https://baeldung.com/linux/netcat-command
alias catscan='{
  nc -z -v -w 1 localhost 1234
  nc -z -v -w 1 google.com 442-444
}' # catscan

alias catnet='{
  while true; do
    command echo -e "HTTP/1.1 200 OK\n\nHello World!\n" \
      | nc -l -v 1234
  done
}' # catnet

# Exploits ----------------------------------------------------------------
# https://en.m.wikipedia.org/wiki/Zip_bomb
function zipbomb () { clear
  local -r destination=$( realpath "${1:-./bomb.zip}" )

  echo zipBomb
} # zipbomb

 # https://en.m.wikipedia.org/wiki/Fork_bomb
function forkbomb () { clear #:(){ :|:& };:
  local -r destination=$( realpath "${1:-./bomb.zip}" )

  echo forkBomb

  # forkbomb | forkbomb &
} # forkbomb

# - https://securitygate.io/blog/osi-model-fundamentals-cybersecurity-basics/
function attack () {
  # Unauthorized access
  # Data sniffing
  # Physical damage
  # Social engineering attacks
  # Credential theft
  # Vulnerability exploits

  echo C10k Problem # https://en.m.wikipedia.org/wiki/C10k_problem
  echo DoS # https://en.m.wikipedia.org/wiki/Denial-of-service_attack
  echo DDoS # https://aws.amazon.com/shield/ddos-attack-protection/

  echo Algorithmic # https://en.m.wikipedia.org/wiki/Algorithmic_complexity_attack
  echo ReDOS # https://en.m.wikipedia.org/wiki/ReDoS
  echo Billion Laughs # https://en.m.wikipedia.org/wiki/Billion_laughs_attack
} # attack

# }}}

# =========================================================================
# {{{ Server(s)
# =========================================================================

# HTTP(s) -----------------------------------------------------------------
# - https://realpython.com/python-http-server
function serve () { clear
  local -r realm='devPunks' # Authentication
  local -r port=${PORT:-4321}
  local -r root=$( realpath ${1:-.} )
  local -r server=$( realpath ${PREFIX:-/usr} )
  local -r config="${HOME}/httpd.conf"

  exists "$root" || return $?

  echo PORT: "$port"
  echo ROOT: "$root"
  echo CONFIG: "$config"


  echo ; echo # Apache
  tree "${PREFIX}/etc/apache2"
  list "${PREFIX}/libeexec/apache2"
  # check $PREFIX/etc/apache2/httpd.conf (ServerName)
  # - https://httpd.apache.org/docs/current/programs/apachectl.html
  local -r APACHE="command apachectl -d ${root} -f ${config}"
  echo ; echo "APACHE COMMAND: $APACHE"
  $APACHE -V # version & compile settings
  $APACHE -l # compiled modules
  $APACHE -L # configuration directives
  $APACHE -M # (-t -D DUMP_MODULES) Show all loaded modules
  $APACHE -S # (-t -D DUMP_VHOSTS) vhost settings (-t -D DUMP_RUN_CFG) run settings
  $APACHE fullstatus # See $STATUSURL

  cat "$config"
  check "$config" \
    && command apachectl restart -d "$server" -f "$config"

  # see http.conf
  command busybox httpd -vv -r "$realm" -h "$root" -c "$config" -p 0.0.0.0:7070
  # command httpd -d <ServerRoot> -f <Config> -k start


  echo ; echo # Python
  command python -m http.server 5000 2>&1 &


  echo ; echo # Lighttpd
  tree "${PREFIX}/etc/lighttpd"
  # https://redmine.lighttpd.net/projects/lighttpd/wiki/TutorialConfiguration
  command lighttpd -V
  check "./lighttpd.conf" \
    && command lighttpd -p -f "./lighttpd.conf" \
    && command lighttpd -f "./lighttpd.conf"
} # serve

# SSh ---------------------------------------------------------------------
# - https://ssh.com/academy/ssh
# - https://ssh.com/academy/ssh/add-command
# - https://superuser.com/q/141044
# - http://blog.joncairns.com/2013/12/understanding-ssh-agent-and-ssh-add
alias ssh.add='{
  clear
  echo adding ssh

  # default is $TMPDIR/ssh-XXXXXXXXXX/agent.<ppid>
  eval $( ssh-agent -s -a $HOME/agent.sock)
  command ssh-add
  ps x | command grep ssh-agent

  echo AGENT PID: $SSH_AGENT_PID
  echo AUTH SOCK: $SSH_AUTH_SOCK
}' # ssh.add

# SSh(d) ------------------------------------------------------------------
#   - Terrapin Scanner: https://github.com/RUB-NDS/Terrapin-Scanner
#   - https://wiki.termux.com/wiki/Remote_Access
#   - https://man7.org/linux/man-pages/man1/ssh.1.html
#   - https://github.com/termux/termux-packages/issues/3620
#
# -d - debug level
# -c - for host_certificate_file
# -f - /data/data/com.termux/files/usr/etc/ssh/sshd_config
# -T - test mode
# check
# ~/.ssh/rc
# ~/.ssh/config
# ~/.ssh/id_rsa
# ~/.ssh/id_rsa.pub
# ~/.ssh/environment
# ~/.ssh/known_hosts
# ~/.ssh/authorized_keys
# $PREFIX/etc/ssh/ssh_config
# $PREFIX/etc/ssh/sshd_config
# $PREFIX/etc/ssh/ssh_known_hosts
# $PREFIX/etc/ssh/ssh_host_rsa_key
# $PREFIX/etc/ssh/ssh_host_rsa_key.pub
# SEE ALSO
#   scp(1), sftp(1), ssh(1), ssh-add(1), ssh-agent(1), ssh-keygen(1), ssh-
#   keyscan(1), chroot(2), login.conf(5), moduli(5), sshd_config(5),
#   inetd(8), sftp-server(8)
# -X flag for Enable X11 forwarding
alias sshd='command sshd -X -Dddd -p8022'

# SMTP -----------------------------------------------------------------
function mail () { clear
  local -r title=${1:-"Title"}
  local -r body=${1:-"Message"}
  local -r timestamp=$( command date --rfc-email )

  man mail
  # info mail # TODO: install texinfo

  echo
  echo "Timestamp: $timestamp"
  echo "Title: $title"
  echo "Body: $body"
  echo
} # mail

# Chat --------------------------------------------------------------------
  # Configuration - https://gist.github.com/pascalpoitras/8406501
  # Quickstart - https://weechat.org/files/doc/stable/weechat_quickstart.en.html
function chat () { clear
  echo WeeChat Version: ` weechat --version `

  TERM=tmux-256color weechat --colors

  # /plugin
  # /fset irc.*
  # /fset weechat.*
  # --plugins <plugins> --run-command <command>
  #
  # /server add libera irc.foo.bar/1234 -tls -autoconnect
  TERM=tmux-256color weechat --temp-dir --dir "$HOME/chat"
} # chat

# PulseAudio --------------------------------------------------------------
alias pulse='{
  pulseaudio -k
  pulseaudio -L "module-sles-source" -D
}' # pulse

# TMUX --------------------------------------------------------------------
alias tmux.config='{
  tmux info
  echo ; echo Server Options:
  tmux show-options -s
  echo ; echo Global Options:
  tmux show-options -g
  echo ; echo Global Window Options:
  tmux show-window-options -g
}' # tmux.config

# }}}

# =========================================================================
# {{{ Log(s)
#   - Syslog - RFC5424
#     - https://stackify.com/syslog-101
#     - https://rfc-editor.org/rfc/rfc5424
#     - https://datatracker.ietf.org/doc/html/rfc5424
# ==========================================================================

alias tail='command tail --verbose'
alias logs.sshd="command logcat -s 'sshd:*'"

# Kernel Ring - https://unix.stackexchange.com/q/198178
alias dmesg='man dmesg; command dmesg --human --ctime --color=auto'

function log () { clear
  local -r message="${1}"
  local source # --source IP | --unix SOCK

  man logger
  # logger --id --ipv4
  man svlogd
  # svlogd -tt "$LOGDIR/sv/$service"
} # log

function err () {
  local source # --source IP | --unix SOCK
  local -r message="${1}"

  # logger --id --ipv4 --stderr --tag "ERROR"
  printf "\n$( command date) 🛑 %s\n" "${message}"

  return 1
} # err

# - https://plesk.com/blog/featured/linux-logs-explained
# - https://cyberciti.biz/tips/howto-linux-unix-write-to-syslog.html
# - systemd Journal Fields - https://real-world-systems.com/docs/systemd.1.html#journal-fields
function logs () {
  command logcat -d # dump
  command logcat --clear

  printf "\n🌎Global logs :\n%s\n\n" "$( tree "$LOGDIR" )"

  [ -d logs ] \
    && printf "\n🏠Local logs :\n%s\n\n" "$( tree logs )"
} # logs

function rotate () {
  local -r log=${1}

  exist "$log" || return $?

  echo ; command logrotate --verbose --log="$log" "$log"
  echo ; echo ⥁ rotating log: "$log"
} # rotate

# }}}

# =========================================================================
# {{{ Archives
# =========================================================================
# https://zdnet.com/google-amp/article/how-to-back-up-a-linux-directory-to-a-remote-machine-with-rsync
function sync () {
  local -r source=$( realpath "$1 ")

  man command sync
  man command rsync

  echo Synching source: "$source"
} # sync

function backup () { clear
  local -r source=$( realpath "$1" )

  exist "$source" || return $?

  package "$source"
  # compress
  sync "$source"

  echo Backing Up "$source"
} # backup

function package () { clear
  local -r source=$( realpath "$1" )
  local -r destination="$1"

  exist "$source" || return $?

  echo "📦 Packaging: $source"
  echo "📦   Destination: $destination"
} # package

function shrink () { clear
  local -r source=$( realpath "$1" )

  exist "$source" || return $?

  echo Shrinking: "$source"
} # shrink

function expand () { clear
  local -r source=$( realpath "$1" )

  exist "$source" || return $?

  echo Expanding "$source"
  command uncompress --verbose --list "$source" \
    | sed 's/date.*time/month day time/' \
    | column --table
} # expand

# - https://ncompress.sourceforge.io
function compress () { clear
  local -r operation
  local -r source=$( realpath "$1" )
  local -r destination=$( realpath "${2:-./$source}" )

  exist "$source" || return $?
  exist "$destination" || mkdir "$destination"

  echo Compressing "$destination"
} # compress

function decompress () { clear
  local -r operation
  local -r source=$( realpath "$1" )
  local -r destination=$( realpath "${2:-./$source}" )


  exist "$source" || return $?
  exist "$destination" || mkdir "$destination"
} # decompress

function pack () { clear
  local -r file=$( realpath "$1" )
  local -r contents=${@:2}

  exist "$file" || return $?

  echo file: "$file"
  echo contents: "$contents"

  # https://en.m.wikipedia.org/wiki/Deflate
  command zip -rv "$file" "$contents" # -u for update only

# - https://geeksforgeeks.org/tar-command-linux-examples
  command tar --verbose --create ---gzip --file "$file" "$contents" # -u for update only

  # Creates a package (*.tgz *.tar.gz) from given directory.
  # tar cvzf "${1%%/}.tgz"  "${1%%/}/"
  # tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"

  # Create a ZIP package of a file or folder.
  # zip -r "${1%%/}.zip" "$1"

  exist "$file" \
    && command view "$file"
} # pack

function unpack () { clear
  local operation
  local -r archive="${1}"
  local -r destination="${2:-${archive%.*}}"

  exist "$archive" || return $?
  exist "$destination" || mkdir "$destination"

  echo "source: $archive"
  echo "destination: $destination"
  weigh "${archive}"
  echo ; echo

  case "$archive" in
    # -q quiet mode (-qq => quieter)
    # -n never overwrite existing files
    # -u update existing files, or create
    # -o overwrite files WITHOUT prompting
    # -f freshen existing files, create none
    # -v Verbosely list archive contents then exit
    # https://linuxhandbook.com/unzip-command
    # https://en.m.wikipedia.org/wiki/ZIP_(file_format)
    *.zip ) {
      unzip -v
      echo ; echo
      UNZIP='-t --u' unzip "${archive}" \
        && zipinfo "${archive}" && unzip -d "${destination}" "${archive}"
    } ;; # *.zip

    # https://en.m.wikipedia.org/wiki/RAR_(file_format)
    # https://github.com/termux/termux-packages/issues/2190
    # https://unix.stackexchange.com/q/522958/how-to-use-p7zip-to-open-rar-files
    # https://cyberciti.biz/faq/open-rar-file-or-extract-rar-files-under-linux-or-unix/#google_vignette
    *.rar ) {
      # TODO: 7z command
      unrar t "${archive}"
      unrar v "${archive}"
      unrar x "${archive}" "${destination}"
    } ;; # *.rar

    # https://en.m.wikipedia.org/wiki/Tar_(computing)
    # *.tar)     operation="tar xvf $archive"  ;;
    *.tar ) {
      operation="view $archive && tar --verbose --list --file=$archive $destination"
    } ;;

    # https://en.m.wikipedia.org/wiki/7z
    # https://tecmint.com/7zip-command-examples-in-linux
    *.7z ) {
      operation="7z $archive"
    } ;;

    #   - https://computerhope.com/unix/uuncompr.htm
    *.Z ) {
      operation="uncompress --verbose --test --list --keep --recursive $source"
    } ;;

    # https://en.m.wikipedia.org/wiki/XZ_Utils
    # xz --decompress - https://linux.die.net/man/1/unxz
    # xz --decompress --format=unlzma - https://linux.die.net/man/1/unlzma
    *.xz ) {
      operation="view $archive && unxz --verbose --test --list --keep --files $source"
    } ;;

    *.lzma ) {
      operation="view $archive && unlzma --verbose --test --list --keep --files $source"
    } ;;

    # https://en.m.wikipedia.org/wiki/Brotli
    # brotli --decompress - https://manpages.ubuntu.com/manpages/jammy/en/man1/brotli.1.html
    *.br ) {
      operation="view $archive && brotli --decompress --verbose --test --keep --files $source"
    } ;;

    *.tar.gz ) operation="tar xvzf $archive"  ;;
    # https://linux.die.net/man/1/gunzip
    # https://linuxhandbook.com/gunzip-command/
    *.gz ) {
      operation="view $archive && gunzip --verbose --test --list $archive"
    } ;;

    *.tgz | *.tar.bz2 ) operation="tar xvzf $archive"  ;;

    # https://linux.die.net/man/1/bunzip2
    # https://en.m.wikipedia.org/wiki/Bzip2
    *.bz2 ) operation="bunzip2 --verbose --test $archive"  ;;

    * ) echo "'$archive' cannot be extracted via >extract<"  ;;
  esac

  echo ; echo

# echo ; command view "$archive"
# echo ; command tar --list --file="$archive"
# echo ; command bunzip2 --verbose --test "$archive"
# echo ; command gunzip --verbose --test --list "$archive"
} # unpack

function extract () {
  local -r archive=$( realpath "$1" )

  exist "$archive" || return $?

  unpack "$archive"
} # extract

# }}}

# =========================================================================
# {{{ Functions
#   - https://tldp.org/LDP/abs/html/functions.html
#   - https://cuddly-octo-palm-tree.com/posts/2021-10-31-better-bash-functions/
# =========================================================================

# TODO: Implementation
# -------------------------------------------------------------------------
function forward () { : forward; }
function reverse () { : reverse; }

function used () { : used; }
function clean () { : clean; }
function reboot () { : reboot; }
function restart () { : restart; }
function refresh () { : refresh; }
function service () { : service; }
function cumulate () { : cumulate; }
function accumulate () { : accumulate; }
function bandwidth () { : bandwidth; }
# -------------------------------------------------------------------------

function lint () { clear
  echo Linting...
  check .*rc
} # lint

alias make="command make -v; command make"
# LLVM - https://llvm.org
# - https://clang.llvm.org
# - https://en.m.wikipedia.org/wiki/Clang
# Tiny C Compiler
# - https://bellard.org/tcc
# - https://en.m.wikipedia.org/wiki/Tiny_C_Compiler
function compile () { clear
  local -r source="${1}"
  local -r output="$( basename "${1%.*}" ).run"
  local -r include="$PREFIX/include/bsd"

  command tcc -h
  command tcc -hh
  command tcc -vv

  exist "$source" && \
  command tcc "$source" \
    -I"$PREFIX/include/bsd/stdio.h" \
    -L"$PREFIX/include/bsd/stdio.h" \
    -o "$output"

  return $?
} # compile

# -------------------------------------------------------------------------

# https://en.m.wikipedia.org/wiki/FFmpeg
function convert () { clear
  local -a files=${@}
  local filter="-af 'afftdn=nr=10:nf=-30:tn=1'"

# ffmpeg -hide_banner -colors
# ffmpeg -hide_banner -filters # filter=
# ffmpeg -hide_banner -hwaccels

# ffmpeg -hide_banner -codecs
# ffmpeg -hide_banner -muxers
# ffmpeg -hide_banner -demuxers
# ffmpeg -hide_banner -decoders # decoder=
# ffmpeg -hide_banner -encoders # encoder=

# ffmpeg -hide_banner -formats
# ffmpeg -hide_banner -sample_fmts

  echo ${#}
  echo ${#files[@]}
  for file in "${files[@]}"; do
    echo Input: "$file"
    echo Filter: "$filter"

    # ffprobe "$file"
    # ffmpeg -i "$file" "${file%.*}.mp4"
    # ffprobe .mp4
  done # for $file
} # convert

# See /usr/etc/lynx.cfg
# - https://lynx.invisible-island.net/lynx_help/
# - https://lynx.invisible-island.net/lynx2.8.3/breakout/lynx.cfg
function browse () { clear
  local -r location="${1}"
  local -r configuration="${PREFIX}/etc/lynx.cfg"

  lynx -validate -verbose \
    -homepage='http://mdn.com' -session="${HOME}/lynx.session" \
    -cookies -accept_all_cookies -cookie_file="${HOME}/.cookies" \
    -anonymous -use_mouse -scrollbar -scrollbar_arrow -show_cursor -show_rate -vikeys \
  "$location"

  echo ; lynx -show_cfg
} #browse

# TODO: Implementation
# - https://graphviz.org/pdf/dotguide.pdf
# - https://graphviz.org/doc/info/lang.html
alias graph='command dot -Tps -o'
alias chart='echo TODO: Implement chart'
# https://gnu.org/software/barcode
alias barcode='command barcode --help ; command barcode'
alias matrix='command cmatrix -b -a -s -C magenta' # ScreenSaver

function draw () { : draw; }

# http://gnuplot.info
function plot () { clear
  gnuplot --version
  gnuplot --help
} # plot

function write () { clear
  local -r message="${1}"

  man figlet

  figlet -c -w $COLUMNS "$message"
} # write

function stream () {
  local -r bytes="${1:-foo}"
  yes "$bytes"
} # stream

function open () { clear
  local -r location="$1"
  # apk
  [ -f "$location" ] && [ -x "$location" ] && termux-open "$location"

  # url
  [[ "$location" == http* ]] && termux-open-url "$location"

  # file
  [ -f "$location" ] && termux-open "$location"

  # android
  # am start -a android.intent.action.VIEW -d "$1" > /dev/null
} # open

function play () { clear
  local -r location="$1"

  exist "$location" || return $?

  # SoX
  #   - https://en.m.wikipedia.org/wiki/SoX
  #   - https://madskjeldgaard.dk/posts/sox-tutorial-cli-tape-music
  #   - https://madskjeldgaard.dk/posts/sox-tutorial-batch-processing
  #   - https://madskjeldgaard.dk/posts/sox-tutorial-split-by-silence
  #   - https://ankitshah009.blogspot.com/2016/12/usage-of-sox-tool.html
  #   - https://ankitshah009.blogspot.com/2017/03/sox-of-silence-original-post.html
  #   - cheatsheet - https://gist.github.com/ideoforms/d64143e2bad16b18de6e97b91de494fd
  echo ; sox --help
  echo ; vlc --help
  echo ; ffmpeg --help

  echo ; echo ▷ Playing: "$location"
} # play

function encode () {
  local -r bytes="$1"
  local -r encoding='--base64' # base2lsbf | base2msbf | base16 | base32 | base32hex | base64 | base64url

  printf "$bytes" | basenc $encoding
} # encode

function decode () {
  local -r bytes="$1"
  local -r encoding='--base64' # base2lsbf | base2msbf | base16 | base32 | base32hex | base64 | base64url

  printf "$bytes" | basenc --decode $encoding
} # decode

# }}}

echo 'devPunks😈studio .bash_login' ; echo

# vim: foldmethod=marker
