#!/usr/bin/env bash
#
#     888                        888               888                   d8b
#     888                        888               888                   Y8P
#     888                        888               888
#     88888b.   8888b.  .d8888b  88888b.           888  .d88b.   .d88b.  888 88888b.
#     888 "88b     "88b 88K      888 "88b          888 d88""88b d88P"88b 888 888 "88b
#     888  888 .d888888 "Y8888b. 888  888          888 888  888 888  888 888 888  888
# d8b 888 d88P 888  888      X88 888  888          888 Y88..88P Y88b 888 888 888  888
# Y8P 88888P"  "Y888888  88888P' 888  888 88888888 888  "Y88P"   "Y88888 888 888  888
#                                                                    888
#                                                               Y8b d88P
#                                                                "Y88P"
#
# -------------------------------------------------------------------------
# Version: 0.1
# File: .bash_login
# Source: https://github.com/devpunks
# Author: Ahmid-Ra (github.com/snuggs)
# Maintainer: devPunks <https://github.com/devpunks>
# Description: Bourne Again SHell Run Commands for login $SHELL.
# -------------------------------------------------------------------------
#
# INVOCATION
#   - https://unix.stackexchange.com/q/43953
#   - https://gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html

# [ -r $HOME/.bashrc ] && source $HOME/.bashrc

# ALIAS WITH PARAMETER - https://stackoverflow.com/a/7131683
# Paste - https://geeksforgeeks.org/paste-command-in-linux-with-examples
# Hyperlinks - https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda

# =========================================================================
# {{{ Bindings # see ~/.inputrc
# =========================================================================
# https://computerhope.com/unix/bash/bind.htm
alias bindings='{ clear
  printf "\n Bindings:\n"
    command bind -p
  printf "\n\n Macros:\n"
    command bind -s
  printf "\n\n Variables:\n"
    command bind -v
}' # bindings

# }}}

# =========================================================================
# {{{ Aliases
# =========================================================================
# https://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo
alias temp="mktemp --tmpdir=${TMPDIR} -t XXXXXX.tmp"
alias buffalo='echo Buffalo buffalo buffalo buffalo buffalo buffalo buffalo buffalo'
alias banner="clear; cat ~/.ssh/banner"
alias ide="command source ${HOME}/ide"
alias tldr='open https://tldr.inbrowser.app'

# https://antofthy.gitlab.io/info/crypto/passwd_input.txt
alias dialog='command dialog --stdout --insecure --title "Foo Bar" --passwordbox "Prompt" 0 0'

# https://linux.die.net/man/1/expect
# https://stackoverflow.com/q/33304242
# https://digitalocean.com/community/tutorials/expect-script-ssh-example-tutorial
alias expect='pkg info expect'

# https://man7.org/linux/man-pages/man1/script.1.html
# https://ibm.com/docs/fi/zos/2.4.0?topic=descriptions-script-makes-typescript-terminal-session
alias script='man command script ; clear ; command script'

alias dev='tree /dev'
alias proc='tree /proc'
alias bin='tree "$PREFIX/bin"'
alias etc='tree "$PREFIX/etc"'
alias share='tree "$PREFIX/share"'

# https://man7.org/linux/man-pages/man1/lscpu.1.html
alias cpu='
  echo ; echo ; command lscpu
  echo ; lscpu --caches --output-all
  echo "\n\n CPU count: $( nproc ) \n\n"
  echo ; command lscpu --extended --all
' # cpu

# https://man7.org/linux/man-pages/man8/sysctl.8.html
alias kernel='
  man sysctl
  man sysctl.conf

  command sysctl --version
  command sysctl --system
  echo "\n\n 👇Kernel👇 \n" ; command sysctl --all | sort
' # kernel

alias bell='echo "\a"'
alias shell='chsh' # https://wiki.termux.com/wiki/Shells
alias view='command view -n -M -R'
# for escape characters - https://tldp.org/HOWTO/Bash-Prompt-HOWTO/c583.html
alias echo='command echo -e'
# https://man7.org/linux/man-pages/man1/nl.1.html
alias lines='command nl --number-separator=".＞ "'
# https://linux.die.net/man/1/pv
# https://ivarch.com/programs/pv.shtml
# https://reddit.com/r/programming/comments/7u8f2/a_unix_utility_you_should_know_about_pipe_viewer
alias progress='pv --progress --eta --timer'

# https://github.com/powerline/fonts
alias fonts='$HOME/.local/fonts/fonttable ; echo "\nSee ~/.local/fonts"'

alias ..='command cd ..'
alias pop='command popd'
alias push='command pushd'
alias dirs='command dirs -p'
alias most='command most +u -s -t2'
alias mount='command mount | column -t'
alias path='echo "\\nPATHS: \\n ${PATH//:/\\n} \\n"'
alias libpath='echo "\\nLIBPATHS: \\n ${LD_LIBRARY_PATH//:/\\n} \\n"'
alias mkdir='command mkdir --verbose --parents --mode u=rwx,g=rx,o=' # 750
alias diff='command diff --color=auto' # - https://geeksforgeeks.org/diff-command-linux-examples

# https://stackoverflow.com/q/4113986
alias pipe='command mkfifo' # https://fn.m.wikipedia.org/wiki/Named_pipe
alias cp='command cp --verbose --interactive --no-clobber --recursive'
alias ln='command ln --verbose --interactive --symbolic --no-dereference'
alias mv='command mv --verbose --interactive --no-clobber --strip-trailing-slashes'
alias cut='command cut --only-delimited --delimiter="," --fields'
alias copy='man scp; echo TODO: implement copy command for multiple destination types'
alias zipper='man paste ; command paste' # https://geeksforgeeks.org/paste-command-in-linux-with-examples

alias fc="command fc -e $EDITOR -s" # https://geeksforgeeks.org/fc-command-linux-examples
alias rm='echo 🛑 rm is disabled, use remove, delete, or destroy' # - https://en.wikipedia.org/wiki/Rm_(Unix)
alias remove='trash' # See function trash ()
alias delete='command rm --verbose --preserve-root --recursive --dir --interactive=once'

# https://unix.stackexchange.com/q/90653
alias sed='sed --regexp-extended'
# https://unix.stackexchange.com/q/230952
# https://en.m.wikipedia.org/wiki/Find_(Unix)
# https://tecmint.com/35-practical-examples-of-linux-find-command
alias find=' \
  command find . -type f -iname \
'
# - https://stackoverflow.com/q/1987926
# https://gnu.org/software/gawk/manual/html_node/Bracket-Expressions.html
# https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html
# https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions
alias grep="LC_ALL=C command grep $GREP_OPTIONS"

# https://unix.stackexchange.com/q/344213
# https://askubuntu.com/q/103913/difference-between-dir-and-ls-terminal-commands
# https://unix.stackexchange.com/q/50377/whats-the-difference-between-dir-and-ls
alias ls="command ls $LS_OPTIONS -l"
alias vdir="command vdir $LS_OPTIONS -l"
alias branch='clear ; tree -d -L 4'
# https://github.com/eza-community/eza
alias list="command eza --level=2 --color=auto --classify=auto \
  --all --links --grid --icons --long --header --no-user --octal-permissions \
  --group-directories-first --total-size --git --git-repos --git-ignore --ignore-glob '.git'"
alias tree='command tree -ahACDF --du -L 2 --dirsfirst --gitignore -I ".git"'

alias wait='command wait' # https://baeldung.com/linux/wait-command
# https://tecmint.com/fswatch-monitors-files-and-directory-changes-modifications-in-linux
alias watch='command watch --no-wrap --interval 30 --differences=permanent --exec'
alias which='command type -a'
alias when='echo TODO: \`when\` implementation'
alias why='echo TODO: \`why\` implementation'
alias what='command man whatis ; command whatis'
alias who='command id ;
  command id | tr "[\w|\,] " "\n" | tr "groups=" "\n\nGroups:" '

# - https://man7.org/linux/man-pages/man1/apropos.1.html
# - https://man7.org/linux/man-pages/man1/whereis.1.html
function where () {
  local -r term="${1}"

  command man whereis
  command whereis "$term"
  command apropos "$term"
} # where

# https://en.wikipedia.org/wiki/ISO_8601
# https://redhat.com/en/blog/formatting-date-command
# https://cyberciti.biz/faq/linux-unix-formatting-dates-for-display
# https://gnu.org/software/coreutils/manual/html_node/Time-conversion-specifiers.html
# https://gnu.org/software/coreutils/manual/html_node/Date-conversion-specifiers.html
# https://unix.stackexchange.com/q/625474/what-does-the-plus-symbol-in-date-command-refer-to
alias date='command date +%FT%TZ'
alias ticks='command date +%s.%3N'
alias calendar='command cal -1 --iso --color=auto'
alias now='command date --utc --iso-8601="ns"'
alias day='echo ; command date +"%A 🗓 %Y-%m-%d" ; echo ; calendar'
alias month='echo ; command date +"%B 🗓 %Y-%m-%d" ; echo ; calendar'
alias year='echo ; command date +"%Y 🗓 %Y-%m-%d" ; echo ; calendar'
# https://chrony-project.org
function clock () {
  local -r LOG="${HOME}/chrony.log"
  local -r CONFIG="${HOME}/chrony.conf"

  man chronyd
  man chronyc

  chronyd -d -f "$CONFIG" -l "$LOG"

  chronyc
  now # time
} # clock

function monitor () {
  open http://prometheus.io

  htop && ps
  printf "\n %s \n" "$( uptime )"
} # monitor

# https://man7.org/linux/man-pages/man1/free.1.html
alias free='command free --mega --human --wide'
# https://man7.org/linux/man-pages/man5/proc_meminfo.5.html
function memory () { clear
  echo ; for label in \
    MemTotal MemFree MemAvailable MemBuffers MemCached Active InActive; do
      command grep $label /proc/meminfo
  done

  echo ; free ; echo
}  # memory

# - https://en.wikipedia.org/wiki/Device_file
function devices () { clear
  local -r location="$1"

  ( exist "$location" && df -a -h "$location" && df -a -i "$location" ) \
    || ( df -a -h && df -a -i )

  # https://wiki.termux.com/wiki/Termux-usb
  printf "\n\n USB DEVICES: \n%s\n\n" "$( termux-usb -h )"
} # devices

# https://gnu.org/software/coreutils/manual/html_node/nohup-invocation.html
# https://digitalocean.com/community/tutorials/nohup-command-in-linux
function hold () {
  command nohup --version # https://en.wikipedia.org/wiki/Nohup
  command nohup "$1"

  # Redirect to stderror AND file
  # tee - https://en.wikipedia.org/wiki/Tee_(command)
  # nohup ./foo.sh > out.txt >2&1
} # hold

function recycle () { clear
  echo ♻ ♲ ♳ ♴ ♵ ♶ ♷ ♸ ♹ ♺ ♼ ♽

  # TODO: Fix error when empty temp directory.
  delete ${TMPDIR}/**

  trash "$@"

# Ensure $TMPDIR exists
  mkdir -p $TMPDIR
} # recycle

# - https://en.wikipedia.org/wiki/Shred_(Unix)
# - https://computerhope.com/unix/shred.htm
# - https://geeksforgeeks.org/shred-command-in-linux-with-examples
function destroy () {
  for file in "$@"; do
    exist "$file" \
      && shred --force --zero --iterations=5 --remove "$file" \
      && echo 💣 destroyed 💥 "$file"
  done # for $file
} # destroy

# - https://manpages.ubuntu.com/manpages/xenial/man1/trash.1.html
# - (M) trash - https://github.com/termux/termux-packages/issues/5488
# - https://askubuntu.com/q/468721/how-can-i-empty-the-trash-using-terminal
function trash () {
  for file in "$@"; do
    exist "$file" \
      && mv "$file" "$TMPDIR" \
      && echo 🚮 Sent to trash 🗑 "$file"
  done # for $file

  tree -L 1 "$TMPDIR"
} # trash

# https://bash.cyberciti.biz/guide/Reset_command
# https://bash.cyberciti.biz/guide/Console_management
# https://invisible-island.net/ncurses/man/tput.1.html#h2-HISTORY
# https://invisible-island.net/ncurses/man/tset.1.html#h2-HISTORY
# https://unix.stackexchange.com/q/335648/why-does-the-reset-command-include-a-delay
# https://unix.stackexchange.com/q/546918/any-reason-to-not-alias-reset-tput-reset-in-bashrc
# https://stackoverflow.com/q/2518127/how-to-reload-bashrc-settings-without-logging-out-and-back-in-again
function reload () { clear
  termux-reload-settings
  [ "$TMUX" ] && tmux source "${HOME}/.tmux.conf"

  source "${HOME}/.bashrc" \
    && source "${HOME}/.bash_login"

  # reset  slowwwwwwwwwwwwwwww
  tput reset
  tput sgro # reset attributes
  stty sane
  setterm --initialize
  setterm --resize
  tput cup 0 0

  environment
} # reload

# SIGWINCH - https://rkoucha.fr/tech_corner/sigwinch.html
# TIC - https://ibm.com/docs/ro/aix/7.1?topic=t-tic-command
# TOE - https://invisible-island.net/ncurses/man/toe.1m.html
# TERMINFO - https://bbs.archlinux.org/viewtopic.php?id=163103
# TERMINAL GREETER - https://yalneb.blogspot.com/2019/04/bash-terminal-greeter.html
function term () { clear
  write 'devPunks Term'
  echo "\e[7m" # REVERSE
  echo ; echo "TTY: $(tty)"
  printf "\n\nSize \e[3mROWS\e[23mX\e[3mCOLUMNS\e[23m: %s\n" \
    "$(stty size | tr ' ' 'x')"
  echo ; [ -n "$TMUX" ] && echo "TMUX INFO:" && tmux info
  echo ; echo "TERM=$TERM $( tput -V )" && toe
  echo ; echo "stty: $( stty --save )" && stty --all

  # https://manpages.ubuntu.com/manpages/bionic/man1/infocmp.1.html
  echo ; echo TERMINFO PATH: ; infocmp -1 -D # terminfo location
  echo ; echo TERMINFO CAP NAMES: ; infocmp -1 -IT # terminfo description
  echo ; echo TERMINFO CAPABILITIES: ; infocmp -1 -CrT # terminfo capabilities
  echo ; echo TERMINFO LONG NAMES: ; infocmp -1 -LT # terminfo long names

  echo "\e[m" # DEFAULT

  [ -e "${HOME}/.inputrc" ] \
    && { shortcuts ; echo "\e[3m( see ~/.inputrc )\e[23m" ; }

  [[ 'function' == $( type -t Colors ) ]] \
    && echo && Colors
} # term

  # https://gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html
function environment () {
  printf "\n👇Kernel👇 \n%s\n" "$( kernel )"
  printf "\n👇CPU👇 \n%s\n" "$( cpu )"

  printf '\n👇Reserved Words👇\n%s\n' \
    "$( compgen -k | sort | column --fillrows )"

  return

  echo '\n👇Built-ins👇'
  # https://gnu.org/software/bash/manual/html_node/Bash-Builtins.html#index-enable
  enable -p | column --fillrows

  echo '\n👇Aliases👇'
  compgen -a | sort | column --fillrows # alias -p

  echo '\n👇Commands👇'
  compgen -c | sort | column --fillrows

  echo '\n👇BusyBox👇'
  type busybox && busybox --list | column --fillrows

  variables && functions # TODO: Fix output to 5000 LINES

  [ "$TERMUX_VERSION" ] \
    && echo '\n Gathering Termux Information. Please Wait...' \
    && echo "\nTERMUX: $( termux-info )"

  echo "\nPATH: $PATH\n"
  echo "\n\$BASH: $BASH\n Options: $BASHOPTS"
  echo "\n\$SHELL: $SHELL\n Options: $SHELLOPTS"
  echo "\nTTY: $( tty )\n Lines: $LINES x Columns: $COLUMNS"

  [ "$TMUX" ] \
    && echo "\nMULTIPLEXER: $( tmux -V )"
} # environment

function functions () {
  # set # shows all function definitions

  echo '\n👇Functions👇'
  compgen -A function | sort | column --fillrows
} # functions

function variables () {
  echo '\n👇Shell Variables👇'
  help variables

  echo '\n👇Env Variables👇'
  # https://unix.stackexchange.com/q/123473
  printenv | sort | column --fillrows # printenv | export -p

  echo '\n👇Exports👇'
  compgen -e | sort | column --fillrows

  echo '\n👇Declarations👇'
  declare -p | \
    command cut --delimiter=' ' --fields 3 | sort | column --fillrows

  # TODO: refactor set (fix POSIX bug)
  #  - https://gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
  # echo ; echo '👇Shell Variables👇'
  # ( set +o posix; set; set +o posix ) | sort | column --fillrows
} # variables

# ----------------------
# Ruby
# ----------------------
alias be='bundle exec'

# ----------------------
# Artificial Intelligence
# ----------------------
# Eliza (LLM) - https://web.njit.edu/~ronkowit/eliza.html
alias eliza='why ; echo TODO: ELIZA implementation' # https://en.wikipedia.org/wiki/ELIZA

# }}}

# =========================================================================
# {{{ Git Aliases
# =========================================================================
alias ga='git add -p'
alias gb='git -P branch -a'
alias gc='git commit --message '
alias gd='git diff'
alias gg='git grep --break --heading'
alias gl='GIT_PAGER=cat git log --since=1.week --show-signature --reverse --all'
alias gll='git log -h; git log -L'
alias gp='git push --verbose --recurse-submodules=on-demand ; git push --tags'
alias gpu='git pull --verbose --prune --tags --rebase --no-recurse-submodules'
alias gr='git rebase -i'
alias gs='{ clear ; echo
  git status --column --verbose --show-stash --no-ignore-submodules
  GIT_PAGER=cat git stash list
  echo
}'
alias gsl='echo ; git shortlog -s | sort -r; echo'
alias gt='git tag -a'
alias gv='git verify-commit --verbose' # --raw
alias g#='{
  # https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
  # https://stackoverflow.com/q/2183900/how-do-i-prevent-git-diff-from-using-a-pager
  # gl --since="1 day ago"
  #   printf "\n Total:%d" $( gl --since=1.day | wc -l )
  gl --since="Today 00:00" ;
  printf "\n Total:%s\n\n" "$( gl --since="Today 00:00" | wc -l )"
}' # g#

# - https://stackoverflow.com/q/10666085
# - https://git-scm.com/docs/gitmodules
# - https://git-scm.com/docs/git-submodule
# - https://baeldung.com/ops/git-submodule-add-remove
# - https://git-scm.com/book/en/v2/Git-Tools-Submodules
# - https://github.blog/2016-02-01-working-with-submodules
# - https://stackoverflow.com/q/1260748/how-do-i-remove-a-submodule
# - https://stackoverflow.com/q/4161022/how-to-track-untracked-content
function git_submodule () { clear
  local -r module="${1}"
  local -r name="${module##*/}"
  local -r user=$(whoami)
  local -r start=".vim/pack/${user}/start"
  local -r path=".vim/pack/${user}/start/${name}"
  local -r url="https://github.com/${module}.git"

  mkdir -p "${start}"
  echo ; echo "Start: ${start}"
  ls -al "${start}"
  echo ; echo Listing submodules...
  git submodule status --recursive
  echo ; echo Updating submodules...
  git submodule update --recursive --remote --merge

  # vim -u NONE -c "helptags vim-gitgutter/doc" -c q

  [ "$module" ] || return $?

  echo ; echo "Github Module URL: ${url}"
  echo ; echo "Local Submodule Path: ${path}"

  pushd "${start}"
# git clone ${url}
  git submodule add --force -- "${url}"
  echo ; echo "${BOLD}${module}${DEFAULT}"

  echo "Adding Submodule ${module}"
  git submodule init -- "${name}"
  git submodule sync --recursive
  ls -al "${name}"
  $( GIT_PAGER=cat git diff --name-status --staged | grep '.gitmodules' > /dev/null ) \
    && git commit -m "Add Submodule @${module}"

# echo "${BOLD}Removing Submodule ${module} from .git/config${DEFAULT}"
# git config -f $HOME/.git/config --remove-section "submodule.${path}"
# git submodule deinit --force -- "${name}"
# echo "${BOLD}Removing Submodule ${module} from .git/modules/${path}${DEFAULT}"
# command rm -rfdv "${HOME}/.git/modules/${path}"
# echo "${BOLD}Removing Submodule ${module} from .gitmodules & directory path${DEFAULT}"
# git rm -r --force -- "${name}"
# git config -f -- $HOME/.gitmodules --remove-section "submodule.${path}"

  popd || return $?
  echo
} # git_submodule

# Linus - https://gcc.gnu.org/legacy-ml/gcc/2007-12/msg00165.html
function git_clean () { clear
  # https://stackoverflow.com/q/5613345/how-to-shrink-the-git-folder
  # https://stackoverflow.com/q/3119850/is-there-a-way-to-reduce-the-size-of-the-git-folder
  # https://web.archive.org/web/20190207210108
  # http://stevelorek.com/how-to-shrink-a-git-repository.html
  # TODO: Check if ran with git gc
  git repack -a -d --depth=250 --window=250
  git reflog expire --expire=now --all
  time git gc --aggressive --prune=now

  git remote prune origin
} # git_clean

# }}}

# =========================================================================
# {{{ iNodes
#   - https://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/ExtendedAttributes.html
# =========================================================================
# https://en.wikipedia.org/wiki/File_(command)
# https://man7.org/linux/man-pages/man1/file.1.html
alias file='command file --mime --mime-type --extension'
function exist () {
  local -r location="$1"

  test -e "$location" \
    || ( echo "No such file, or directory: $location" && return 2 )
} # exist

# https://howtogeek.com/451022/how-to-use-the-stat-command-on-linux
function about () {
  local location="${1}"

  exist "$location" || return $?

  echo ; df -a -h "$@"
  echo ; df -a -i "$@"
  echo ; stat "$@"
} # about

function inspect () { clear
  local -r file=$( realpath "$1" )

  exist "$file" || return $?

  printf "\n\nInspecing: %s" "$file"
  printf '\nTODO: implement inspect ()'
} # inspect

function probe () { clear
  local -r location=$( realpath "${1:-.}" )

  printf '\n location 👉 %s \n' "$location"

  # - https://dev.yorhel.nl/ncdu/man
  [ -d "$location" ] && \
    ncdu -2 -r -e --color=dark-bg \
      --exclude={.gnupg,.ssh} \
    -- "$location"

  weigh "$location"
} # probe

function weigh () {
  local -r location=$( realpath "${1:-.}" )

  exist "$location" || return $?

  # https://geeksforgeeks.org/du-command-linux
  # https://redhat.com/sysadmin/du-command-options
  du --summarize --total --time --human-readable \
      --exclude={.gnupg,.ssh} \
    -- "$location"

  # https://redhat.com/sysadmin/linux-df-command
  # https://geeksforgeeks.org/df-command-in-linux-with-examples
  echo ; df -a -h "$location"
  echo ; df -a -i "$location"
} # weigh

function search () { clear
  local -r term="$1"
  local -r location=$( realpath "${2:-.}" )

  echo ; echo Searching... 🔎 "$term"
  echo Location 👉 "$location"

  echo ; echo Greping...
  grep --devices=skip "$term" "$location"

  echo ; echo Finding...
  command find "$location" -type f -iname "*${term}*" \
    | lines

  echo ; apropos $term # man -k

  echo ; echo DONE!
} # search

# Syntax checkers
#   - https://github.com/vim-syntastic/syntastic/tree/master/syntax_checkers
function check () {
  echo Checking "$*"

  for script in "$@"; do
    echo ; echo " 🎯 $( realpath "$script" )"
    exist "$( realpath "$script" )" || continue

    case "$script" in
      *.html )
        command tidy "$script" ;;
      *nginx.conf )
        command nginx -T -c "$( realpath "$script" )" ;;
      *lighttpd.conf )
        command lighttpd -t -f "$( realpath "$script" )" ;;
      *httpd.conf )
        command apachectl configtest -f "$( realpath "$script" )" ;;
      .bash* | *.sh )
        command shellcheck --format=tty "$( realpath "$script" )" ;;
      *.tar* )
      ;;
      * ) # Check integrity Attestation
        ( echo && echo Checking sha512 \
          && exist "${script}.sha512" && sha512sum --check "${script}.sha512" ) \
        || ( echo && echo Checking sha256 \
          && exist "${script}.sha256" && sha256sum --check "${script}.sha256" ) \
        || ( echo && echo Checking MD5 \
          && exist "${script}.md5" && md5sum --check "${script}.md5" ) \
        || echo "  🛑 Cannot check ${script}"
      ;;
    esac # $script
  done # for $script
} # check

# }}}

# =========================================================================
# {{{ Jobs
# =========================================================================
alias ps='command ps auxf' # https://tecmint.com/ps-command-examples-for-linux-process-monitoring
# https://stackoverflow.com/q/35026395/bash-what-is-a-jobspec
alias cron='man crontab ; man cronnext ; man crond ; ' # https://crontab.guru
alias job='command jobs -l' # termux-job-scheduler - https://github.com/termux/termux-api/issues/282
alias jobs='command jobs -l' # termux-job-scheduler - https://github.com/termux/termux-api/issues/282

function work () {
  echo working
} # jobs

# }}}

# =========================================================================
# {{{ Cryptography
#   - https://antofthy.gitlab.io/info/crypto
#   - https://madboa.com/geek/openssl
#   - https://en.m.wikipedia.org/wiki/List_of_hash_functions
#   - urandom vs random - https://thomas-huehn.com/myths-about-urandom
# =========================================================================
# https://stackoverflow.com/q/42004870
# https://en.wikipedia.org/wiki/Random_number_generation
alias rand='echo $RANDOM' # 16-bit ( deterministic 0-32767 )
# https://stackoverflow.com/q/65523749
alias random='echo $SRANDOM' # 32-bit ( non-deterministic )

# https://en.m.wikipedia.org/wiki/Prime_number
alias prime='openssl prime -generate -bits 64'

# https://serverfault.com/q/283294/how-to-read-in-n-random-characters-from-dev-urandom
alias randchars='{
  tr --delete --complement "[:alnum:]" < /dev/urandom \
    | head -c 32 ;
}' # randchars

# https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case
# https://gnu.org/software/gawk/manual/html_node/Bracket-Expressions.html
# https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html
# https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions
function slug () {
  printf "$1" \
    | sed 's/[[:space:]]/-/g' \
    | tr '[:upper:]' '[:lower:]' \
    | tr -dc '[:alnum:]-'
  echo
}

# https://geeksforgeeks.org/od-command-linux-example
alias uid='od -vAn -N4 -tu4 < /dev/urandom' # 4byte u(nsigned)
# - https://baeldung.com/linux/bash-generate-uuid
# - https://man7.org/linux/man-pages/man1/uuidgen.1.html
# - https://stackoverflow.com/q/20342058/which-uuid-version-to-use
alias uuid='uuidgen --random' # cat /proc/sys/kernel/random/uuid
alias toke='dd bs=256 count=1 status=none if=/dev/urandom | sha256sum | command cut -d " " -f1'
alias token='dd bs=512 count=1 status=none if=/dev/urandom | sha512sum | command cut -d " " -f1'

# https://en.wikipedia.org/wiki/Snowflake_ID
# https://reddit.com/r/programming/comments/cajap/twitter_announces_snowflake_a_distributed_unique
function snowflake () {
  local -r id=${1:12345}
  local -r epoch=1288834974657
  local -r tick=$(($(($((id>>22)) + $epoch)) / 1000))

  # TODO: FIx output
  command date -d @$tick

  echo TODO: Fix Snowflake algorithm
  open https://en.wikipedia.org/wiki/Snowflake_ID
} # snowflake

# https://en.wikipedia.org/wiki/Cryptographic_nonce
# https://crypto.stackexchange.com/q/50782
# Initialization Vector is size of block (16bytes)
# https://en.m.wikipedia.org/wiki/Initialization_vector
# https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/nonce
alias nonce='{ printf `randchars` \
  | head -c 16 \
  |  base64
}' # nonce

# Date nonce with epoch seconds & nanoseconds (billionths)
alias donce="{
  echo ; echo 'SHA512 SUM (sha512sum):'
  command date +%s%N | sha512sum | command cut -d' ' -f 1 ;
  echo ; echo 'SHA256 SUM (sha256sum):'
  command date +%s%N | sha256sum | command cut -d' ' -f 1 ;
  echo ; echo 'MD5 SUM (md5sum):'
  command date +%s%N | md5sum | command cut -d' ' -f 1 ;
  echo ; echo 'BASE 64 (base64):'
  command date +%s%N | command base64;
  echo ; echo 'OPENSSL BASE 64 (openssl base64):'
  command date +%s%N | command openssl base64;
  echo
}" # donce

# https://en.wikipedia.org/wiki/Salt_(cryptography)
export SALT='12345678abcdefgh' # TODO: generate SALT

# https://geeksforgeeks.org/hash-command-in-linux-with-examples
alias hash='hash --help; hash'

alias substitute='$( open https://en.wikipedia.org/wiki/Substitution_cipher )'

# https://linux.die.net/man/1/xxd
alias hex='xxd -u'

# https://geeksforgeeks.org/linux-unix/od-command-linux-example
alias octal='od'

alias binary='xxd -u -b'

# see check ()
# https://en.wikipedia.org/wiki/Cyclic_code
# https://en.wikipedia.org/wiki/Cyclic_redundancy_check
# https://a2hosting.com/kb/developer-corner/linux/working-with-file-checksums
function checksum () {
  local -r hash='md5'
# local -r hash='sha256'
# local -r hash='sha512'
  local -r file=$( realpath "$1" )

  exist "$file" || return $?

  # https://en.wikipedia.org/wiki/Cksum
  echo "CkSum (base10):"
  cksum "$file"

  echo; echo "Checksum ($hash):"
  "${hash}sum" "$file" | tee "$file.$hash"
  echo Created "${file}.${hash}"
  echo
} # checksum

# https://antofthy.gitlab.io/info/crypto/cyphers.txt
# $1$ - MD5
# $2a/b/x/y$ - B(lowfish)crypt
# $sha1$ - B(lowfish)crypt
# $5$ - SHA-256
# $6$ - SHA-512
# https://en.wikipedia.org/wiki/Cipher
# https://github.com/openssl/openssl/issues/18075
alias ciphers='command openssl enc -list'
# alias ciphers='command openssl list -cipher-commands' # -cipher-algorithms
# https://datatracker.ietf.org/doc/html/rfc2104
# https://asecuritysite.com/encryption/passes
# https://en.wikipedia.org/wiki/Key_derivation_function
# https://en.wikipedia.org/wiki/Cryptographic_hash_function
# https://antofthy.gitlab.io/info/crypto/passwd_hashing.txt
function cipher () {
  local length=32 # 24
  local memory=65536 # 64MiB
  local iterations=3
  local phrase="${1}"

  echo ; echo "KDF (Key Derivation Functions): "

  echo ; echo Ciphers: ; ciphers

  [ -z "$phrase" ] && return

  # https://rfc-editor.org/rfc/rfc9106
  # https://github.com/openssl/openssl/pull/12256
  # https://crypto.stackexchange.com/questions/72416
  # https://unix.stackexchange.com/q/574667/argon2-commands-in-the-terminal
  echo ; echo "ARGON2i (argon2 -i): "
  printf "$phrase" | argon2 $SALT -i -t $iterations -k $memory -l $length
  echo "ARGON2i (openssl kdf ARGON2I): "
  openssl kdf -keylen $length -kdfopt pass:"$phrase" -kdfopt salt:$SALT \
    -kdfopt iter:$iterations -kdfopt memcost:$memory ARGON2I
  echo ; echo "ARGON2d (argon2 -d): "
  printf "$phrase" | argon2 $SALT -d -t $iterations -k $memory -l $length
  echo "ARGON2d (openssl kdf ARGON2D): "
  openssl kdf -keylen $length -kdfopt pass:"$phrase" -kdfopt salt:$SALT \
    -kdfopt iter:$iterations -kdfopt memcost:$memory ARGON2D
  echo ; echo "ARGON2id (argon2 -id): "
  printf "$phrase" | argon2 $SALT -id -t $iterations -k $memory -l $length
  echo "ARGON2id (openssl kdf ARGON2ID): "
  openssl kdf -keylen $length -kdfopt pass:"$phrase" -kdfopt salt:$SALT \
    -kdfopt iter:$iterations -kdfopt memcost:$memory ARGON2ID

  # https://en.wikipedia.org/wiki/Bcrypt
  # https://en.wikipedia.org/wiki/Blowfish_(cipher)
  # https://httpd.apache.org/docs/current/programs/htpasswd.html
  local  bcrypt="$( htpasswd -nbBC 12 '' "$phrase" | tr -d ':' | sed 's/\$2[abxy]\$/$2a$/g' )"
  local bresult=${bcrypt##*$}
  echo "BCRYPT SALT: ${bresult:0:22}"
  echo "BCRYPT HASH: ${bresult:22}"
  echo "BCRYPT: $bcrypt"

  # https://github.com/Tarsnap/scrypt
  # https://en.wikipedia.org/wiki/Scrypt
  # https://datatracker.ietf.org/doc/html/rfc7914
  echo ; printf "SCRYPT: \n"
  scrypt enc --passphrase env:SALT <( printf "$phrase" )

  # https://en.wikipedia.org/wiki/PBKDF2
  echo ; echo ; echo "PBKDF2: "
  # need 600K iters. to be secure
  openssl kdf \
    -keylen $length \
    -kdfopt iter:600000 \
    -kdfopt salt:"$SALT" \
    -kdfopt digest:sha256 \
    -kdfopt pass:"$phrase" \
  PBKDF2

  # https://en.wikipedia.org/wiki/HKDF
  # https://rfc-editor.org/rfc/rfc5869.html
  echo  "HKDF ($length): "
  openssl kdf \
    -keylen $length \
    -kdfopt salt:"$SALT" \
    -kdfopt key:"$phrase" \
    -kdfopt digest:blake2b512 \
  HKDF
} # cipher

# https://linux.die.net/man/1/mkpasswd
function digest () {
  local phrase="${1}"

  echo ; echo Digests:
  command openssl list -digest-commands # -digest-algorithms

  [ -z "$phrase" ] &&  return

  echo ; printf "DES: %s\n" \
    $( mkpasswd -m descrypt -S ${SALT:0:2} "$phrase" )

  echo  # https://en.m.wikipedia.org/wiki/MD5
  printf "MD5 (md5sum): %s\n" \
    $( printf "$phrase" | md5sum | command cut -d' ' -f1 )
  printf "MD5 (mkpasswd -m md5crypt): %s\n" \
    $( mkpasswd -m md5crypt "$phrase" )
  printf "MD5 w/ SALT (mkpasswd -m md5crypt -S): %s\n" \
    $( mkpasswd -m md5crypt -S ${SALT:0:8} "$phrase" )
  printf "MD5 (mkpasswd -m MD5): %s\n" \
    $( mkpasswd -m MD5 "$phrase" )
  printf "MD5 w/ SALT (mkpasswd -m MD5 -S): %s\n" \
    $( mkpasswd -m MD5 -S ${SALT:0:8} "$phrase" )
  printf "MD5 (Apache) (openssl passwd -apr1): %s\n" \
    $( openssl passwd -apr1 "$phrase" )
  printf "MD5 w/ SALT (Apache) (openssl passwd -apr1 -salt): %s\n" \
    $( openssl passwd -apr1 -salt ${SALT:0:8} "$phrase" )
  printf "MD5 (AIX) (openssl passwd -aixmd5): %s\n" \
    $( openssl passwd -aixmd5 "$phrase" )
  printf "MD5 w/ SALT (AIX) (openssl passwd -aixmd5 -salt): %s\n" \
    $( openssl passwd -aixmd5 -salt ${SALT:0:8} "$phrase" )
  printf "MD5 (shadow-style) (openssl passwd -1): %s\n" \
    $( openssl passwd -1 "$phrase" )
  printf "MD5 w/ SALT (shadow-style) (openssl passwd -1 -salt): %s\n" \
    $( openssl passwd -1 -salt ${SALT:0:8} "$phrase" )
  printf "MD5 (openssl dgst -md5): %s\n" \
    $( openssl dgst -md5 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "MD5 (openssl md5): %s\n" \
    $( openssl md5 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "MD5 (openssl md5 -c): %s\n" \
    $( openssl md5 -c <( printf "$phrase" ) | command cut -d' ' -f2 )
  # https://en.m.wikipedia.org/wiki/HMAC
  printf "MD5 HMAC w/ SALT (openssl dgst -md5 -hmac): %s\n" \
    $( openssl dgst -md5 -hmac ${SALT:0:8} <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "MD5 HMAC w/ SALT (openssl md5 -hmac): %s\n" \
    $( openssl md5 -hmac ${SALT:0:8} <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "MD5 HMAC w/ SALT (openssl md5 -c -hmac): %s\n" \
    $( openssl md5 -c -hmac ${SALT:0:8} <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo # https://en.wikipedia.org/wiki/SHA-1
  printf "SHA-1 (sha1sum): %s\n" \
    $( printf "$phrase" | sha1sum | command cut -d' ' -f1 )
  printf "SHA-1 (openssl dgst -sha1): %s\n" \
    $( openssl dgst -sha1 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-1 (openssl sha1): %s\n" \
    $( openssl sha1 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-1 (openssl sha1 -c): %s\n" \
    $( openssl sha1 -c <( printf "$phrase" ) | command cut -d' ' -f2 )
  # https://en.m.wikipedia.org/wiki/HMAC
  printf "SHA-1 (openssl dgst -sha1 -hmac): %s\n" \
    $( openssl dgst -sha1 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-1 (openssl sha256 -hmac): %s\n" \
    $( openssl sha1 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-1 (openssl sha256 -c -hmac): %s\n" \
    $( openssl sha1 -c -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA-2: # https://en.wikipedia.org/wiki/SHA-2

  echo ; echo SHA2/224
  printf "SHA-224 (sha224sum): %s\n" \
    $( printf "$phrase" | sha224sum | command cut -d' ' -f1 )
  printf "SHA-224 (openssl dgst -sha224): %s\n" \
    $( openssl dgst -sha224 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-224 (openssl sha224): %s\n" \
    $( openssl sha224 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-224 (openssl sha224 -c): %s\n" \
    $( openssl sha224 -c <( printf "$phrase" ) | command cut -d' ' -f2 )
  # https://en.m.wikipedia.org/wiki/HMAC
  printf "SHA-224 (openssl dgst -sha224 -hmac): %s\n" \
    $( openssl dgst -sha224 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-224 (openssl sha224 -hmac): %s\n" \
    $( openssl sha224 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-224 (openssl sha224 -c -hmac): %s\n" \
    $( openssl sha224 -c -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA2/256: # https://en.wikipedia.org/wiki/SHA-256
  printf "SHA-256 (sha256sum): %s\n" \
    $( printf "$phrase" | sha256sum | command cut -d' ' -f1 )
  printf "SHA-256 (openssl passwd -5): %s\n" \
    $( openssl passwd -5 "$phrase" )
  printf "SHA-256 (openssl passwd -5 -salt): %s\n" \
    $( openssl passwd -5 -salt $SALT "$phrase" )
  printf "SHA-256 (openssl dgst -sha256): %s\n" \
    $( openssl dgst -sha256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-256 (openssl sha256): %s\n" \
    $( openssl sha256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-256 (openssl sha256 -c): %s\n" \
    $( openssl sha256 -c <( printf "$phrase" ) | command cut -d' ' -f2 )
  # https://en.m.wikipedia.org/wiki/HMAC
  printf "SHA-256 (openssl dgst -sha256 -hmac): %s\n" \
    $( openssl dgst -sha256 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-256 (openssl sha256 -hmac): %s\n" \
    $( openssl sha256 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-256 (openssl sha256 -c -hmac): %s\n" \
    $( openssl sha256 -c -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA2/384
  printf "SHA-384 (sha384sum): %s\n" \
    $( printf "$phrase" | sha384sum | command cut -d' ' -f1 )
  printf "SHA-384 (openssl dgst -sha384): %s\n" \
    $( openssl dgst -sha384 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-384 (openssl sha384): %s\n" \
    $( openssl sha384 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-384 (openssl sha384 -c): %s\n" \
    $( openssl sha384 -c <( printf "$phrase" ) | command cut -d' ' -f2 )
  # https://en.m.wikipedia.org/wiki/HMAC
  printf "SHA-384 (openssl dgst -sha384 -hmac): %s\n" \
    $( openssl dgst -sha384 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-384 (openssl sha384 -hmac): %s\n" \
    $( openssl sha384 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-384 (openssl sha384 -c -hmac): %s\n" \
    $( openssl sha384 -c -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA2/512: # https://en.wikipedia.org/wiki/SHA-512
  printf "SHA-512 (sha512sum): %s\n" \
    $( printf "$phrase" | sha512sum | command cut -d' ' -f1 )
  printf "SHA-512 (openssl passwd -6): %s\n" \
    $( openssl passwd -6 "$phrase" )
  printf "SHA-512 (openssl passwd -6 -salt): %s\n" \
    $( openssl passwd -6 -salt $SALT "$phrase" )
  printf "SHA-512 (openssl dgst -sha512): %s\n" \
    $( openssl dgst -sha512 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-512 (openssl sha512): %s\n" \
    $( openssl sha512 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-512 (openssl sha512 -c): %s\n" \
    $( openssl sha512 -c <( printf "$phrase" ) | command cut -d' ' -f2 )
  # https://en.m.wikipedia.org/wiki/HMAC
  printf "SHA-512 (openssl dgst -sha512 -hmac): %s\n" \
    $( openssl dgst -sha512 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-512 (openssl sha512 -hmac): %s\n" \
    $( openssl sha512 -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA-512 (openssl sha512 -c -hmac): %s\n" \
    $( openssl sha512 -c -hmac $SALT <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA512/224:
  printf "SHA512-224 (openssl dgst -sha512-224): %s\n" \
    $( openssl dgst -sha512-224 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA512-224 (openssl sha512-224): %s\n" \
    $( openssl sha512-224 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA512-224 (openssl sha512-224 -c): %s\n" \
    $( openssl sha512-224 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA512/256:
  printf "SHA512-256 (openssl dgst -sha512-256): %s\n" \
    $( openssl dgst -sha512-256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA512-256 (openssl sha512-256): %s\n" \
    $( openssl sha512-256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA512-256 (openssl sha512-256 -c): %s\n" \
    $( openssl sha512-256 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  # https://en.wikipedia.org/wiki/SHA-3
  echo ; echo SHA3/224:
  printf "SHA3-224 (sha3sum -a 224): %s\n" \
    $( printf "$phrase" | busybox sha3sum -a 224 | command cut -d' ' -f1 )
  printf "SHA3-224 (openssl dgst -sha3-224): %s\n" \
    $( openssl dgst -sha3-224 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-224 (openssl sha3-224): %s\n" \
    $( openssl sha3-224 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-224 (openssl sha3-224 -c): %s\n" \
    $( openssl sha3-224 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA3/256:
  printf "SHA3-256 (sha3sum -a 256): %s\n" \
    $( printf "$phrase" | busybox sha3sum -a 256 | command cut -d' ' -f1 )
  printf "SHA3-256 (openssl dgst -sha3-256): %s\n" \
    $( openssl dgst -sha3-256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-256 (openssl sha3-256): %s\n" \
    $( openssl sha3-256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-256 (openssl sha3-256 -c): %s\n" \
    $( openssl sha3-256 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA3/384
  printf "SHA3-384 (sha3sum -a 384): %s\n" \
    $( printf "$phrase" | busybox sha3sum -a 384 | command cut -d' ' -f1 )
  printf "SHA3-384 (openssl dgst -sha3-384): %s\n" \
    $( openssl dgst -sha3-384 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-384 (openssl sha3-384): %s\n" \
    $( openssl sha3-384 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-384 (openssl sha3-384 -c): %s\n" \
    $( openssl sha3-384 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHA3/512
  printf "SHA3-384 (sha3sum -a 512): %s\n" \
    $( printf "$phrase" | busybox sha3sum -a 512 | command cut -d' ' -f1 )
  printf "SHA3-512 (openssl dgst -sha3-512): %s\n" \
    $( openssl dgst -sha3-512 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-512 (openssl sha3-512): %s\n" \
    $( openssl sha3-512 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHA3-512 (openssl sha3-512 -c): %s\n" \
    $( openssl sha3-512 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHAKE128
  printf "SHAKE128 (openssl dgst -shake128): %s\n" \
    $( openssl dgst -shake128 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHAKE128 (openssl shake128): %s\n" \
    $( openssl shake128 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHAKE128 (openssl shake128 -c): %s\n" \
    $( openssl shake128 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo ; echo SHAKE256
  printf "SHAKE256 (openssl dgst -shake256): %s\n" \
    $( openssl dgst -shake256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHAKE256 (openssl shake256): %s\n" \
    $( openssl shake256 <( printf "$phrase" ) | command cut -d' ' -f2 )
  printf "SHAKE256 (openssl shake256 -c): %s\n" \
    $( openssl shake256 -c <( printf "$phrase" ) | command cut -d' ' -f2 )

  echo

} # digest

function encode () { # base2lsbf | base2msbf| base32 | base32hex | base64 | base64url
  local -r file="$1"

  echo ; echo 'Base32'
  echo '(basenc --base32):'
  basenc --base32 <( [ -e $( readlink -f "$file" ) ] && cat $file || printf "$file" )
  [ -e $( readlink -f "$file" ) ] && basenc --base32 $file > "${file}.base32"

  echo ; echo 'Base64'
  echo '(basenc --base64):'
  basenc --base64 <( [ -e $( readlink -f "$file" ) ] && cat $file || printf "$file" )
  echo ; echo '(openssl enc --base64):'
  openssl enc -base64 -in <( [ -e $( readlink -f "$file" ) ] && cat $file || printf "$file" )
  [ -e $( readlink -f "$file" ) ] && basenc --base64 $file > "${file}.base64"

} # encode

function decode () { # base2lsbf | base2msbf| base32 | base32hex | base64 | base64url
  local -r file="$1"

  echo ; echo 'Base32'
  echo '(basenc --decode --base32):'
  basenc --decode --base32 <( [ -e $( readlink -f "$file" ) ] && cat $file || printf "$file" )

  echo ; echo 'Base64'
  echo '(basenc --decode --base64):'
  basenc --decode --base64 <( [ -e $( readlink -f "$file" ) ] && cat $file || printf "$file" )
  echo ; echo '(openssl enc -d --base64):'
  openssl enc -d -base64 -in <( [ -e $( readlink -f "$file" ) ] && cat $file || printf "$file" )

} # decode

# https://gnupg.org
# https://bashupload.com/how_to_encrypt_files
# https://antofthy.gitlab.io/info/crypto/encfs.txt
# https://antofthy.gitlab.io/info/crypto/file_encrypt.txt
# https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
function encrypt () {
  local -r salt="-S ${SALT}"
  local -r count=1000000
  local -r digest="sha512"
  local -r pbkdf2="-pbkdf2"
  local -r file=$( readlink -f "${1}" )
  local -r password="-pass pass:devpunks"  # "-stdin"

  exist "$file"  || return $?

  echo ; echo 'AES (128|192|256)'
  local scheme='-aes-128-cbc'
  echo "$scheme encrypt $file :"
  openssl enc $scheme $salt $pbkdf2 -md $digest -iter $count $password \
    < "$file" > "${file}.aes128.bin"
  openssl enc $scheme -base64 $salt $pbkdf2 -md $digest -iter $count $password \
    < "$file" > "${file}.aes128.enc"

  local scheme='-aes-192-cbc'
  echo "$scheme encrypt $file :"
  openssl enc $scheme $salt $pbkdf2 -md $digest -iter $count $password \
    < "$file" > "${file}.aes192.bin"
  openssl enc $scheme -base64 $salt $pbkdf2 -md $digest -iter $count $password \
    < "$file" > "${file}.aes192.enc"

  local scheme='-aes-256-cbc'
  echo "$scheme encrypt $file :"
  openssl enc $scheme $salt $pbkdf2 -md $digest -iter $count $password \
    < "$file" > "${file}.aes256.bin"
  openssl enc $scheme -base64 $salt $pbkdf2 -md $digest -iter $count $password \
    < "$file" > "${file}.aes256.enc"

  echo ; echo 'GPG-AES-CFB (128|192|256)'
  local scheme='AES128'
  echo "GPG-${scheme}-CFB encrypt $file :"
  gpg --sign -c -o "${file}.gpg128.enc" --cipher-algo=$scheme < "$file"

  local scheme='AES192'
  echo "GPG-${scheme}-CFB encrypt $file :"
  gpg --sign -c -o "${file}.gpg192.enc" --cipher-algo=$scheme < "$file"

  local scheme='AES256'
  echo "GPG-${scheme}-CFB encrypt $file :"
  gpg --sign -c -o "${file}.gpg256.enc" --cipher-algo=$scheme < "$file"

  echo "TODO: S/MIME encrypt mail message $file :"
  # https://madboa.com/geek/openssl/#smime

} # encrypt

# NMS (No More Secrets) - https://github.com/bartobri/no-more-secrets
alias nms='command nms -a -c -f magenta'
function decrypt () {
  local -r file="${1}"
  local -r output="${file%.*}"

  echo GPG decrypt "$file" :

  command gpg -o - < "$file"
} # decrypt

# https://grc.com/haystack.htm
# https://antofthy.gitlab.io/info/crypto/passwd_generation.txt
# https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
function passgen () { clear
  # Correct Horse Battery Staple - https://xkcd.com/936/
  local pwd=${1:-`randchars`}

  echo PASSWORD: $pwd
  echo DOMAIN: $pwd

  digest $pwd
  cipher $pwd
} # passgen

# https://antofthy.gitlab.io/info/crypto/passwd_obfuscation.txt
# $$$ https://antofthy.gitlab.io/info/crypto/public_keys_openssl.txt
# https://blog.oddbit.com/post/2011-05-08-converting-openssh-public-keys
# https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html
# https://security.stackexchange.com/q/20706/what-is-the-difference-between-authorized-keys-and-known-hosts-file-for-ssh
alias keys='{ banner
  # https://stackoverflow.com/q/12749858/rsa-public-key-format
  echo "Keyscan of ~/.ssh/known_hosts"
  echo ; ssh-keyscan -v -f ~/.ssh/known_hosts
  echo ; ssh-keygen -lv -f ~/.ssh/known_hosts

  echo ; echo /etc/ssh/ ; ls -al ${PREFIX}/etc/ssh
  echo ; echo /etc/ssh/ssh_host_ed25519_key ; cat ${PREFIX}/etc/ssh/ssh_host_ed25519_key
  echo ; echo /etc/ssh/ssh_host_ed25519_key.pub ; cat ${PREFIX}/etc/ssh/ssh_host_ed25519_key.pub
  echo ; echo /etc/ssh/ssh_host_ecdsa_key ; cat ${PREFIX}/etc/ssh/ssh_host_ecdsa_key
  echo ; echo /etc/ssh/ssh_host_ecdsa_key.pub ; cat ${PREFIX}/etc/ssh/ssh_host_ecdsa_key.pub
  echo ; echo /etc/ssh/ssh_host_rsa_key ; cat ${PREFIX}/etc/ssh/ssh_host_rsa_key
  echo ; echo /etc/ssh/ssh_host_rsa_key.pub ; cat ${PREFIX}/etc/ssh/ssh_host_rsa_key.pub
  echo ; echo /etc/ssh/ssh_host_dsa_key ; cat ${PREFIX}/etc/ssh/ssh_host_dsa_key
  echo ; echo /etc/ssh/ssh_host_dsa_key.pub ; cat ${PREFIX}/etc/ssh/ssh_host_dsa_key.pub

  echo; echo ~/.ssh ; ls -al ~/.ssh
  echo ; echo ~/.ssh/id_ed25519 ; cat ~/.ssh/id_ed25519
  echo ; echo ~/.ssh/id_ed25519.pub ; cat ~/.ssh/id_ed25519.pub
  echo ; echo ~/.ssh/id_ecdsa ; cat ~/.ssh/id_ecdsa
  echo ; echo ~/.ssh/id_ecdsa.pub ; cat ~/.ssh/id_ecdsa.pub
  echo ; echo ~/.ssh/id_rsa ; cat ~/.ssh/id_rsa
  echo ; echo ~/.ssh/id_rsa.pub ; cat ~/.ssh/id_rsa.pub

  echo ; echo authorized_keys ; cat ~/.ssh/authorized_keys
  echo ; ssh-keygen -lv -f ~/.ssh/authorized_keys

  echo ; echo "Added keys (to ssh-agent)" ; ssh-add -l

  for key in *.pem; do
    echo ; echo "extracting Public Key from ${key}:"
    openssl pkey -in ${key} -text -noout
  done

  for key in *.pem; do
    echo ; echo "extracting Public Key from ${key}:"
    openssl pkey -in ${key} -text -noout
  done

  signatures
}' # keys

function keygen () {
  let algorithm bits
  let outform=PEM # PEM | DER
# command ssh-keygen -t ed25519 -b 4096 -C "devPunks mobile key" ;
# command ssh-keygen -C "devPunks mobile key" -e -f ed25519 -m pem > ed25519.pem.pub ;

  # https://sandilands.info/sgordon/diffie-hellman-secret-key-exchange-with-openssl
  echo ; echo "Creating OpenSSL Diffie Hellman dh-dsa-2048.params (openssl dhparam -dsaparam 2048):"
  openssl dhparam -dsaparam -out dh-dsa-2048.params 2048

  echo ; echo "Creating OpenSSL Diffie Hellman dh-dsa-4096.params (openssl dhparam -dsaparam 4096):"
  openssl dhparam -dsaparam -out dh-dsa-4096.params 4096

  algorithm=ed25519
  echo ; echo "Creating OpenSSL Key ${algorithm}.key (openssl genpkey -algorithm ${algorithm}):"
  echo ; echo "Generating ${algorithm} PKCS#8 Private Key ${algorithm}.key"
  openssl genpkey -algorithm ${algorithm} -outform PEM -out ${algorithm}.key

  echo "Extracting OpenSSL Public Key ${algorithm}.pub (openssl pkey -in ${algorithm}.key -pubout):"
  openssl pkey -in ${algorithm}.key -pubout -out ${algorithm}.pub
  openssl pkey -in ${algorithm}.key -text -pubout

  bits=2048
  algorithm=rsa
  echo ; echo "Generating ${algorithm} PKCS#8 ${bits}-bit Private Key ${algorithm}-${bits}.key"
  openssl genpkey \
    -algorithm ${algorithm} -pkeyopt rsa_keygen_bits:${bits} \
    -outform PEM -out ${algorithm}-${bits}.key

  echo "Extracting OpenSSL Public Key ${algorithm}-${bits}.pub (openssl pkey -in ${algorithm}-${bits}.key -pubout):"
  openssl pkey -in ${algorithm}-${bits}.key -pubout -out ${algorithm}-${bits}.pub
  openssl pkey -in ${algorithm}-${bits}.key -text -pubout

  bits=4096
  echo ; echo "Generating ${algorithm} PKCS#8 ${bits}-bit Private Key ${algorithm}-${bits}.key"
  openssl genpkey \
    -algorithm ${algorithm} -pkeyopt rsa_keygen_bits:${bits} \
    -outform PEM -out ${algorithm}-${bits}.key

  echo "Extracting OpenSSL Public Key ${algorithm}-${bits}.pub (openssl pkey -in ${algorithm}-${bits}.key -pubout):"
  openssl pkey -in ${algorithm}-${bits}.key -pubout -out ${algorithm}-${bits}.pub
  openssl pkey -in ${algorithm}-${bits}.key -text -pubout
} # keygen

# https://antofthy.gitlab.io/info/crypto/public_keys_gpg.txt
# https://gist.github.com/Killeroid/6361944d0694e474fb94cc42a3b119d1
alias signatures='{
  echo ; echo "~/.gnupg" ; ls -al ~/.gnupg
  echo ; command gpg --list-keys
  echo ; command gpg --list-secret-keys
  echo ; command gpg --check-signatures
}' # signatures

function sign () {
  local file="$( realpath $1 )"
  local pem="${HOME}/.ssh/privatekey.pem"

# openssl genrsa -aes256 -out "$pem" 2048
# openssl rsa -in "${pem}" -out "${pem}.key"

  exist "$pem" || return $?
  exist "$file" || return $?

  echo "Cryptographically Signing > $file with PRIVATE $pem ..."
  # ssh-keygen -V # sign/verify certificate

  openssl sha256 -sign "$pem" -out "${file}.signature" "$file"
} # sign

function verify () {
  local file="$( realpath $1 )"
  local pem="${HOME}/.ssh/privatekey.pem"

  openssl rsa -in "$pem" -outform PEM -pubout -out "${pem}.pub"

  exist "$pem" || return $?
  exist "$file" || return $?
  exist "${pem}.pub" || return $?
  exist "${file}.signature" || return $?

  openssl req -in $certificate -verify -key $key
  openssl rsa -in "$pem" -outform PEM -pubout -out "${pem}.pub"
  openssl sha256 -verify "${pem}.pub" -signature "${file}.signature" "$file"

  echo "Cryptographically Verifying > $file with $pem ..."
} # verify

# https://en.wikipedia.org/wiki/X.509
alias certificates='{
  # ssh-keygen -L # prints contents of certificate
  echo Requests:
  for request in *.csr; do
    echo; echo "PKCS#10 CSR ${request}"
    openssl req -text -in ${request} -noout
    cat ${request}
  done ; echo

  echo Certificates:
  for certificate in *.cert; do
    echo; echo "Certificate ${certificate}"
    openssl x509 -text -in ${certificate} -noout
    cat ${certificate}
  done ; echo
}' # certificates

# - https://superuser.com/q/1007842
# - https://stackoverflow.com/q/10175812
# - https://en.m.wikipedia.org/wiki/Public_key_certificate
# - https://en.m.wikipedia.org/wiki/Transport_Layer_Security
# - https://gist.github.com/briansmith/2ee42439923d8e65a266994d0f70180b
# - https://letsencrypt.org/docs/certificates-for-localhost/#making-and-trusting-your-own-certificates
function certify () { clear # Certificate Authority
  local algorithm bits curve
  local -r days=365
  local -r IP='127.0.0.1'
  local -r domain="${1:-devpunks.studio}"
  local -r basic='basicConstraints=critical, CA:TRUE'
  # S/MIME - emailProtection
  # Non-CA - serverAuth, clientAuth
  # VPN Client - serverAuth, clientAuth
  local -r extended='extendedKeyUsage=serverAuth, clientAuth' # CA
  # https://superuser.com/q/738612/openssl-ca-keyusage-extension
  # VPN Client - digitalSignature, keyEncipherment
  # Non-CA - digitalSignature, keyEncipherment, keyAgreement
  local -r usage='keyUsage=digitalSignature,cRLSign,keyCertSign' # CA
  local -r extensions="subjectAltName=DNS:${domain}, DNS:*.${domain}, IP:${IP}"
  local -r subject="/O=DEVPUNKS LLC/C=US/ST=New\ Jersey/L=Jersey\ City/CN=${domain}"

  # - https://stackoverflow.com/q/11992036
  # - https://datatracker.ietf.org/doc/rfc4492
  # - https://datatracker.ietf.org/doc/rfc5480
  echo ; echo "ECDSA (Elliptic Curve Digital Signature Algorithms):"
  openssl ecparam -list_curves

  curve=prime256v1 # P-256
  # - https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations
  # - https://en.m.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm
  echo ; echo "Generating ECC [${curve}] Private Key ${domain}.ecc-${curve}.pem"
  openssl ecparam -genkey -name ${curve} -out ${domain}.ecc-${curve}.pem

  echo ; echo "Generating ECC [${curve}] Public Key ${domain}.ecc-${curve}.pub"
  openssl ec -pubout -outform PEM \
    -in ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.pub

  echo; echo "Generating ECC [${curve}] PKCS#10 CSR (Certificate Signing Request) ${domain}.ecc-${curve}.csr"
  openssl req -new -sha256 \
    -key ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ECC [${curve}] X.509 Certificate ${domain}.ecc-${curve}.cert"
  openssl x509 -req -days 365 -copy_extensions copyall \
    -in ${domain}.ecc-${curve}.csr -signkey ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.cert

  echo; echo "Exporting PKCS#12 [${curve}] chain (${domain}.ecc-${curve}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.ecc-${curve}.pem \
    -in ${domain}.ecc-${curve}.cert \
    -out "${domain}.ecc-${curve}.pfx"

  curve=secp384r1 # P-384
  echo ; echo "Generating ECC [${curve}] Private Key ${domain}.ecc-${curve}.pem"
  openssl ecparam -genkey -name ${curve} -out ${domain}.ecc-${curve}.pem

  echo ; echo "Generating ECC [${curve}] Public Key ${domain}.ecc-${curve}.pub"
  openssl ec -pubout -outform PEM \
    -in ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.pub

  echo; echo "Generating ECC [${curve}] PKCS#10 CSR (Certificate Signing Request) ${domain}.ecc-${curve}.csr"
  openssl req -new -sha384 \
    -key ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ECC [${curve}] X.509 Certificate ${domain}.ecc-${curve}.cert"
  openssl x509 -req -sha384 -days 365 -copy_extensions copyall \
    -in ${domain}.ecc-${curve}.csr -signkey ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.cert

  echo; echo "Exporting PKCS#12 [${curve}] chain (${domain}.ecc-${curve}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.ecc-${curve}.pem \
    -in ${domain}.ecc-${curve}.cert \
    -out "${domain}.ecc-${curve}.pfx"

  curve=secp521r1 # P-521
  echo ; echo "Generating ECC [${curve}] Private Key ${domain}.ecc-${curve}.pem"
  openssl ecparam -genkey -name ${curve} -out ${domain}.ecc-${curve}.pem

  echo ; echo "Generating ECC [${curve}] Public Key ${domain}.ecc-${curve}.pub"
  openssl ec -pubout -outform PEM \
    -in ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.pub

  echo; echo "Generating ECC [${curve}] PKCS#10 CSR (Certificate Signing Request) ${domain}.ecc-${curve}.csr"
  openssl req -new -sha512 \
    -key ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ECC [${curve}] X.509 Certificate ${domain}.ecc-${curve}.cert"
  openssl x509 -req -sha512 -days 365 -copy_extensions copyall \
    -in ${domain}.ecc-${curve}.csr -signkey ${domain}.ecc-${curve}.pem -out ${domain}.ecc-${curve}.cert

  echo; echo "Exporting PKCS#12 [${curve}] chain (${domain}.ecc-${curve}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.ecc-${curve}.pem \
    -in ${domain}.ecc-${curve}.cert \
    -out "${domain}.ecc-${curve}.pfx"

  algorithm=ed25519
  # https://blog.pinterjann.is/ed25519-certificates.html
  echo ; echo "ED25519 (Edwards 25519) Certificates:"
  echo ; echo "Generating ${algorithm} PKCS#8 Private Key ${domain}.${alrogrithm}.pem"
  openssl genpkey -algorithm ${algorithm} -outform PEM -out ${domain}.${algorithm}.pem

  echo ; echo "Generating ${algorithm} Public Key ${domain}.${algorithm}.pub"
  openssl pkey -pubout -outform PEM \
    -in ${domain}.${algorithm}.pem -out ${domain}.${algorithm}.pub

  echo; echo "Generating $algorithm PKCS#10 CSR (Certificate Signing Request) ${domain}.${algorithm}.csr"
  openssl req -new \
    -key ${domain}.${algorithm}.pem -out ${domain}.${algorithm}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ${algorithm} Certificate ${domain}.${algorithm}.cert"
  openssl x509 -req -days 365 -copy_extensions copyall \
    -in ${domain}.${algorithm}.csr -signkey ${domain}.${algorithm}.pem -out ${domain}.${algorithm}.cert

  echo; echo "Exporting PKCS#12 [${algorithm}] chain (${domain}.${algorithm}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.${algorithm}.pem \
    -in ${domain}.${algorithm}.cert \
    -out "${domain}.${algorithm}.pfx"

  # https://en.m.wikipedia.org/wiki/RSA_cryptosystem
  echo ; echo "RSA (Rivest-Shamir-Adleman) Certificates:"
  bits=2048
  algorithm=rsa
  echo ; echo "Generating ${algorithm} PKCS#8 ${bits}-bit Private Key ${domain}.${algorithm}-${bits}.pem"
  openssl genpkey -algorithm ${algorithm} -outform PEM -pkeyopt rsa_keygen_bits:${bits} -out ${domain}.${algorithm}-${bits}.pem

  echo ; echo "Generating ${algorithm} ${bits}-bit Public Key ${domain}.${algorithm}-${bits}.pub"
  openssl pkey -pubout -outform PEM \
    -in ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.pub

  echo; echo "Generating ${algorithm} PKCS#10 CSR (Certificate Signing Request) ${domain}.${algorithm}-${bits}.csr"
  openssl req -new \
    -key ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ${algorithm} X.509 Certificate ${domain}.${algorithm}-${bits}.cert"
  openssl x509 -req -days 365 -copy_extensions copyall \
    -in ${domain}.${algorithm}-${bits}.csr -signkey ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.cert

  echo; echo "Exporting PKCS#12 [${algorithm}-${bits}] chain ($domain.${algorithm}-${bits}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.${algorithm}-${bits}.pem \
    -in ${domain}.${algorithm}-${bits}.cert \
    -out "$domain.${algorithm}-${bits}.pfx"

  bits=4096
  echo ; echo "Generating ${algorithm} PKCS#8 ${bits}-bit Private Key ${domain}.${algorithm}-${bits}.pem"
  openssl genpkey -algorithm ${algorithm} -outform PEM -pkeyopt rsa_keygen_bits:${bits} -out ${domain}.${algorithm}-${bits}.pem

  echo ; echo "Generating ${algorithm} ${bits}-bit Public Key ${domain}.${algorithm}-${bits}.pub"
  openssl pkey -pubout -outform PEM \
    -in ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.pub

  echo; echo "Generating ${algorithm} PKCS#10 CSR (Certificate Signing Request) ${domain}.${algorithm}-${bits}.csr"
  openssl req -new \
    -key ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ${algorithm} X.509 Certificate ${domain}.${algorithm}-${bits}.cert"
  openssl x509 -req -days 365 -copy_extensions copyall \
    -in ${domain}.${algorithm}-${bits}.csr -signkey ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.cert

  echo; echo "Exporting PKCS#12 [${algorithm}-${bits}] chain ($domain.${algorithm}-${bits}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.${algorithm}-${bits}.pem \
    -in ${domain}.${algorithm}-${bits}.cert \
    -out "$domain.${algorithm}-${bits}.pfx"


  echo ; echo "DSA (Digital Signature Algorithm) Certificates:"
  bits=2048
  algorithm=dsa
  echo ; echo "Generating ${algorithm} PKCS#8 ${bits}-bit Private Key ${domain}.${algorithm}-${bits}.pem"
  openssl gendsa -out ${domain}.${algorithm}-${bits}.pem <( openssl dsaparam ${bits} )

  echo ; echo "Generating ${algorithm} ${bits}-bit Public Key ${domain}.${algorithm}-${bits}.pub"
  openssl dsa -pubout -outform PEM \
    -in ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.pub

  echo; echo "Generating ${algorithm} PKCS#10 CSR (Certificate Signing Request) ${domain}.${algorithm}-${bits}.csr"
  openssl req -new \
    -key ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ${algorithm} X.509 Certificate ${domain}.${algorithm}-${bits}.cert"
  openssl x509 -req -days 365 -copy_extensions copyall \
    -in ${domain}.${algorithm}-${bits}.csr -signkey ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.cert

  echo; echo "Exporting PKCS#12 [${algorithm}-${bits}] chain ($domain.${algorithm}-${bits}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.${algorithm}-${bits}.pem \
    -in ${domain}.${algorithm}-${bits}.cert \
    -out "$domain.${algorithm}-${bits}.pfx"

  bits=4096
  echo ; echo "Generating ${algorithm} PKCS#8 ${bits}-bit Private Key ${domain}.${algorithm}-${bits}.pem"
  openssl gendsa -out ${domain}.${algorithm}-${bits}.pem <( openssl dsaparam ${bits} )

  echo ; echo "Generating ${algorithm} ${bits}-bit Public Key ${domain}.${algorithm}-${bits}.pub"
  openssl dsa -pubout -outform PEM \
    -in ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.pub

  echo; echo "Generating ${algorithm} PKCS#10 CSR (Certificate Signing Request) ${domain}.${algorithm}-${bits}.csr"
  openssl req -new \
    -key ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.csr \
    -subj "$subject" -addext "$basic" -addext "$usage" -addext "$extended" -addext "$extensions"

  echo; echo "Generating ${algorithm} X.509 Certificate ${domain}.${algorithm}-${bits}.cert"
  openssl x509 -req -days 365 -copy_extensions copyall \
    -in ${domain}.${algorithm}-${bits}.csr -signkey ${domain}.${algorithm}-${bits}.pem -out ${domain}.${algorithm}-${bits}.cert

  echo; echo "Exporting PKCS#12 [${algorithm}-${bits}] chain ($domain.${algorithm}-${bits}.pfx)..."
  openssl pkcs12 -export -name 'PKCS Certificate Chain' \
    -inkey ${domain}.${algorithm}-${bits}.pem \
    -in ${domain}.${algorithm}-${bits}.cert \
    -out "$domain.${algorithm}-${bits}.pfx"


  return


  echo; echo Verifying Signature...
  echo 'TODO: call verify()'
  openssl req -in $certificate -verify -key $key

  echo; echo Checking Info...
  openssl req -in $certificate -text
  echo; echo Testing...
  openssl s_server -www -cert $certificate

} # certify

# }}}

# =========================================================================
# {{{ Security
#   OWASP (Open Web Application Security Project) - https://cheatsheetseries.owasp.org
#   SSH Key Best Practices
#     - https://brandonchecketts.com/archives/ssh-ed25519-key-best-practices-for-2025
#   eXtended Attr(ibutes)
#     - https://linuxexam.net/2019/11/linux-tools-getfattrsetfattr.html
#   ACLs (Access Control List)
#     - https://unix.stackexchange.com/q/364517/difference-between-chmod-vs-acl
#     - https://reddit.com/r/linux/comments/170crnt/acl_101_a_visual_guide_to_accesscontrol_lists
#     - https://doc.opensuse.org/documentation/leap/security/html/book-security/cha-security-acls.html
#     - https://usenix.org/legacy/publications/library/proceedings/usenix03/tech/freenix03/full_papers/gruenbacher/gruenbacher_html/main.html
# =========================================================================
alias whois='command whois -H'
# https://man7.org/linux/man-pages/man1/passwd.1.html
alias password='clear ; man -k passwd ; echo ; command passwd'

# https://pypi.org/project/tsu
# http://androidcentral.com/root
alias su='command su ; tsu '

# - https://en.wikipedia.org/wiki/Chown
# - https://man7.org/linux/man-pages/man1/chown.1p.html
alias chown='command chown --verbose --preserve-root --recursive'

# - https://en.wikipedia.org/wiki/Chgrp
# - https://man7.org/linux/man-pages/man1/chgrp.1p.html
alias chgrp='command chgrp --verbose --preserve-root --recursive'

# - https://askubuntu.com/q/918379
# - https://en.wikipedia.org/wiki/Chmod
# - https://gnu.org/software/coreutils/chmod
# - https://man7.org/linux/man-pages/man1/chmod.1p.html
# - https://marksei.com/linux-permissions-chown-chgrp-and-chmod
alias chmod='command chmod --verbose --preserve-root --recursive'

# - https://linux.die.net/man/1/flock
# - https://linuxhandbook.com/flock-command
# - https://man7.org/linux/man-pages/man2/flock.2.html
# - https://howtogeek.com/limit-bash-scripts-to-run-once-at-a-time
# - https://unix.stackexchange.com/questions/203694/is-flock-exec-safe-in-bash
function lock () {
  local -r location="$(realpath "$1" )"
  local -r lock="$( realpath "${location}.lock" )"

  exist "$location" || return $?

  man flock

  echo "🔐 Locking $location 🔗 ($lock)"

  flock "$lock" "$location"
} # lock

# - https://stackoverflow.com/q/67351646/what-does-flock-u-actually-do
function unlock () {
  local -r lock="$( realpath "${1}.lock" )"

  exist "$location" || return $?

  man flock

  echo "🔓 Unlocking ($lock)"

  flock -u "$lock"
} # unlock

# https://unix.stackexchange.com/q/302938/about-ulimit-setrlimit-and-cgroup
function limit () { clear
  ulimit --help

  echo ; echo Hard Limits:
  ulimit -Ha

  echo ; echo Soft Limits:
  ulimit -Sa

  echo TODO: 'limit' Implementation
} # limit

# - https://wiki.archlinux.org/title/Limits.conf
# - https://namehero.com/blog/managing-linux-system-resources-with-the-ulimit-command
function unlimit () { clear
  ulimit --help

  echo ; ulimit -a
  echo TODO: 'unlimit' Implementation
} # unlimit

# https://askubuntu.com/q/29589/chmod-ux-versus-chmod-x#1075089
# https://superuser.com/q/168578/why-must-a-folder-be-executable
# https://askubuntu.com/q/44542/what-is-umask-and-how-does-it-work
# https://stackoverflow.com/q/12445527/set-different-umask-for-files-and-folders
# https://askubuntu.com/q/932713/what-is-the-difference-between-chmod-x-and-chmod-755
function permit () { clear
  printf "\numask : %s %s\n\n" "$( umask )" "$( umask -S )"

  local -r location="$1"

  exist "$location" || return $?

  # chmod u+x g+x o+x a+x
  # r(4) - Read (R - disabled)
  # w(2) - Write (W - disabled)
  # x(1) - Execute (X - disabled)
  # u=user,g=group,o=others,a=all
  # [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+.
  chmod u=rwx,g=rx,o=rx "$( realpath "$location" )" # 755

  ls "$location"
  about "$location"
} # permit

function restrict () { clear
  printf "\numask : %s %s\n\n" "$( umask )" "$( umask -S )"

  local -r location="$1"

  exist "$location" || return $?

  # chmod u+x g+x o+x a+x
  # r(4) - Read (R - disabled)
  # w(2) - Write (W - disabled)
  # x(1) - Execute (X - disabled)
  # u=user,g=group,o=others,a=all
  # [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+.
  chmod u=r,g=,o= "$( realpath "$location" )" # 600

  ls "$location"
  about "$location"
} # restrict

function authorize () {
  local -r user=${1:-'Bob'}

  echo "Authorizing: $user"
} # authorize

# JWT - https://datatracker.ietf.org/doc/html/rfc7519
# BASIC - https://datatracker.ietf.org/doc/html/rfc7617
# BEARER - https://datatracker.ietf.org/doc/html/rfc6750
# DIGEST - https://datatracker.ietf.org/doc/html/rfc7616
# https://dev.to/vyan/the-ultimate-guide-to-web-authentication-comparing-session-jwt-sso-and-oauth-20-in-2024-2og0
function authenticate () { clear
  # https://stackoverflow.com/q/25969196
  local -r certificate='--cert' # (key|cert)
  local -r credentials="${1:-:}" # default to `:`
  local -r auth='--basic' # (anyauth|digest|basic)
  local -r user="--user ${credentials}" # login credentials
  local -r domain="localhost" # localhost default domain
  local -r port="${PORT:-80}" # PORT env variable default 80
  local -r uri="${domain}:${port}" # URI default to domain and port

  echo uri: "$uri"
  echo auth: $auth
  echo user: "$user"
  echo cert: "$certificate"

  curl --head "$auth" "$cert" "$user" "$uri"
} # authenticate

# Exploits ----------------------------------------------------------------
#   - https://en.wikipedia.org/wiki/Alice_and_Bob
# -------------------------------------------------------------------------
# https://en.wikipedia.org/wiki/Zip_bomb
function zipbomb () { clear
  local -r destination=$( realpath "${1:-./bomb.zip}" )

  echo zipBomb
} # zipbomb

 # https://en.wikipedia.org/wiki/Fork_bomb
function forkbomb () { clear #:(){ :|:& };:
  local -r destination=$( realpath "${1:-./bomb.zip}" )

  echo forkBomb

  # forkbomb | forkbomb &
} # forkbomb

# - https://securitygate.io/blog/osi-model-fundamentals-cybersecurity-basics
function attack () {
  # Unauthorized access
  # Data sniffing
  # Physical damage
  # Credential theft
  # Vulnerability exploits
  # Social engineering attacks

  echo DoS # https://en.wikipedia.org/wiki/Denial-of-service_attack
  echo DDoS # https://aws.amazon.com/shield/ddos-attack-protection
  echo MitM # https://en.wikipedia.org/wiki/Man-in-the-middle_attack
  echo Birthday Attack # https://en.wikipedia.org/wiki/Birthday_attack

  echo ReDOS # https://en.wikipedia.org/wiki/ReDoS
  echo Algorithmic # https://en.wikipedia.org/wiki/Algorithmic_complexity_attack
  echo Billion Laughs # https://en.wikipedia.org/wiki/Billion_laughs_attack
  echo Session Fixation # https://owasp.org/www-community/attacks/Session_fixation
  echo Session Hijacking # https://owasp.org/www-community/attacks/Session_hijacking_attack
} # attack

# }}}

# =========================================================================
# {{{ Services
#   See bin/service-daemon
#   See $HOME/.termux/boot/README on Android
#   - https://man7.org/linux/man-pages/man8/start-stop-daemon.8.html
#
# RUNIT - (pkg install runit) http://smarden.org/runit
#   - https://en.wikipedia.org/wiki/Runit
#   - https://antixforum.com/forums/topic/what-are-the-advantages-of-runit
# =========================================================================
function boot () { clear
  local -r profile="${PREFIX}/etc/profile.d"

  echo CPU... ;  cpu

  echo Booting Kernel... ; kernel

  echo Loading Profile...
  tree "$profile"
  echo "${profile}/start-services.sh"
  cat "${profile}/start-services.sh"
} # boot

# https://github.com/termux/termux-packages/pull/3460
function services () {
  local -r service="${1}"
  local -r filter="runsv $service"
  local -r init="${PREFIX}/etc/init.d/"
  local -r running="${PREFIX}/var/run/"
  local -r services="${PREFIX}/var/service/"

  [ "$service" ] || htop --tree --filter="$filter"

  ps | command grep "$filter"

  echo ; tree -L 4 "${init}${service}"
  echo ; tree -L 4 "${running}${service}"
  echo ; tree -L 4 "${services}${service}"
} # services

function run () {
  local -r -i seconds=5
  local -r services="${*}"
  local -r path="${SVDIR:-$PREFIX/var/service}"

# man sv         # Signals
# man runsv      # Run service
# man runsvdir   # Run service dir
# man runsvchdir # (Change to) service dir

  # [ -d ${PREFIX}/etc/init.d ] \
  #   || mkdir -p ${PREFIX}/etc/init.d
  # https://unix.stackexchange.com/q/20357
  echo ; tree "$PREFIX/etc/init.d"
  echo "$path" ; echo

  [ -z "$services" ] \
    && { service-daemon start ; return ; }


  for service in $services ; do
    echo "Wait time: $seconds"
    echo "checking $service"
    sv -v check "$service" # check

    echo "Process routine for $service"
    ( [[ "$service" == ./* ]] && runsv "$service" >/dev/null & ) \
      || ( runsv "${path}/${service}" >/dev/null & )

#     && { runsv "$( realpath "$service" )" 2>&1 & ; sv -v -w $seconds status $( realpath "$service" ) ; } \
#     || { runsv "${path}/${service}" 2>&1 & ; sv -v -w $seconds status "${path}/${service}" ; }

    sv -v -w $seconds status "$service"
    sv -v -w $seconds status "${service}/log"
  done # for $service

  services "$@"
} # run

function start () { clear
  local -r nice='-10'
  local -r mask='077' # u=rwx,g=r,o=
  local -r service="$( realpath "$1" )"
  local -r name="${service##*/}" # minus path

  local -r pidfile="${service}/${name}.pid"
  local -r daemon="${PREFIX}/bin/runsv" # runsvdir for directories

  man start-stop-daemon
  mkdir -p "$service" # ensure service directory exists

  echo NAME: "$name"
  echo DAEMON: "$daemon"
  echo SERVICE: "$service"
  echo PIDFILE: "$pidfile"

  # >/dev/null 2>&1 & # --background - https://stackoverflow.com/q/63274948
  command start-stop-daemon --start --name "$name" \
    --chdir "$service" --nicelevel "$nice" --umask "$mask" \
    --make-pidfile --pidfile "$pidfile" \
  --exec "$daemon" -- "$service"
} # start

function stop () {
  local -r retry='TERM/10/KILL/5'
  local -r service="$( realpath "$1" )"
  local -r pidfile="${service}/${name}.pid"
# local -r piddir="${PREFIX}/var/run"
# local -r piddir="${HOME}"

  man start-stop-daemon

  command start-stop-daemon --stop --oknodo --remove-pidfile --pidfile "$pidfile" --signal 1 --retry "$retry"

  return

  #tail --pid=$( cat "$PIDFILE" ) /dev/null

  #for supervisor in "$SVDIR/*/supervise" "$SVDIR/*/log/supervise"; do
  #  kill -9 $(cat "$supervisor/pid") 2>/dev/null || :
  #  rm -rf $supervisor
  #done
} # stop

function trip () {
  services

  local -r service="${1}"
  local -r services="${*:-nginx}"
  local -r path="${PREFIX}/var/service"

  [ -z "$service" ] && service-daemon stop && return

  # man sv
  echo Check
  sv -v check "$service"
  echo Status
  sv -v status "$service"
# sv -v force-stop "$service"
  sv -v force-shutdown "$service"
  echo Check
  sv -v check "$service"
  echo Status
  sv -v status "$service"

  services
} # trip

# }}}

# =========================================================================
# {{{ Network
#   NMAP
#     - https://upguard.com/blog/how-to-use-nmap
#     - https://edhat.com/en/blog/use-cases-nmap
#     - https://freecodecamp.org/news/what-is-nmap-and-how-to-use-it-a-tutorial-for-the-greatest-scanning-tool-of-all-time
# =========================================================================
alias ping='command ping -c 5'

function trace () {
  local domain=${1:-localhost}

  # https://linux.die.net/man/8/traceroute
  echo ; echo TRACE ROUTE: ; command traceroute -N 1 -z 0.1 "$domain"
  # https://linux.die.net/man/8/tracepath
  # # https://geeksforgeeks.org/tracepath-command-in-linux-with-examples
  echo ; echo TRACE PATH: ; command tracepath -b -m 10 "$domain" # name + ip
  echo ; echo TRACE NAME: ; command dig "$domain" +trace
} # trace

function map () {
  local -r domain=${1:-localhost}

  echo domain

  # port ranges
  #   - 0 - 1023 (Well-known)
  #   - 1024 - 49151 (Registered)
  #   - 49152 - 65535 (16bit port max)
  command nmap -p1-65535 $domain
#   --reason -vv --version-trace \
} # map

# https://man7.org/linux/man-pages/man8/ss.8.html
# https://man7.org/linux/man-pages/man2/socket.2.html
alias socket='man ss ; man socat'

# https://redhat.com/sysadmin/ifconfig-vs-ip
alias ip='command ip --color address |
  command grep --color --perl-regexp "(inet)\s[^/]+" ;
  echo ; command ip --color route ;
  echo ; command route -v -ee -A inet ;
' # ip

# TODO: Find netstat alternative
# https://plesk.com/blog/various/open-ports-in-linux/
# - https://man7.org/linux/man-pages/man8/netstat.8.html
# This program is mostly obsolete.  Replacement for netstat is ss.
# Replacement for netstat --route is ip route.
# Replacement for netstat --groups is ip maddr.
# Replacement for netstat --interfaces is ip -s link.
#   - https://dev.to/nayetwolf/common-ports-and-protocols-2nb9
#   -https://reddit.com/r/termux/comments/mdp0dq/comment/gsb0w5c
#alias ports="netstat --verbose --all --numeric --timers --tcp --udp --listening --programs --wide"
alias ports='netstat --verbose --all --numeric --listening --programs --wide'

# https://man7.org/linux/man-pages/man2/connect.2.html
alias connect='TODO: implementation'

# https://github.com/delletenebre/SerialManager2
alias serial='echo TODO: Implementation'

# https://developer.technexion.com/docs/using-uart-from-a-linux-shell
alias uart='echo TODO: implementation'

# https://computernetworkingnotes.com/linux-tutorials/how-to-configure-telnet-sever-and-client-in-linux.html
alias telnet='telnet --login'

# NetCat ------------------------------------------------------------------
# - https://baeldung.com/linux/netcat-command
alias catscan='
  nc -z -v -w 1 localhost 1234 ;
  nc -z -v -w 1 google.com 442-444 ;
' # catscan

alias catnet='{
  while true; do
    command echo -e "HTTP/1.1 200 OK\n\nHello World!\n" \
      | nc -l -v 1234
  done
}' # catnet

# Transmission ------------------------------------------------------------
# Test server - https://httpbin.org
alias header='curl --head'
alias curl='command curl --verbose'
alias cookies='header --cookie-jar ./.cookies'
alias wget='command wget --continue --no-hsts' # resume downloads & prevent writing HSTs

# Proxies -----------------------------------------------------------------
# Disable curl --noproxy '*' ...
# SOCKS (4|4a|5|5h) SOCK(et) S(ecure)
# SOCKS4 - SOCKS4 IPv4 | TCP protocols
# SOCKS5 - DNS | UDP | SSH | IPv6 | Auth
# - https://en.wikipedia.org/wiki/SOCKS
# - https://datatracker.ietf.org/doc/html/rfc1928
# cURL --proxy --socks4 --socks4a --socks5 --socks5-hostname
# - https://oxylabs.io/blog/curl-with-proxy
# - https://everything.curl.dev/usingcurl/proxies/http.html
# - https://everything.curl.dev/usingcurl/proxies/socks.html
alias proxyon='{
  export http_proxy=http://user:pwd@127.0.0.1:8888
  export https_proxy=https://user:pwd@127.0.0.1:8888
  echo "PROXY ON!\n http: ${http_proxy}\n https: ${https_proxy}"
}' # proxyon
alias proxyoff='{
  unset http_proxy ; unset https_proxy
  echo "PROXY OFF!\n http: ${http_proxy}\n https: ${https_proxy}"
}' # proxyoff

# SOCKS vs. HTTP - https://incogniton.com/socks-vs-http-proxy
function proxy () { clear
  # https://tinyproxy.github.io
  # VULNERABILITIES
  # - https://github.com/tinyproxy/tinyproxy/issues/533
  # - https://talosintelligence.com/vulnerability_reports/TALOS-2023-1889
  tinyproxy -v
  tinyproxy -h
  tinyproxy -d -c "$HOME/tinyproxy.conf"
} # proxy

# https://man.archlinux.org/man/host.1.en
# https://man7.org/linux/man-pages/man5/hosts.5.html
# https://man7.org/linux/man-pages/man1/hostname.1.html
# https://cloudns.net/blog/linux-host-command-troubleshot-dns
# dnsutils
# - https://digitalocean.com/community/tutorials/how-to-retrieve-dns-information-using-dig
# - https://forum.huawei.com/enterprise/intl/en/thread/difference-between-dig-and-nslookup/689608776220557312
function dns () { clear
  local -r domain=${1:-localhost}

  [ "$domain" != localhost ] \
    && whois "$domain"

  [ "$domain" != localhost ] && dig "$domain"

  echo ; echo "ALL $domain"
  command host -v -R 3 -a "$domain"
  # SOA (Start of Authority) Record(s) - https://en.wikipedia.org/wiki/SOA_record
  # rfc1035 Domain Names - https://datatracker.ietf.org/doc/html/rfc1035#autoid-31
  echo ; echo "SOA $domain"
  command host -v -t SOA "$domain"
  echo ; echo ; command host -v -R 3 -C "$domain"
  echo ; echo ; command host -v -R 3 "$domain"
  echo ; echo ; command host -R 3 "$domain"

  echo ; echo A RECORD IP ADDRESSES:
  dig "$domain" +short

  echo ; echo  "TRACE $domain"
  echo ; trace "$domain"

  echo ; echo  "PING $domain"
  echo ; ping "$domain"

  echo ; echo  "LOOKUP $domain"
  # https://linux.die.net/man/1/nslookup
  # https://phoenixnap.com/kb/nslookup-command
  nslookup "$domain"
  dig "$domain" any

  echo ; echo  "HOSTING"
  echo Current Domain ⇋ "$( hostname --domain )"
  echo Current Host ⇋ "$( hostname --short )"
  echo Current IP ⇋ "$( hostname --ip-addresses )"

  printf \
    "\n \${PREFIX}/etc/hosts: \n %s \n" "$( cat ${PREFIX}/etc/hosts )"
  printf \
    "\n \$HOSTFILE: $HOSTFILE \n %s \n" "$( cat "$HOSTFILE" )"
  printf \
    "\n ~/.ssh/known_hosts:\n %s \n" "$( cat ~/.ssh/known_hosts )"
} # dns

# https://nginx.org/en/docs
function balance () { clear
  nginx -V
  nginx -help

  local -r configuration="${HOME}/.nginx/nginx.conf"

  exist "$configuration" && cat "$configuration"
  # /usr/local/nginx/conf/*, /etc/nginx/*, or /usr/local/etc/nginx/*
  exist "${PREFIX}/etc/nginx/nginx.conf" && cat "${PREFIX}/etc/nginx/nginx.conf"

  check "$configuration"

  nginx -c "$configuration" \
    && echo Started nginx load balancer on PORT 8080
} # balance

# https://en.wikipedia.org/wiki/Tc_(Linux)
# https://man7.org/linux/man-pages/man8/tc.8.html
# https://netbeez.net/blog/how-to-use-the-linux-traffic-control
alias traffic='man tc'

# Benchmarking
#   - https://en.wikipedia.org/wiki/C10k_problem
#   - https://lobste.rs/s/mqxwuc/what_s_your_preferred_tool_for_load
#   - https://codedamn.com/news/backend/performance-tuning-benchmarking-optimization
#   - https://engineering.appfolio.com/appfolio-engineering/2019/1/18/benchmarking-ruby-app-servers-badly
#   - https://engineering.appfolio.com/appfolio-engineering/2019/4/21/wrk-it-my-experiences-load-testing-with-an-interesting-new-tool
function load () { clear
  local -r url="${1}"
  local -r connections=10
  local -r requests=100 # 100000

  [ "$url" ] \
    || echo missing url && return 1

  header "$url"

  ab -n $requests -c $connections "$url"
  echo ; echo "${requests}:${connections} @ ${url}"
} # load

# Test Servers
# - https://smartftp.com/en-us/support/kb/2779
# - https://dlptest.com/ftp-test
# FTP (File Transfer Protocol)
# (s)FTP
# - https://everything.curl.dev/ftp/upload.html#uploading-with-ftp
alias ftp='command ftp --version; ftp --verbose'

# cURL
function download () { clear
  local -r uri="$1"
  # https://github.com/yt-dlp/yt-dlp?tab=readme-ov-file
  local -r process='../.local/yt-dlp'

  echo uri: "$uri"
  echo process: "$process"
  echo

# $process --help
# $process --download-sections '*00:00:00.0-00:00:05.0' $uri
# $process "$uri"
  header "$uri"
# keep local file name similar to remote-name
  wget "$uri"
  # TODO: Progress bar - https://bashupload.com/how_to_upload_progress_curl
  curl --remote-name "$uri"
} # download

# cURL
# - https://everything.curl.dev/usingcurl/uploads.html
function upload () {
  local -r resource="${1}"
  local -r uri="${2}"

  echo resource: "$resource"
  echo uri: "$uri"

  exist "$resource" || return $?

  list "$resource"
  about "$resource"
  weigh "$resource"
  curl --upload-file "$resource" "$uri"

  # TODO: upload to remote domain ( e.g. AWS / CDN )
  # TODO: Progress bar - https://bashupload.com/how_to_upload_progress_curl
} # upload

# }}}

# =========================================================================
# {{{ Server(s)
# =========================================================================
# HTTP(s) -----------------------------------------------------------------
# - https://gist.github.com/willurd/5720255
# - https://realpython.com/python-http-server
function serve () { clear
  local -r realm='devPunks' # Authentication
  local -r port=${PORT:-4321}
  local -r root=$( realpath ${1:-.} )
  local -r server=$( realpath ${PREFIX:-/usr} )
  local -r config="${HOME}/httpd.conf"

  exists "$root" || return $?

  echo PORT: "$port"
  echo ROOT: "$root"
  echo CONFIG: "$config"


  echo ; echo # Apache
  tree "${PREFIX}/etc/apache2"
  list "${PREFIX}/libeexec/apache2"
  # check $PREFIX/etc/apache2/httpd.conf (ServerName)
  # - https://httpd.apache.org/docs/current/programs/apachectl.html
  local -r APACHE="command apachectl -d ${root} -f ${config}"
  echo ; echo "APACHE COMMAND: $APACHE"
  $APACHE -V # version & compile settings
  $APACHE -l # compiled modules
  $APACHE -L # configuration directives
  $APACHE -M # (-t -D DUMP_MODULES) Show all loaded modules
  $APACHE -S # (-t -D DUMP_VHOSTS) vhost settings (-t -D DUMP_RUN_CFG) run settings
  $APACHE fullstatus # See $STATUSURL

  cat "$config"
  check "$config" \
    && command apachectl restart -d "$server" -f "$config"

  # see http.conf
  command busybox httpd -vv -r "$realm" -h "$root" -c "$config" -p 0.0.0.0:7070
  # command httpd -d <ServerRoot> -f <Config> -k start


  echo ; echo # Python
  command python -m http.server 5000 2>&1 &


  echo ; echo # Lighttpd
  tree "${PREFIX}/etc/lighttpd"
  # https://redmine.lighttpd.net/projects/lighttpd/wiki/TutorialConfiguration
  command lighttpd -V
  check "./lighttpd.conf" \
    && command lighttpd -p -f "./lighttpd.conf" \
    && command lighttpd -f "./lighttpd.conf"
} # serve

# GPG ---------------------------------------------------------------------
alias ssh='man ssh ; command ssh' # -T
# https://gnupg.org/documentation/manpage.html
# https://gnupg.org/documentation/manuals/gnupg/GPG-Configuration.html
# https://betterbugs.io/blog/fix-error-gpg-failed-to-sign-the-data-git
alias gpg='command gpg --verbose --armor --fingerprint --keyid-format=long'
alias gpg.add='{ man gpg-agent
  # kill the agent
  # gpgconf --kill gpg-agent
  gpg-connect-agent --verbose killagent /bye
  echo ; gpgconf --list-dirs

  [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ] \
    && export SSH_AUTH_SOCK="`gpgconf --list-dirs agent-ssh-socket`"

  # restart
  gpg-connect-agent --verbose updatestartuptty /bye

  echo
  echo \$GPG_TTY ▶ $GPG_TTY
  echo unset \$SSH_AGENT_PID ; unset SSH_AGENT_PID
  echo \$SSH_AGENT_PID ▶ $SSH_AGENT_PID
  echo \$SSH_AUTH_SOCK ▶ $SSH_AUTH_SOCK
  echo

  ps x | command grep gpg-agent
}' # gpg.add

# SSh ---------------------------------------------------------------------
# - https://ssh.com/academy/ssh
# - https://ssh.com/academy/ssh/add-command
# - http://blog.joncairns.com/2013/12/understanding-ssh-agent-and-ssh-add
alias ssh='man ssh; command ssh' # -T
alias ssh.add='{
  # default is $TMPDIR/ssh-XXXXXXXXXX/agent.<ppid>
  [ -e "${HOME}/agent.sock" ] \
    && command rm "${HOME}/agent.sock"
  eval $( ssh-agent -s -t 86400 -a $HOME/agent.sock )
  command ssh-add -vvv -D # delete
  command ssh-add -vvv # -c ssh-askpass breaks github
  command ssh-add -vvv -T # test
  command ssh-add -vvv -l # list
  ps x | command grep ssh-agent

  echo
  echo \$SSH_AGENT_PID ▶ $SSH_AGENT_PID
  echo \$SSH_AUTH_SOCK ▶ $SSH_AUTH_SOCK
  echo
}' # ssh.add

# SSh(d) ------------------------------------------------------------------
#   - Terrapin Vulnerability
#     - https://en.wikipedia.org/wiki/Terrapin_attack
#     - Scanner: https://github.com/RUB-NDS/Terrapin-Scanner
#   - https://wiki.termux.com/wiki/Remote_Access
#   - https://man7.org/linux/man-pages/man1/ssh.1.html
#   - https://github.com/termux/termux-packages/issues/3620
#
# -d - debug level
# -c - for host_certificate_file
# -f - /data/data/com.termux/files/usr/etc/ssh/sshd_config
# -T - test mode
# check
# ~/.hosts
# ~/.ssh/rc
# ~/.ssh/config
# ~/.ssh/id_rsa
# ~/.ssh/id_rsa.pub
# ~/.ssh/environment
# ~/.ssh/known_hosts
# ~/.ssh/authorized_keys
# $PREFIX/etc/ssh/ssh_config
# $PREFIX/etc/ssh/sshd_config
# $PREFIX/etc/ssh/ssh_known_hosts
# $PREFIX/etc/ssh/ssh_host_rsa_key
# $PREFIX/etc/ssh/ssh_host_rsa_key.pub
# SEE ALSO
#   scp(1), ssh(1), ssh-add(1), ssh-agent(1), ssh-keygen(1), ssh-
#   keyscan(1), chroot(2), login.conf(5), moduli(5), sshd_config(5),
#   inetd(8)
# -X flag for Enable X11 forwarding
alias sshd='{
  banner
  command sshd -X -Dddd
}'

# SMTP -----------------------------------------------------------------
function mail () { clear
  local -r title=${1:-"Title"}
  local -r body=${1:-"Message"}
  local -r timestamp=$( command date --rfc-email )

  man mail
  # info mail # TODO: install texinfo

  echo
  echo "Timestamp: $timestamp"
  echo "Title: $title"
  echo "Body: $body"
  echo
} # mail

# Chat --------------------------------------------------------------------
  # Configuration - https://gist.github.com/pascalpoitras/8406501
  # Quickstart - https://weechat.org/files/doc/stable/weechat_quickstart.en.html
function chat () { clear
  echo WeeChat Version: ` weechat --version `

  TERM=tmux-256color weechat --colors

  # /plugin
  # /fset irc.*
  # /fset weechat.*
  # --plugins <plugins> --run-command <command>
  #
  # /server add libera irc.foo.bar/1234 -tls -autoconnect
  TERM=tmux-256color weechat --temp-dir --dir "$HOME/chat"
} # chat

# PulseAudio --------------------------------------------------------------
alias pulse='{
  pulseaudio -k
  pulseaudio -L "module-sles-source" -D
}' # pulse

# TMUX --------------------------------------------------------------------
alias tmux.config='{
  tmux info
  echo ; echo Server Options:
  tmux show-options -s
  echo ; echo Global Options:
  tmux show-options -g
  echo ; echo Global Window Options:
  tmux show-window-options -g
}' # tmux.config

# }}}

# =========================================================================
# {{{ Log(s)
#   - Syslog - RFC5424
#     - https://stackify.com/syslog-101
#     - https://datatracker.ietf.org/doc/html/rfc5424
# ==========================================================================
alias logs.sshd="command logcat -s 'sshd:*'"

# Kernel Ring - https://unix.stackexchange.com/q/198178
alias dmesg='man dmesg; command dmesg --human --ctime --color=auto'

# - http://vanheusden.com/multitail
# - https://linux.die.net/man/1/multitail
function tail () { clear
  local -a files="${*}"
  local lines="${ROWS:-50}"

  man tail

  man multitail
  echo ~/.multitailrc
  cat ~/.multitailrc

  echo "Lines: $lines"

  echo "TODO: (multi)tail $files"
} # tail

function log () { clear
  local -r message="${1}"
  local source # --source IP | --unix SOCK

  man logger
  # logger --id --ipv4
  man svlogd
  # svlogd -tt "$LOGDIR/sv/$service"
} # log

function err () {
  local source # --source IP | --unix SOCK
  local -r message="${1}"

  # logger --id --ipv4 --stderr --tag "ERROR"
  printf "\n$( command date) 🛑 %s\n" "${message}"

  return 1
} # err

# - https://plesk.com/blog/featured/linux-logs-explained
# - https://cyberciti.biz/tips/howto-linux-unix-write-to-syslog.html
# - systemd Journal Fields - https://real-world-systems.com/docs/systemd.1.html#journal-fields
function logs () {
  command logcat -d # dump
  command logcat --clear

  printf "\n🌎Global logs :\n%s\n\n" "$( tree "$LOGDIR" )"

  [ -d logs ] \
    && printf "\n🏠Local logs :\n%s\n\n" "$( tree logs )"
} # logs

function rotate () {
  local -r log=${1}

  exist "$log" || return $?

  echo ; command logrotate --verbose --log="$log" "$log"
  echo ; echo ⥁ rotating log: "$log"
} # rotate

# }}}

# =========================================================================
# {{{ Archives
# =========================================================================
# https://zdnet.com/google-amp/article/how-to-back-up-a-linux-directory-to-a-remote-machine-with-rsync
function sync () {
  local -r source=$( realpath "$1 ")

  man command sync
  man command rsync

  echo Synching source: "$source"
} # sync

# https://blog.kubesimplify.com/the-complete-guide-to-the-dd-command-in-linux
function backup () { clear
  local -r source=$( realpath "$1" )
  local -r destination="$2"

  exist "$source" || return $?

  package "$source"
  # compress
  sync "$source"

  man dd
  echo Backing Up "$source" to "$destination"
  dd if=$source of=$destination
} # backup

function restore () { clear
  man dd
} # restore

function package () { clear
  local -r source=$( realpath "$1" )
  local -r destination="$1"

  exist "$source" || return $?

  echo "📦 Packaging: $source"
  echo "📦   Destination: $destination"

  checksum "$destination"
} # package

function shrink () { clear
  local -r source=$( realpath "$1" )

  exist "$source" || return $?

  echo Shrinking: "$source"
} # shrink

function expand () { clear
  local -r source=$( realpath "$1" )

  exist "$source" || return $?

  echo Expanding "$source"
  command uncompress --verbose --list "$source" \
    | sed 's/date.*time/month day time/' \
    | column --table
} # expand

# - https://ncompress.sourceforge.io
function compress () { clear
  local -r operation
  local -r source=$( realpath "$1" )
  local -r destination=$( realpath "${2:-./$source}" )

  exist "$source" || return $?
  exist "$destination" || mkdir "$destination"

  echo Compressing "$destination"
} # compress

function decompress () { clear
  local -r operation
  local -r source=$( realpath "$1" )
  local -r destination=$( realpath "${2:-./$source}" )


  exist "$source" || return $?
  exist "$destination" || mkdir "$destination"
} # decompress

function pack () { clear
  local -r file=$( realpath "$1" )
  local -r contents=${@:2}

  exist "$file" || return $?

  echo file: "$file"
  echo contents: "$contents"

  # https://en.wikipedia.org/wiki/Deflate
  command zip -rv "$file" "$contents" # -u for update only

# - https://geeksforgeeks.org/tar-command-linux-examples
  command tar --verbose --create ---gzip --file "$file" "$contents" # -u for update only

  # Creates a package (*.tgz *.tar.gz) from given directory.
  # tar cvzf "${1%%/}.tgz"  "${1%%/}/"
  # tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"

  # Create a ZIP package of a file or folder.
  # zip -r "${1%%/}.zip" "$1"

  exist "$file" \
    && command view "$file"
} # pack

function unpack () { clear
  local operation
  local -r archive="${1}"
  local -r destination="${2:-${archive%.*}}"

  exist "$archive" || return $?
  exist "$destination" || mkdir "$destination"

  echo "source: $archive"
  echo "destination: $destination"
  weigh "${archive}"
  echo ; echo

  case "$archive" in
    # -q quiet mode (-qq => quieter)
    # -n never overwrite existing files
    # -u update existing files, or create
    # -o overwrite files WITHOUT prompting
    # -f freshen existing files, create none
    # -v Verbosely list archive contents then exit
    # https://linuxhandbook.com/unzip-command
    # https://en.wikipedia.org/wiki/ZIP_(file_format)
    *.zip ) {
      unzip -v
      echo ; echo
      UNZIP='-t --u' unzip "${archive}" \
        && zipinfo "${archive}" && unzip -d "${destination}" "${archive}"
    } ;; # *.zip

    # https://en.wikipedia.org/wiki/RAR_(file_format)
    # https://github.com/termux/termux-packages/issues/2190
    # https://unix.stackexchange.com/q/522958/how-to-use-p7zip-to-open-rar-files
    # https://cyberciti.biz/faq/open-rar-file-or-extract-rar-files-under-linux-or-unix/#google_vignette
    *.rar ) {
      # TODO: 7z command
      unrar t "${archive}"
      unrar v "${archive}"
      unrar x "${archive}" "${destination}"
    } ;; # *.rar

    # https://en.wikipedia.org/wiki/Tar_(computing)
    # *.tar)     operation="tar xvf $archive"  ;;
    *.tar ) {
      operation="view $archive && tar --verbose --list --file=$archive $destination"
    } ;;

    # https://en.wikipedia.org/wiki/7z
    # https://tecmint.com/7zip-command-examples-in-linux
    *.7z ) {
      operation="7z $archive"
    } ;;

    #   - https://computerhope.com/unix/uuncompr.htm
    *.Z ) {
      operation="uncompress --verbose --test --list --keep --recursive $source"
    } ;;

    # https://en.wikipedia.org/wiki/XZ_Utils
    # xz --decompress - https://linux.die.net/man/1/unxz
    # xz --decompress --format=unlzma - https://linux.die.net/man/1/unlzma
    *.xz ) {
      operation="view $archive && unxz --verbose --test --list --keep --files $source"
    } ;;

    # https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm
    *.lzma ) {
      operation="view $archive && unlzma --verbose --test --list --keep --files $source"
    } ;;

    # https://en.wikipedia.org/wiki/Brotli
    # brotli --decompress - https://manpages.ubuntu.com/manpages/jammy/en/man1/brotli.1.html
    *.br ) {
      operation="view $archive && brotli --decompress --verbose --test --keep --files $source"
    } ;;

    *.tar.gz ) operation="tar xvzf $archive"  ;;
    # https://linux.die.net/man/1/gunzip
    # https://linuxhandbook.com/gunzip-command
    *.gz ) {
      operation="view $archive && gunzip --verbose --test --list $archive"
    } ;;

    *.tgz | *.tar.bz2 ) operation="tar xvzf $archive"  ;;

    # https://linux.die.net/man/1/bunzip2
    # https://en.wikipedia.org/wiki/Bzip2
    *.bz2 ) operation="bunzip2 --verbose --test $archive"  ;;

    * ) echo "'$archive' cannot be extracted via >extract<"  ;;
  esac

  echo ; echo

# echo ; command view "$archive"
# echo ; command tar --list --file="$archive"
# echo ; command bunzip2 --verbose --test "$archive"
# echo ; command gunzip --verbose --test --list "$archive"
} # unpack

function extract () {
  local -r archive=$( realpath "$1" )

  exist "$archive" || return $?

  check "$archive" && unpack "$archive"
} # extract

# }}}

# =========================================================================
# {{{ Functions
#   - https://tldp.org/LDP/abs/html/functions.html
#   - https://cuddly-octo-palm-tree.com/posts/2021-10-31-better-bash-functions/
# =========================================================================
# TODO: Implementation
# -------------------------------------------------------------------------
function deny () { : deny; }
function allow () { : allow; }
function used () { : used; }
function clean () { : clean; }
function reboot () { : reboot; }
function restart () { : restart; }
function refresh () { : refresh; }
function forward () { : forward; }
function reverse () { : reverse; }
function service () { : service; }
function cumulate () { : cumulate; }
function accumulate () { : accumulate; }
function aggregate () { : aggregate; }
function bandwidth () { : bandwidth; }
# -------------------------------------------------------------------------

function count () {
  exist $1 || return

  local -r file=${1}
  local -r LINES=`wc --lines $file | command cut -d' ' -f 1`
  local -r WORDS=`wc --words $file | command cut -d' ' -f 1`
  local -r CHARS=`wc --chars $file | command cut -d' ' -f 1`
  local -r BYTES=`wc --bytes $file | command cut -d' ' -f 1`

  lines $file

  echo printing

  printf '\n%-10s %-10s %-10s %-10s' \
    'LINES' 'WORDS' 'CHARS' 'BYTES'
  printf '\n%-10s %-10s %-10s %-10s' \
    "$LINES" "$WORDS" "$CHARS" "$BYTES"
  echo
} # count

# https://blog.kubesimplify.com/the-complete-guide-to-the-dd-command-in-linux
function generate () {
  local -r size=${1}
  local -r output=${2}

  dd if=/dev/urandom of=$output bs=$size count=1

  list $output
  weigh $output
} # generate

function lint () { clear
  echo Linting...
  check .*rc
} # lint

alias make="command make -v; command make"
# LLVM - https://llvm.org
# - https://clang.llvm.org
# - https://en.wikipedia.org/wiki/Clang
# Tiny C Compiler
# - https://bellard.org/tcc
# - https://en.wikipedia.org/wiki/Tiny_C_Compiler
function compile () { clear
  local -r source="${1}"
  local -r output="$( basename "${1%.*}" ).run"
  local -r include="$PREFIX/include/bsd"

  command tcc -h
  command tcc -hh
  command tcc -vv

  exist "$source" && \
  command tcc "$source" \
    -I"$PREFIX/include/bsd/stdio.h" \
    -L"$PREFIX/include/bsd/stdio.h" \
    -o "$output"

  return $?
} # compile

alias hexdump='command hexdump --color=auto'
function dump () { clear
  local -r source="${1}"

  exist "$source" || return $?

  man hexdump

  echo "dumping $source"
  hexdump "$source"
} # dump

function debug () { clear
  local -r location="${1}"

  exist "$location" || return $?

  # TODO: gdb --nx "$location"
  pkg info gdb

  echo "🐛 debugging $location"
} # debug

# https://en.wikipedia.org/wiki/FFmpeg
function convert () { clear
  local -a files=${@}
  local filter="-af 'afftdn=nr=10:nf=-30:tn=1'"

# ffmpeg -hide_banner -colors | column --fillrows
# ffmpeg -hide_banner -filters # filter=
ffmpeg -hide_banner -hwaccels

# ffmpeg -hide_banner -codecs
# ffmpeg -hide_banner -muxers
# ffmpeg -hide_banner -demuxers
# ffmpeg -hide_banner -encoders # encoder=
# ffmpeg -hide_banner -decoders # decoder=

# ffmpeg -hide_banner -formats
ffmpeg -hide_banner -sample_fmts

  echo ${#files[@]}
  for file in "${files[@]}"; do
    echo Input: "$file"
    echo Filter: "$filter"

    # ffprobe "$file"
    # ffmpeg -i "$file" "${file%.*}.mp4"
    # ffprobe .mp4
  done # for $file
} # convert

# - LINKS - http://links.twibright.com
# - LYNX - http://lynx.browser.org
# See /usr/etc/lynx.cfg
# - https://lynx.invisible-island.net/lynx_help
# - https://lynx.invisible-island.net/lynx2.8.3/breakout/lynx.cfg
function browse () { clear
  local -r location="${1}"
  local -r configuration="${PREFIX}/etc/lynx.cfg"

  lynx -anonymous -validate -verbose \
    -underline_links -scrollbar -use_mouse -vikeys \
    -cookies -accept_all_cookies -cookie_file="${HOME}/.cookies" \
    -homepage='http://google.com' -session="${HOME}/lynx.session" \
  "$location"

  echo ; lynx -show_cfg
} #browse

# TODO: Implementation
# - https://graphviz.org/pdf/dotguide.pdf
# - https://graphviz.org/doc/info/lang.html
alias graph='command dot -Tps -o'
alias chart='echo TODO: Implement chart'
# https://gnu.org/software/barcode
alias barcode='command barcode --help ; command barcode'
alias matrix='command cmatrix -b -a -s -C magenta' # ScreenSaver

function draw () { : draw; }

# http://gnuplot.info
function plot () { clear
  gnuplot --version
  gnuplot --help
} # plot

function write () { clear
  local -r message="${1}"

  man figlet

  figlet -c -w $COLUMNS "$message"
} # write

function stream () {
  local -r bytes="${1:-foo}"
  yes "$bytes"
} # stream

alias sd='list /storage/E82D-4DB6'
function open () { clear
  local -r location="$1"
  # apk
  [ -f "$location" ] && [ -x "$location" ] && termux-open "$location"

  # url
  [[ "$location" == http* ]] && termux-open-url "$location"

  # file
  [ -f "$location" ] && termux-open "$location"

  # android
  # am start -a android.intent.action.VIEW -d "$1" > /dev/null
} # open

function pick () { # files
  type am || return # short circuit

  # File Picker
  am start -a android.intent.action.VIEW \
    -d "content://com.android.externalstorage.documents/root/primary"

  # Termux file picker
  am start -a android.intent.action.OPEN_DOCUMENT \
    -d /storage/emulated/0 -t '*/*'
} # pick

function play () { clear
  local -r location="$1"

  exist "$location" || return $?

  # SoX
  #   - https://en.wikipedia.org/wiki/SoX
  #   - https://madskjeldgaard.dk/posts/sox-tutorial-cli-tape-music
  #   - https://madskjeldgaard.dk/posts/sox-tutorial-batch-processing
  #   - https://madskjeldgaard.dk/posts/sox-tutorial-split-by-silence
  #   - https://ankitshah009.blogspot.com/2016/12/usage-of-sox-tool.html
  #   - https://ankitshah009.blogspot.com/2017/03/sox-of-silence-original-post.html
  #   - cheatsheet - https://gist.github.com/ideoforms/d64143e2bad16b18de6e97b91de494fd
  echo ; sox --help
  echo ; vlc --help
  echo ; ffmpeg --help

  echo ; echo ▷ Playing: "$location"
} # play

# https://github.com/universal-ctags/ctags
# https://gist.github.com/RockDeng110/d19d97534a34c971183327a11a466b91
# ctags Installation - https://gist.github.com/SofijaErkin/f9c5a930ba4bd7bae2d63dcf988f6f0e
# alias ctags='clear && ctags -R --exclude@.gitignore'
# --exclude-exception= - for files --exclude(ed)
# --list-extras
# --extras=+r - Include r(eference) tags (like GNU tags global)
# --list-fields
# --fields=+r - Include r(eference) field for tag (like GNU tags global)
# --list-kinds=<language> - List kinds of tags
# --list-roles
alias ctags='command ctags --recurse --verbose --guess-language-eagerly --totals=yes \
  --langmap=vim:+.vimrc \
  --langmap=javascript:+.es \
  --langmap=ruby:+.erb\(Gemfile\) \
  --langmap=sh:+.bashrc.bash_login.bash_profile.bash_logout \
  --exclude={.bundle,.cache,.config,.local,.npm,.ssh,.vim,bin,log,logs,node_modules,storage,tmp,vendor} \
' # ctags

function tag () {
  local language
  local location=$( pwd )
  local files=cscope.files

  # if [ -e package.json ] ; then # Javascript
  # files=cscope.js.files
  # command find . -type f -iname '*.js' > $files
  # echo ; echom "Scoping Javascript Files [$files]..."

  # cscope -b -q -U -f cscope.js.out $( cat $files )

  echo && echo 'Working Directory: ' $location

  echo && echo 'All Language Mappings:'
  ctags --list-maps --list-kinds-full

# echo "Creating project tags file (tags)"
# ctags --languages=all -o tags

  language=c
  echo ; echo "Tagging language: ${language}"
  command ctags --list-maps=${language} ; echo
  ctags --languages=${language} -o ${language}.tags

  language=sh
  echo ; echo "Tagging language: ${language}"
  # https://vi.stackexchange.com/q/5619/generate-ctags-for-bash-variables
  ctags --languages=${language} -o ${language}.tags \
    --regex-${language}=/^[ \t]*(local|export|declare)?[ \t]*([A-Za-z0-9_-]+)=/\2/v,variable,variables/ \
    .bashrc #  .bash_login

# language=sh

# language=vim

# language=php

# language=python

# language=html

# language=css

# language=js
# echo "Creating Javascript Ctags file (${language}.tags)"
# # TODO: Use cscope.<language>.files as input -L(list)
# # ctags -L  cscope.js.files -f js.tags --languages=javascript
# ctags -f ${language}.tags --languages=javascript

# language=rb
# echo "Creating Ruby Ctags file (${language}.tags)"
# # TODO: Use cscope.<language>.files as input -L(list)
# # ctags -L  cscope.rb.files -f rb.tags --languages=ruby
# ctags -f ${language}.tags --languages=ruby
# echo "Creating Ruby tags file (tags.ruby)"
# ripper-tags --recursive --verbose --debug-verbose --tag-file ./tags.ruby

  echo ; ls *tags* ; echo
} # tag

# https://en.wikipedia.org/wiki/Cscope
# cscope - https://cscope.sourceforge.net
alias cscope='command cscope -v -R'
#  https://stackoverflow.com/q/33676829
function scope () { set +o noclobber # TODO: Remove
  # TODO: Remove files and use process or command substitution <(...)
  local files=cscope.files

  if [ -e package.json ] ; then # Javascript
    files=cscope.js.files
    command find . -type f -iname '*.js' > $files
    echo ; echom "Scoping Javascript Files [$files]..."

    cscope -b -q -U -f cscope.js.out $( cat $files )

  # starscope --verbose \
  #   --export cscope,cscope.js.out \
  #   --exclude ".git,.bundle,.cache,.config,.ssh,.npm,.vim,Gemfile*,bin,log,logs,node_modules,tmp,app/assets,app/javascript" \
  #   $( cat $file )
  # starscope --summary
  fi # Javascript

  if [ -e Gemfile ] ; then # Ruby - https://github.com/eapache/starscope
    files=cscope.rb.files
    command find . -type f -iname '*.rb' > $files
    echo ; echom "Scoping Ruby Files [$files]..."

    cscope -b -q -U -f cscope.js.out $( cat $files )

  # starscope --verbose \
  #   --export cscope,cscope.rb.out \
  #   --exclude ".git,.bundle,.cache,.config,.ssh,.npm,.vim,Gemfile*,bin,log,logs,node_modules,tmp,app/assets,app/javascript" \
  #   $( cat $file )
  # starscope --summary
  fi # Ruby

  if [ -e Pipfile ] ; then # Python - https://github.com/eapache/starscope
    files=cscope.py.files
    command find . -type f -iname '*.py' > $files
    echo ; echom "Scoping Python Files [$files]..."

    cscope -b -q -U -f cscope.py.out $( cat $files )

  # starscope --verbose \
  #   --export cscope,cscope.rb.out \
  #   --exclude ".git,.bundle,.cache,.config,.ssh,.npm,.vim,Gemfile*,bin,log,logs,node_modules,tmp,app/assets,app/javascript" \
  #   $( cat $file )
  # starscope --summary
  fi # Python

  files=cscope.php.files
  echo ; echom "TODO: Scoping PHP Files [$files]..."
  # if [ -e Pipfile ] ; then # PHP -https://github.com/vim-php/phpctags
  # fi # Python

  echo ; ls *scope*
  set -o noclobber
} # scope

# }}}

echo 'devPunks😈studio .bash_login' ; echo

# vim: foldmethod=marker

